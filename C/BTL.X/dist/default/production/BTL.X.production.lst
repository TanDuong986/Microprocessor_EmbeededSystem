

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Sat Jun 04 19:30:53 2022

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	strings,global,class=STRING,delta=2,noexec
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	intentry,global,class=CODE,delta=2
    32                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    33                           	dabs	1,0x7E,2
    34  0000                     
    35                           ; Version 2.20
    36                           ; Generated 12/02/2020 GMT
    37                           ; 
    38                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC16F877A Definitions
    67                           ; 
    68                           ; SFR Addresses
    69  0000                     	;# 
    70  0001                     	;# 
    71  0002                     	;# 
    72  0003                     	;# 
    73  0004                     	;# 
    74  0005                     	;# 
    75  0006                     	;# 
    76  0007                     	;# 
    77  0008                     	;# 
    78  0009                     	;# 
    79  000A                     	;# 
    80  000B                     	;# 
    81  000C                     	;# 
    82  000D                     	;# 
    83  000E                     	;# 
    84  000E                     	;# 
    85  000F                     	;# 
    86  0010                     	;# 
    87  0011                     	;# 
    88  0012                     	;# 
    89  0013                     	;# 
    90  0014                     	;# 
    91  0015                     	;# 
    92  0015                     	;# 
    93  0016                     	;# 
    94  0017                     	;# 
    95  0018                     	;# 
    96  0019                     	;# 
    97  001A                     	;# 
    98  001B                     	;# 
    99  001B                     	;# 
   100  001C                     	;# 
   101  001D                     	;# 
   102  001E                     	;# 
   103  001F                     	;# 
   104  0081                     	;# 
   105  0085                     	;# 
   106  0086                     	;# 
   107  0087                     	;# 
   108  0088                     	;# 
   109  0089                     	;# 
   110  008C                     	;# 
   111  008D                     	;# 
   112  008E                     	;# 
   113  0091                     	;# 
   114  0092                     	;# 
   115  0093                     	;# 
   116  0094                     	;# 
   117  0098                     	;# 
   118  0099                     	;# 
   119  009C                     	;# 
   120  009D                     	;# 
   121  009E                     	;# 
   122  009F                     	;# 
   123  010C                     	;# 
   124  010D                     	;# 
   125  010E                     	;# 
   126  010F                     	;# 
   127  018C                     	;# 
   128  018D                     	;# 
   129  0000                     	;# 
   130  0001                     	;# 
   131  0002                     	;# 
   132  0003                     	;# 
   133  0004                     	;# 
   134  0005                     	;# 
   135  0006                     	;# 
   136  0007                     	;# 
   137  0008                     	;# 
   138  0009                     	;# 
   139  000A                     	;# 
   140  000B                     	;# 
   141  000C                     	;# 
   142  000D                     	;# 
   143  000E                     	;# 
   144  000E                     	;# 
   145  000F                     	;# 
   146  0010                     	;# 
   147  0011                     	;# 
   148  0012                     	;# 
   149  0013                     	;# 
   150  0014                     	;# 
   151  0015                     	;# 
   152  0015                     	;# 
   153  0016                     	;# 
   154  0017                     	;# 
   155  0018                     	;# 
   156  0019                     	;# 
   157  001A                     	;# 
   158  001B                     	;# 
   159  001B                     	;# 
   160  001C                     	;# 
   161  001D                     	;# 
   162  001E                     	;# 
   163  001F                     	;# 
   164  0081                     	;# 
   165  0085                     	;# 
   166  0086                     	;# 
   167  0087                     	;# 
   168  0088                     	;# 
   169  0089                     	;# 
   170  008C                     	;# 
   171  008D                     	;# 
   172  008E                     	;# 
   173  0091                     	;# 
   174  0092                     	;# 
   175  0093                     	;# 
   176  0094                     	;# 
   177  0098                     	;# 
   178  0099                     	;# 
   179  009C                     	;# 
   180  009D                     	;# 
   181  009E                     	;# 
   182  009F                     	;# 
   183  010C                     	;# 
   184  010D                     	;# 
   185  010E                     	;# 
   186  010F                     	;# 
   187  018C                     	;# 
   188  018D                     	;# 
   189                           
   190                           	psect	idataCOMMON
   191  029C                     __pidataCOMMON:
   192                           
   193                           ;initializer for _BackLight_State
   194  029C  3408               	retlw	8
   195                           
   196                           	psect	idataBANK0
   197  029D                     __pidataBANK0:
   198                           
   199                           ;initializer for _pos
   200  029D  3402               	retlw	2
   201                           
   202                           	psect	nvCOMMON
   203  0078                     __pnvCOMMON:
   204  0078                     _i2c_add:
   205  0078                     	ds	1
   206  0013                     _SSPBUF	set	19
   207  0014                     _SSPCON	set	20
   208  0001                     _TMR0	set	1
   209  0008                     _PORTD	set	8
   210  0063                     _SSPIF	set	99
   211  0040                     _RD0	set	64
   212  005A                     _T0IF	set	90
   213  005D                     _T0IE	set	93
   214  005F                     _GIE	set	95
   215  0044                     _RD4	set	68
   216  0042                     _RD2	set	66
   217  0043                     _RD3	set	67
   218  0041                     _RD1	set	65
   219  0093                     _SSPADD	set	147
   220  0094                     _SSPSTAT	set	148
   221  0091                     _SSPCON2	set	145
   222  0088                     _TRISD	set	136
   223  048A                     _PEN	set	1162
   224  0488                     _SEN	set	1160
   225  043C                     _TRISC4	set	1084
   226  043B                     _TRISC3	set	1083
   227  040D                     _T0CS	set	1037
   228  0408                     _PS0	set	1032
   229  0409                     _PS1	set	1033
   230  040A                     _PS2	set	1034
   231  040B                     _PSA	set	1035
   232                           
   233                           	psect	strings
   234  0155                     __pstrings:
   235  0155                     stringtab:
   236  0155                     __stringtab:
   237  0155                     stringcode:	
   238                           ;	String table - string pointers are 1 byte each
   239                           
   240  0155                     stringdir:
   241  0155  3001               	movlw	high stringdir
   242  0156  008A               	movwf	10
   243  0157  0804               	movf	4,w
   244  0158  0A84               	incf	4,f
   245  0159  0782               	addwf	2,f
   246  015A                     __stringbase:
   247  015A  3400               	retlw	0
   248  015B                     __end_of__stringtab:
   249  015B                     STR_2:
   250  015B  3430               	retlw	48	;'0'
   251  015C  3420               	retlw	32	;' '
   252  015D  3420               	retlw	32	;' '
   253  015E  342E               	retlw	46	;'.'
   254  015F  3439               	retlw	57	;'9'
   255  0160  3420               	retlw	32	;' '
   256  0161  3420               	retlw	32	;' '
   257  0162  342E               	retlw	46	;'.'
   258  0163  3431               	retlw	49	;'1'
   259  0164  3430               	retlw	48	;'0'
   260  0165  3420               	retlw	32	;' '
   261  0166  3400               	retlw	0
   262  0167                     STR_1:
   263  0167  3453               	retlw	83	;'S'
   264  0168  3450               	retlw	80	;'P'
   265  0169  3431               	retlw	49	;'1'
   266  016A  3420               	retlw	32	;' '
   267  016B  3453               	retlw	83	;'S'
   268  016C  3450               	retlw	80	;'P'
   269  016D  3432               	retlw	50	;'2'
   270  016E  3420               	retlw	32	;' '
   271  016F  3453               	retlw	83	;'S'
   272  0170  3450               	retlw	80	;'P'
   273  0171  3433               	retlw	51	;'3'
   274  0172  3400               	retlw	0
   275  0173                     STR_3:
   276  0173  344E               	retlw	78	;'N'
   277  0174  3461               	retlw	97	;'a'
   278  0175  346D               	retlw	109	;'m'
   279  0176  3420               	retlw	32	;' '
   280  0177  344C               	retlw	76	;'L'
   281  0178  3465               	retlw	101	;'e'
   282  0179  3465               	retlw	101	;'e'
   283  017A  3400               	retlw	0
   284  017B                     STR_4:
   285  017B  346B               	retlw	107	;'k'
   286  017C  3461               	retlw	97	;'a'
   287  017D  346B               	retlw	107	;'k'
   288  017E  3461               	retlw	97	;'a'
   289  017F  346B               	retlw	107	;'k'
   290  0180  3461               	retlw	97	;'a'
   291  0181  3400               	retlw	0
   292                           
   293                           	psect	cinit
   294  000F                     start_initialization:	
   295                           ; #config settings
   296                           
   297  000F                     __initialization:
   298                           
   299                           ; Initialize objects allocated to BANK0
   300  000F  120A  118A  229D  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   301  0014  00AC               	movwf	__pdataBANK0& (0+127)
   302                           
   303                           ; Initialize objects allocated to COMMON
   304  0015  120A  118A  229C  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   305  001A  00F9               	movwf	__pdataCOMMON& (0+127)
   306                           
   307                           ; Clear objects allocated to BANK0
   308  001B  01AB               	clrf	__pbssBANK0& (0+127)
   309                           
   310                           ; Clear objects allocated to COMMON
   311  001C  01F6               	clrf	__pbssCOMMON& (0+127)
   312  001D  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   313  001E                     end_of_initialization:	
   314                           ;End of C runtime variable initialization code
   315                           
   316  001E                     __end_of__initialization:
   317  001E  0183               	clrf	3
   318  001F  120A  118A  2822   	ljmp	_main	;jump to C main() function
   319                           
   320                           	psect	bssCOMMON
   321  0076                     __pbssCOMMON:
   322  0076                     _RS:
   323  0076                     	ds	1
   324  0077                     _cnt:
   325  0077                     	ds	1
   326                           
   327                           	psect	dataCOMMON
   328  0079                     __pdataCOMMON:
   329  0079                     _BackLight_State:
   330  0079                     	ds	1
   331                           
   332                           	psect	bssBANK0
   333  002B                     __pbssBANK0:
   334  002B                     _LCD_SWAP_OLL:
   335  002B                     	ds	1
   336                           
   337                           	psect	dataBANK0
   338  002C                     __pdataBANK0:
   339  002C                     _pos:
   340  002C                     	ds	1
   341                           
   342                           	psect	cstackCOMMON
   343  0070                     __pcstackCOMMON:
   344  0070                     ?_Servo_Init:
   345  0070                     ?_I2C_Master_Init:	
   346                           ; 1 bytes @ 0x0
   347                           
   348  0070                     ?_LCD_Init:	
   349                           ; 1 bytes @ 0x0
   350                           
   351  0070                     ?_LCD_Clear:	
   352                           ; 1 bytes @ 0x0
   353                           
   354  0070                     ?_LCD_Write_String:	
   355                           ; 1 bytes @ 0x0
   356                           
   357  0070                     ?_IO_Expander_Write:	
   358                           ; 1 bytes @ 0x0
   359                           
   360  0070                     ?_LCD_CMD:	
   361                           ; 1 bytes @ 0x0
   362                           
   363  0070                     ?_main:	
   364                           ; 1 bytes @ 0x0
   365                           
   366  0070                     ?_isr1:	
   367                           ; 1 bytes @ 0x0
   368                           
   369  0070                     ??_isr1:	
   370                           ; 1 bytes @ 0x0
   371                           
   372  0070                     ?_I2C_Master_Wait:	
   373                           ; 1 bytes @ 0x0
   374                           
   375  0070                     ?_I2C_Master_Start:	
   376                           ; 1 bytes @ 0x0
   377                           
   378  0070                     ?_I2C_Master_Stop:	
   379                           ; 1 bytes @ 0x0
   380                           
   381  0070                     ?_I2C_Master_Write:	
   382                           ; 1 bytes @ 0x0
   383                           
   384  0070                     ?_LCD_Write_4Bit:	
   385                           ; 1 bytes @ 0x0
   386                           
   387  0070                     ?_LCD_Write_Char:	
   388                           ; 1 bytes @ 0x0
   389                           
   390                           
   391                           ; 1 bytes @ 0x0
   392  0070                     	ds	6
   393                           
   394                           	psect	cstackBANK0
   395  0020                     __pcstackBANK0:
   396  0020                     ??_Servo_Init:
   397  0020                     ??_I2C_Master_Init:	
   398                           ; 1 bytes @ 0x0
   399                           
   400  0020                     ??_I2C_Master_Wait:	
   401                           ; 1 bytes @ 0x0
   402                           
   403  0020                     ??_I2C_Master_Start:	
   404                           ; 1 bytes @ 0x0
   405                           
   406  0020                     ??_I2C_Master_Stop:	
   407                           ; 1 bytes @ 0x0
   408                           
   409  0020                     ??_I2C_Master_Write:	
   410                           ; 1 bytes @ 0x0
   411                           
   412  0020                     I2C_Master_Write@data:	
   413                           ; 1 bytes @ 0x0
   414                           
   415                           
   416                           ; 1 bytes @ 0x0
   417  0020                     	ds	1
   418  0021                     ??_IO_Expander_Write:
   419  0021                     IO_Expander_Write@Data:	
   420                           ; 1 bytes @ 0x1
   421                           
   422                           
   423                           ; 1 bytes @ 0x1
   424  0021                     	ds	1
   425  0022                     ??_LCD_Write_4Bit:
   426                           
   427                           ; 1 bytes @ 0x2
   428  0022                     	ds	1
   429  0023                     LCD_Write_4Bit@Nibble:
   430                           
   431                           ; 1 bytes @ 0x3
   432  0023                     	ds	1
   433  0024                     ??_LCD_CMD:
   434  0024                     ??_LCD_Write_Char:	
   435                           ; 1 bytes @ 0x4
   436                           
   437                           
   438                           ; 1 bytes @ 0x4
   439  0024                     	ds	1
   440  0025                     LCD_CMD@CMD:
   441  0025                     LCD_Write_Char@Data:	
   442                           ; 1 bytes @ 0x5
   443                           
   444                           
   445                           ; 1 bytes @ 0x5
   446  0025                     	ds	1
   447  0026                     ??_LCD_Init:
   448  0026                     ??_LCD_Clear:	
   449                           ; 1 bytes @ 0x6
   450                           
   451  0026                     ?_LCD_Set_Cursor:	
   452                           ; 1 bytes @ 0x6
   453                           
   454  0026                     ??_LCD_Write_String:	
   455                           ; 1 bytes @ 0x6
   456                           
   457  0026                     LCD_Set_Cursor@COL:	
   458                           ; 1 bytes @ 0x6
   459                           
   460  0026                     LCD_Write_String@i:	
   461                           ; 1 bytes @ 0x6
   462                           
   463                           
   464                           ; 2 bytes @ 0x6
   465  0026                     	ds	1
   466  0027                     ??_LCD_Set_Cursor:
   467                           
   468                           ; 1 bytes @ 0x7
   469  0027                     	ds	1
   470  0028                     LCD_Write_String@Str:
   471                           
   472                           ; 1 bytes @ 0x8
   473  0028                     	ds	1
   474  0029                     LCD_Init@I2C_Add:
   475  0029                     LCD_Set_Cursor@ROW:	
   476                           ; 1 bytes @ 0x9
   477                           
   478                           
   479                           ; 1 bytes @ 0x9
   480  0029                     	ds	1
   481  002A                     ??_main:
   482                           
   483                           ; 1 bytes @ 0xA
   484  002A                     	ds	1
   485                           
   486                           	psect	maintext
   487  0022                     __pmaintext:	
   488 ;;
   489 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   490 ;;
   491 ;; *************** function _main *****************
   492 ;; Defined at:
   493 ;;		line 65 in file "BTL.c"
   494 ;; Parameters:    Size  Location     Type
   495 ;;		None
   496 ;; Auto vars:     Size  Location     Type
   497 ;;		None
   498 ;; Return value:  Size  Location     Type
   499 ;;                  1    wreg      void 
   500 ;; Registers used:
   501 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   502 ;; Tracked objects:
   503 ;;		On entry : B00/0
   504 ;;		On exit  : 0/0
   505 ;;		Unchanged: 0/0
   506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   507 ;;      Params:         0       0       0       0       0
   508 ;;      Locals:         0       0       0       0       0
   509 ;;      Temps:          0       1       0       0       0
   510 ;;      Totals:         0       1       0       0       0
   511 ;;Total ram usage:        1 bytes
   512 ;; Hardware stack levels required when called:    7
   513 ;; This function calls:
   514 ;;		_I2C_Master_Init
   515 ;;		_LCD_Clear
   516 ;;		_LCD_Init
   517 ;;		_LCD_Set_Cursor
   518 ;;		_LCD_Write_String
   519 ;;		_Servo_Init
   520 ;; This function is called by:
   521 ;;		Startup code after reset
   522 ;; This function uses a non-reentrant model
   523 ;;
   524                           
   525                           
   526                           ;psect for function _main
   527  0022                     _main:
   528  0022                     l1194:	
   529                           ;incstack = 0
   530                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   531                           
   532                           
   533                           ;BTL.c: 68:     Servo_Init();
   534  0022  120A  118A  2251  120A  118A  	fcall	_Servo_Init
   535                           
   536                           ;BTL.c: 69:     I2C_Master_Init();
   537  0027  120A  118A  227D  120A  118A  	fcall	_I2C_Master_Init
   538                           
   539                           ;BTL.c: 70:     LCD_Init(0x27);
   540  002C  3027               	movlw	39
   541  002D  120A  118A  20BF  120A  118A  	fcall	_LCD_Init
   542  0032                     l1196:
   543                           
   544                           ;BTL.c: 73:     {;BTL.c: 74:         if (RD1 == 1)
   545  0032  1283               	bcf	3,5	;RP0=0, select bank0
   546  0033  1303               	bcf	3,6	;RP1=0, select bank0
   547  0034  1C88               	btfss	8,1	;volatile
   548  0035  2837               	goto	u411
   549  0036  2838               	goto	u410
   550  0037                     u411:
   551  0037  283D               	goto	l1200
   552  0038                     u410:
   553  0038                     l1198:
   554                           
   555                           ;BTL.c: 75:         {;BTL.c: 76:             pos = 20;
   556  0038  3014               	movlw	20
   557  0039  00AA               	movwf	??_main
   558  003A  082A               	movf	??_main,w
   559  003B  00AC               	movwf	_pos
   560                           
   561                           ;BTL.c: 77:         }
   562  003C  2841               	goto	l1202
   563  003D                     l1200:
   564                           
   565                           ;BTL.c: 79:         {;BTL.c: 80:             pos = 10;
   566  003D  300A               	movlw	10
   567  003E  00AA               	movwf	??_main
   568  003F  082A               	movf	??_main,w
   569  0040  00AC               	movwf	_pos
   570  0041                     l1202:
   571                           
   572                           ;BTL.c: 82:         RD3 = RD2;
   573  0041  1908               	btfsc	8,2	;volatile
   574  0042  2844               	goto	u421
   575  0043  2848               	goto	u420
   576  0044                     u421:
   577  0044  1283               	bcf	3,5	;RP0=0, select bank0
   578  0045  1303               	bcf	3,6	;RP1=0, select bank0
   579  0046  1588               	bsf	8,3	;volatile
   580  0047  284B               	goto	u434
   581  0048                     u420:
   582  0048  1283               	bcf	3,5	;RP0=0, select bank0
   583  0049  1303               	bcf	3,6	;RP1=0, select bank0
   584  004A  1188               	bcf	8,3	;volatile
   585  004B                     u434:
   586  004B                     l1204:
   587                           
   588                           ;BTL.c: 84:         if (RD4 == 0 && RD4 != LCD_SWAP_OLL)
   589  004B  1A08               	btfsc	8,4	;volatile
   590  004C  284E               	goto	u441
   591  004D  284F               	goto	u440
   592  004E                     u441:
   593  004E  2880               	goto	l1220
   594  004F                     u440:
   595  004F                     l1206:
   596  004F  3000               	movlw	0
   597  0050  1A08               	btfsc	8,4	;volatile
   598  0051  3001               	movlw	1
   599  0052  062B               	xorwf	_LCD_SWAP_OLL,w
   600  0053  1903               	skipnz
   601  0054  2856               	goto	u451
   602  0055  2857               	goto	u450
   603  0056                     u451:
   604  0056  2880               	goto	l1220
   605  0057                     u450:
   606  0057                     l1208:
   607                           
   608                           ;BTL.c: 85:         {;BTL.c: 86:             LCD_Clear();
   609  0057  120A  118A  2262  120A  118A  	fcall	_LCD_Clear
   610  005C                     l1210:
   611                           
   612                           ;BTL.c: 87:             LCD_Set_Cursor(1, 1);
   613  005C  1283               	bcf	3,5	;RP0=0, select bank0
   614  005D  1303               	bcf	3,6	;RP1=0, select bank0
   615  005E  01A6               	clrf	LCD_Set_Cursor@COL
   616  005F  0AA6               	incf	LCD_Set_Cursor@COL,f
   617  0060  3001               	movlw	1
   618  0061  120A  118A  21AB  120A  118A  	fcall	_LCD_Set_Cursor
   619  0066                     l1212:
   620                           
   621                           ;BTL.c: 88:             LCD_Write_String("SP1 SP2 SP3");
   622  0066  300D               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   623  0067  120A  118A  2182  120A  118A  	fcall	_LCD_Write_String
   624  006C                     l1214:
   625                           
   626                           ;BTL.c: 89:             LCD_Set_Cursor(2, 1);
   627  006C  1283               	bcf	3,5	;RP0=0, select bank0
   628  006D  1303               	bcf	3,6	;RP1=0, select bank0
   629  006E  01A6               	clrf	LCD_Set_Cursor@COL
   630  006F  0AA6               	incf	LCD_Set_Cursor@COL,f
   631  0070  3002               	movlw	2
   632  0071  120A  118A  21AB  120A  118A  	fcall	_LCD_Set_Cursor
   633  0076                     l1216:
   634                           
   635                           ;BTL.c: 90:             LCD_Write_String("0  .9  .10 ");
   636  0076  3001               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   637  0077  120A  118A  2182  120A  118A  	fcall	_LCD_Write_String
   638  007C                     l1218:
   639                           
   640                           ;BTL.c: 91:             LCD_SWAP_OLL = 0;
   641  007C  1283               	bcf	3,5	;RP0=0, select bank0
   642  007D  1303               	bcf	3,6	;RP1=0, select bank0
   643  007E  01AB               	clrf	_LCD_SWAP_OLL
   644                           
   645                           ;BTL.c: 92:         }
   646  007F  28B1               	goto	l1234
   647  0080                     l1220:
   648                           
   649                           ;BTL.c: 94:         {;BTL.c: 95:             if (RD4 != LCD_SWAP_OLL)
   650  0080  3000               	movlw	0
   651  0081  1A08               	btfsc	8,4	;volatile
   652  0082  3001               	movlw	1
   653  0083  062B               	xorwf	_LCD_SWAP_OLL,w
   654  0084  1903               	skipnz
   655  0085  2887               	goto	u461
   656  0086  2888               	goto	u460
   657  0087                     u461:
   658  0087  28B1               	goto	l1234
   659  0088                     u460:
   660  0088                     l1222:
   661                           
   662                           ;BTL.c: 96:             {;BTL.c: 97:                 LCD_Clear();
   663  0088  120A  118A  2262  120A  118A  	fcall	_LCD_Clear
   664  008D                     l1224:
   665                           
   666                           ;BTL.c: 98:                 LCD_Set_Cursor(1, 1);
   667  008D  1283               	bcf	3,5	;RP0=0, select bank0
   668  008E  1303               	bcf	3,6	;RP1=0, select bank0
   669  008F  01A6               	clrf	LCD_Set_Cursor@COL
   670  0090  0AA6               	incf	LCD_Set_Cursor@COL,f
   671  0091  3001               	movlw	1
   672  0092  120A  118A  21AB  120A  118A  	fcall	_LCD_Set_Cursor
   673  0097                     l1226:
   674                           
   675                           ;BTL.c: 99:                 LCD_Write_String("Nam Lee");
   676  0097  3019               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   677  0098  120A  118A  2182  120A  118A  	fcall	_LCD_Write_String
   678  009D                     l1228:
   679                           
   680                           ;BTL.c: 100:                 LCD_Set_Cursor(2, 1);
   681  009D  1283               	bcf	3,5	;RP0=0, select bank0
   682  009E  1303               	bcf	3,6	;RP1=0, select bank0
   683  009F  01A6               	clrf	LCD_Set_Cursor@COL
   684  00A0  0AA6               	incf	LCD_Set_Cursor@COL,f
   685  00A1  3002               	movlw	2
   686  00A2  120A  118A  21AB  120A  118A  	fcall	_LCD_Set_Cursor
   687  00A7                     l1230:
   688                           
   689                           ;BTL.c: 101:                 LCD_Write_String("kakaka");
   690  00A7  3021               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   691  00A8  120A  118A  2182  120A  118A  	fcall	_LCD_Write_String
   692  00AD                     l1232:
   693                           
   694                           ;BTL.c: 102:                 LCD_SWAP_OLL = 1;
   695  00AD  1283               	bcf	3,5	;RP0=0, select bank0
   696  00AE  1303               	bcf	3,6	;RP1=0, select bank0
   697  00AF  01AB               	clrf	_LCD_SWAP_OLL
   698  00B0  0AAB               	incf	_LCD_SWAP_OLL,f
   699  00B1                     l1234:
   700                           
   701                           ;BTL.c: 105:         RD3 = RD2;
   702  00B1  1908               	btfsc	8,2	;volatile
   703  00B2  28B4               	goto	u471
   704  00B3  28B8               	goto	u470
   705  00B4                     u471:
   706  00B4  1283               	bcf	3,5	;RP0=0, select bank0
   707  00B5  1303               	bcf	3,6	;RP1=0, select bank0
   708  00B6  1588               	bsf	8,3	;volatile
   709  00B7  28BB               	goto	u484
   710  00B8                     u470:
   711  00B8  1283               	bcf	3,5	;RP0=0, select bank0
   712  00B9  1303               	bcf	3,6	;RP1=0, select bank0
   713  00BA  1188               	bcf	8,3	;volatile
   714  00BB                     u484:
   715  00BB  2832               	goto	l1196
   716  00BC  120A  118A  280C   	ljmp	start
   717  00BF                     __end_of_main:
   718                           
   719                           	psect	text1
   720  0251                     __ptext1:	
   721 ;; *************** function _Servo_Init *****************
   722 ;; Defined at:
   723 ;;		line 112 in file "BTL.c"
   724 ;; Parameters:    Size  Location     Type
   725 ;;		None
   726 ;; Auto vars:     Size  Location     Type
   727 ;;		None
   728 ;; Return value:  Size  Location     Type
   729 ;;                  1    wreg      void 
   730 ;; Registers used:
   731 ;;		wreg
   732 ;; Tracked objects:
   733 ;;		On entry : 0/0
   734 ;;		On exit  : 0/0
   735 ;;		Unchanged: 0/0
   736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   737 ;;      Params:         0       0       0       0       0
   738 ;;      Locals:         0       0       0       0       0
   739 ;;      Temps:          0       0       0       0       0
   740 ;;      Totals:         0       0       0       0       0
   741 ;;Total ram usage:        0 bytes
   742 ;; Hardware stack levels used:    1
   743 ;; Hardware stack levels required when called:    1
   744 ;; This function calls:
   745 ;;		Nothing
   746 ;; This function is called by:
   747 ;;		_main
   748 ;; This function uses a non-reentrant model
   749 ;;
   750                           
   751                           
   752                           ;psect for function _Servo_Init
   753  0251                     _Servo_Init:
   754  0251                     l1136:	
   755                           ;incstack = 0
   756                           ; Regs used in _Servo_Init: [wreg]
   757                           
   758                           
   759                           ;BTL.c: 115:     PSA = 0;
   760  0251  1683               	bsf	3,5	;RP0=1, select bank1
   761  0252  1303               	bcf	3,6	;RP1=0, select bank1
   762  0253  1181               	bcf	1,3	;volatile
   763                           
   764                           ;BTL.c: 117:     PS2 = 0;
   765  0254  1101               	bcf	1,2	;volatile
   766                           
   767                           ;BTL.c: 118:     PS1 = 0;
   768  0255  1081               	bcf	1,1	;volatile
   769                           
   770                           ;BTL.c: 119:     PS0 = 0;
   771  0256  1001               	bcf	1,0	;volatile
   772                           
   773                           ;BTL.c: 121:     T0CS = 0;
   774  0257  1281               	bcf	1,5	;volatile
   775                           
   776                           ;BTL.c: 123:     GIE = 1;
   777  0258  178B               	bsf	11,7	;volatile
   778                           
   779                           ;BTL.c: 124:     T0IE = 1;
   780  0259  168B               	bsf	11,5	;volatile
   781                           
   782                           ;BTL.c: 125:     T0IF = 0;
   783  025A  110B               	bcf	11,2	;volatile
   784  025B                     l1138:
   785                           
   786                           ;BTL.c: 127:     TRISD = 0x16;
   787  025B  3016               	movlw	22
   788  025C  0088               	movwf	8	;volatile
   789                           
   790                           ;BTL.c: 128:     PORTD = 0x01;
   791  025D  3001               	movlw	1
   792  025E  1283               	bcf	3,5	;RP0=0, select bank0
   793  025F  1303               	bcf	3,6	;RP1=0, select bank0
   794  0260  0088               	movwf	8	;volatile
   795  0261                     l98:
   796  0261  0008               	return
   797  0262                     __end_of_Servo_Init:
   798                           
   799                           	psect	text2
   800  0182                     __ptext2:	
   801 ;; *************** function _LCD_Write_String *****************
   802 ;; Defined at:
   803 ;;		line 241 in file "BTL.c"
   804 ;; Parameters:    Size  Location     Type
   805 ;;  Str             1    wreg     PTR unsigned char 
   806 ;;		 -> STR_4(7), STR_3(8), STR_2(12), STR_1(12), 
   807 ;; Auto vars:     Size  Location     Type
   808 ;;  Str             1    8[BANK0 ] PTR unsigned char 
   809 ;;		 -> STR_4(7), STR_3(8), STR_2(12), STR_1(12), 
   810 ;;  i               2    6[BANK0 ] int 
   811 ;; Return value:  Size  Location     Type
   812 ;;                  1    wreg      void 
   813 ;; Registers used:
   814 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   815 ;; Tracked objects:
   816 ;;		On entry : 0/0
   817 ;;		On exit  : 0/0
   818 ;;		Unchanged: 0/0
   819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   820 ;;      Params:         0       0       0       0       0
   821 ;;      Locals:         0       3       0       0       0
   822 ;;      Temps:          0       0       0       0       0
   823 ;;      Totals:         0       3       0       0       0
   824 ;;Total ram usage:        3 bytes
   825 ;; Hardware stack levels used:    1
   826 ;; Hardware stack levels required when called:    6
   827 ;; This function calls:
   828 ;;		_LCD_Write_Char
   829 ;; This function is called by:
   830 ;;		_main
   831 ;; This function uses a non-reentrant model
   832 ;;
   833                           
   834                           
   835                           ;psect for function _LCD_Write_String
   836  0182                     _LCD_Write_String:
   837                           
   838                           ;incstack = 0
   839                           ; Regs used in _LCD_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   840                           ;LCD_Write_String@Str stored from wreg
   841  0182  1283               	bcf	3,5	;RP0=0, select bank0
   842  0183  1303               	bcf	3,6	;RP1=0, select bank0
   843  0184  00A8               	movwf	LCD_Write_String@Str
   844  0185                     l1186:
   845                           
   846                           ;BTL.c: 241: void LCD_Write_String(char *Str);BTL.c: 242: {;BTL.c: 243:     for (int i =
      +                           0; Str[i] != '\0'; i++)
   847  0185  01A6               	clrf	LCD_Write_String@i
   848  0186  01A7               	clrf	LCD_Write_String@i+1
   849  0187  299D               	goto	l1192
   850  0188                     l1188:
   851                           
   852                           ;BTL.c: 244:         LCD_Write_Char(Str[i]);
   853  0188  0826               	movf	LCD_Write_String@i,w
   854  0189  0728               	addwf	LCD_Write_String@Str,w
   855  018A  0084               	movwf	4
   856  018B  120A  118A  2155  120A  118A  	fcall	stringdir
   857  0190  120A  118A  21CD  120A  118A  	fcall	_LCD_Write_Char
   858  0195                     l1190:
   859  0195  3001               	movlw	1
   860  0196  1283               	bcf	3,5	;RP0=0, select bank0
   861  0197  1303               	bcf	3,6	;RP1=0, select bank0
   862  0198  07A6               	addwf	LCD_Write_String@i,f
   863  0199  1803               	skipnc
   864  019A  0AA7               	incf	LCD_Write_String@i+1,f
   865  019B  3000               	movlw	0
   866  019C  07A7               	addwf	LCD_Write_String@i+1,f
   867  019D                     l1192:
   868  019D  0826               	movf	LCD_Write_String@i,w
   869  019E  0728               	addwf	LCD_Write_String@Str,w
   870  019F  0084               	movwf	4
   871  01A0  120A  118A  2155  120A  118A  	fcall	stringdir
   872  01A5  3A00               	xorlw	0
   873  01A6  1D03               	skipz
   874  01A7  29A9               	goto	u401
   875  01A8  29AA               	goto	u400
   876  01A9                     u401:
   877  01A9  2988               	goto	l1188
   878  01AA                     u400:
   879  01AA                     l148:
   880  01AA  0008               	return
   881  01AB                     __end_of_LCD_Write_String:
   882                           
   883                           	psect	text3
   884  01CD                     __ptext3:	
   885 ;; *************** function _LCD_Write_Char *****************
   886 ;; Defined at:
   887 ;;		line 234 in file "BTL.c"
   888 ;; Parameters:    Size  Location     Type
   889 ;;  Data            1    wreg     unsigned char 
   890 ;; Auto vars:     Size  Location     Type
   891 ;;  Data            1    5[BANK0 ] unsigned char 
   892 ;; Return value:  Size  Location     Type
   893 ;;                  1    wreg      void 
   894 ;; Registers used:
   895 ;;		wreg, status,2, status,0, pclath, cstack
   896 ;; Tracked objects:
   897 ;;		On entry : 0/0
   898 ;;		On exit  : 0/0
   899 ;;		Unchanged: 0/0
   900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   901 ;;      Params:         0       0       0       0       0
   902 ;;      Locals:         0       1       0       0       0
   903 ;;      Temps:          0       1       0       0       0
   904 ;;      Totals:         0       2       0       0       0
   905 ;;Total ram usage:        2 bytes
   906 ;; Hardware stack levels used:    1
   907 ;; Hardware stack levels required when called:    5
   908 ;; This function calls:
   909 ;;		_LCD_Write_4Bit
   910 ;; This function is called by:
   911 ;;		_LCD_Write_String
   912 ;; This function uses a non-reentrant model
   913 ;;
   914                           
   915                           
   916                           ;psect for function _LCD_Write_Char
   917  01CD                     _LCD_Write_Char:
   918                           
   919                           ;incstack = 0
   920                           ; Regs used in _LCD_Write_Char: [wreg+status,2+status,0+pclath+cstack]
   921                           ;LCD_Write_Char@Data stored from wreg
   922  01CD  1283               	bcf	3,5	;RP0=0, select bank0
   923  01CE  1303               	bcf	3,6	;RP1=0, select bank0
   924  01CF  00A5               	movwf	LCD_Write_Char@Data
   925  01D0                     l1132:
   926                           
   927                           ;BTL.c: 234: void LCD_Write_Char(char Data);BTL.c: 235: {;BTL.c: 236:     RS = 1;
   928  01D0  01F6               	clrf	_RS
   929  01D1  0AF6               	incf	_RS,f
   930  01D2                     l1134:
   931                           
   932                           ;BTL.c: 237:     LCD_Write_4Bit(Data & 0xF0);
   933  01D2  0825               	movf	LCD_Write_Char@Data,w
   934  01D3  39F0               	andlw	240
   935  01D4  120A  118A  2227  120A  118A  	fcall	_LCD_Write_4Bit
   936                           
   937                           ;BTL.c: 238:     LCD_Write_4Bit((Data << 4) & 0xF0);
   938  01D9  1283               	bcf	3,5	;RP0=0, select bank0
   939  01DA  1303               	bcf	3,6	;RP1=0, select bank0
   940  01DB  0825               	movf	LCD_Write_Char@Data,w
   941  01DC  00A4               	movwf	??_LCD_Write_Char
   942  01DD  3003               	movlw	3
   943  01DE                     u395:
   944  01DE  1003               	clrc
   945  01DF  0DA4               	rlf	??_LCD_Write_Char,f
   946  01E0  3EFF               	addlw	-1
   947  01E1  1D03               	skipz
   948  01E2  29DE               	goto	u395
   949  01E3  1003               	clrc
   950  01E4  0D24               	rlf	??_LCD_Write_Char,w
   951  01E5  39F0               	andlw	240
   952  01E6  120A  118A  2227  120A  118A  	fcall	_LCD_Write_4Bit
   953  01EB                     l142:
   954  01EB  0008               	return
   955  01EC                     __end_of_LCD_Write_Char:
   956                           
   957                           	psect	text4
   958  01AB                     __ptext4:	
   959 ;; *************** function _LCD_Set_Cursor *****************
   960 ;; Defined at:
   961 ;;		line 247 in file "BTL.c"
   962 ;; Parameters:    Size  Location     Type
   963 ;;  ROW             1    wreg     unsigned char 
   964 ;;  COL             1    6[BANK0 ] unsigned char 
   965 ;; Auto vars:     Size  Location     Type
   966 ;;  ROW             1    9[BANK0 ] unsigned char 
   967 ;; Return value:  Size  Location     Type
   968 ;;                  1    wreg      void 
   969 ;; Registers used:
   970 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   971 ;; Tracked objects:
   972 ;;		On entry : 0/0
   973 ;;		On exit  : 0/0
   974 ;;		Unchanged: 0/0
   975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   976 ;;      Params:         0       1       0       0       0
   977 ;;      Locals:         0       1       0       0       0
   978 ;;      Temps:          0       2       0       0       0
   979 ;;      Totals:         0       4       0       0       0
   980 ;;Total ram usage:        4 bytes
   981 ;; Hardware stack levels used:    1
   982 ;; Hardware stack levels required when called:    6
   983 ;; This function calls:
   984 ;;		_LCD_CMD
   985 ;; This function is called by:
   986 ;;		_main
   987 ;; This function uses a non-reentrant model
   988 ;;
   989                           
   990                           
   991                           ;psect for function _LCD_Set_Cursor
   992  01AB                     _LCD_Set_Cursor:
   993                           
   994                           ;incstack = 0
   995                           ; Regs used in _LCD_Set_Cursor: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   996                           ;LCD_Set_Cursor@ROW stored from wreg
   997  01AB  1283               	bcf	3,5	;RP0=0, select bank0
   998  01AC  1303               	bcf	3,6	;RP1=0, select bank0
   999  01AD  00A9               	movwf	LCD_Set_Cursor@ROW
  1000  01AE                     l1170:
  1001                           
  1002                           ;BTL.c: 247: void LCD_Set_Cursor(unsigned char ROW, unsigned char COL);BTL.c: 248: {;BTL
      +                          .c: 249:     switch (ROW)
  1003  01AE  29BF               	goto	l1178
  1004  01AF                     l1172:
  1005                           
  1006                           ;BTL.c: 252:         LCD_CMD(0xC0 + COL - 1);
  1007  01AF  0826               	movf	LCD_Set_Cursor@COL,w
  1008  01B0  3EBF               	addlw	191
  1009  01B1  120A  118A  21EC  120A  118A  	fcall	_LCD_CMD
  1010                           
  1011                           ;BTL.c: 253:         break;
  1012  01B6  29CC               	goto	l155
  1013  01B7                     l1174:
  1014                           
  1015                           ;BTL.c: 256:         LCD_CMD(0x80 + COL - 1);
  1016  01B7  0826               	movf	LCD_Set_Cursor@COL,w
  1017  01B8  3E7F               	addlw	127
  1018  01B9  120A  118A  21EC  120A  118A  	fcall	_LCD_CMD
  1019                           
  1020                           ;BTL.c: 257:         break;
  1021  01BE  29CC               	goto	l155
  1022  01BF                     l1178:
  1023  01BF  0829               	movf	LCD_Set_Cursor@ROW,w
  1024  01C0  00A7               	movwf	??_LCD_Set_Cursor
  1025  01C1  01A8               	clrf	??_LCD_Set_Cursor+1
  1026                           
  1027                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1028                           ; Switch size 1, requested type "simple"
  1029                           ; Number of cases is 1, Range of values is 0 to 0
  1030                           ; switch strategies available:
  1031                           ; Name         Instructions Cycles
  1032                           ; simple_byte            4     3 (average)
  1033                           ; direct_byte           11     8 (fixed)
  1034                           ; jumptable            260     6 (fixed)
  1035                           ;	Chosen strategy is simple_byte
  1036  01C2  0828               	movf	??_LCD_Set_Cursor+1,w
  1037  01C3  3A00               	xorlw	0	; case 0
  1038  01C4  1903               	skipnz
  1039  01C5  29C7               	goto	l1266
  1040  01C6  29B7               	goto	l1174
  1041  01C7                     l1266:
  1042                           
  1043                           ; Switch size 1, requested type "simple"
  1044                           ; Number of cases is 1, Range of values is 2 to 2
  1045                           ; switch strategies available:
  1046                           ; Name         Instructions Cycles
  1047                           ; simple_byte            4     3 (average)
  1048                           ; direct_byte           14    11 (fixed)
  1049                           ; jumptable            263     9 (fixed)
  1050                           ;	Chosen strategy is simple_byte
  1051  01C7  0827               	movf	??_LCD_Set_Cursor,w
  1052  01C8  3A02               	xorlw	2	; case 2
  1053  01C9  1903               	skipnz
  1054  01CA  29AF               	goto	l1172
  1055  01CB  29B7               	goto	l1174
  1056  01CC                     l155:
  1057  01CC  0008               	return
  1058  01CD                     __end_of_LCD_Set_Cursor:
  1059                           
  1060                           	psect	text5
  1061  00BF                     __ptext5:	
  1062 ;; *************** function _LCD_Init *****************
  1063 ;; Defined at:
  1064 ;;		line 194 in file "BTL.c"
  1065 ;; Parameters:    Size  Location     Type
  1066 ;;  I2C_Add         1    wreg     unsigned char 
  1067 ;; Auto vars:     Size  Location     Type
  1068 ;;  I2C_Add         1    9[BANK0 ] unsigned char 
  1069 ;; Return value:  Size  Location     Type
  1070 ;;                  1    wreg      void 
  1071 ;; Registers used:
  1072 ;;		wreg, status,2, status,0, pclath, cstack
  1073 ;; Tracked objects:
  1074 ;;		On entry : 0/0
  1075 ;;		On exit  : 0/0
  1076 ;;		Unchanged: 0/0
  1077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1078 ;;      Params:         0       0       0       0       0
  1079 ;;      Locals:         0       1       0       0       0
  1080 ;;      Temps:          0       3       0       0       0
  1081 ;;      Totals:         0       4       0       0       0
  1082 ;;Total ram usage:        4 bytes
  1083 ;; Hardware stack levels used:    1
  1084 ;; Hardware stack levels required when called:    6
  1085 ;; This function calls:
  1086 ;;		_IO_Expander_Write
  1087 ;;		_LCD_CMD
  1088 ;; This function is called by:
  1089 ;;		_main
  1090 ;; This function uses a non-reentrant model
  1091 ;;
  1092                           
  1093                           
  1094                           ;psect for function _LCD_Init
  1095  00BF                     _LCD_Init:
  1096                           
  1097                           ;incstack = 0
  1098                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
  1099                           ;LCD_Init@I2C_Add stored from wreg
  1100  00BF  1283               	bcf	3,5	;RP0=0, select bank0
  1101  00C0  1303               	bcf	3,6	;RP1=0, select bank0
  1102  00C1  00A9               	movwf	LCD_Init@I2C_Add
  1103  00C2                     l1150:
  1104                           
  1105                           ;BTL.c: 194: void LCD_Init(unsigned char I2C_Add);BTL.c: 195: {;BTL.c: 196:     i2c_add 
      +                          = I2C_Add;
  1106  00C2  0829               	movf	LCD_Init@I2C_Add,w
  1107  00C3  00A6               	movwf	??_LCD_Init
  1108  00C4  0826               	movf	??_LCD_Init,w
  1109  00C5  00F8               	movwf	_i2c_add
  1110  00C6                     l1152:
  1111                           
  1112                           ;BTL.c: 197:     IO_Expander_Write(0x00);
  1113  00C6  3000               	movlw	0
  1114  00C7  120A  118A  220A  120A  118A  	fcall	_IO_Expander_Write
  1115  00CC                     l1154:
  1116                           
  1117                           ;BTL.c: 198:     _delay((unsigned long)((5)*(20000000/4000.0)));
  1118  00CC  3021               	movlw	33
  1119  00CD  1283               	bcf	3,5	;RP0=0, select bank0
  1120  00CE  1303               	bcf	3,6	;RP1=0, select bank0
  1121  00CF  00A7               	movwf	??_LCD_Init+1
  1122  00D0  3075               	movlw	117
  1123  00D1  00A6               	movwf	??_LCD_Init
  1124  00D2                     u497:
  1125  00D2  0BA6               	decfsz	??_LCD_Init,f
  1126  00D3  28D2               	goto	u497
  1127  00D4  0BA7               	decfsz	??_LCD_Init+1,f
  1128  00D5  28D2               	goto	u497
  1129  00D6  28D7               	nop2
  1130                           
  1131                           ;BTL.c: 200:     LCD_CMD(0x02);
  1132  00D7  3002               	movlw	2
  1133  00D8  120A  118A  21EC  120A  118A  	fcall	_LCD_CMD
  1134  00DD                     l1156:
  1135                           
  1136                           ;BTL.c: 201:     _delay((unsigned long)((5)*(20000000/4000.0)));
  1137  00DD  3021               	movlw	33
  1138  00DE  1283               	bcf	3,5	;RP0=0, select bank0
  1139  00DF  1303               	bcf	3,6	;RP1=0, select bank0
  1140  00E0  00A7               	movwf	??_LCD_Init+1
  1141  00E1  3075               	movlw	117
  1142  00E2  00A6               	movwf	??_LCD_Init
  1143  00E3                     u507:
  1144  00E3  0BA6               	decfsz	??_LCD_Init,f
  1145  00E4  28E3               	goto	u507
  1146  00E5  0BA7               	decfsz	??_LCD_Init+1,f
  1147  00E6  28E3               	goto	u507
  1148  00E7  28E8               	nop2
  1149  00E8                     l1158:
  1150                           
  1151                           ;BTL.c: 202:     LCD_CMD(0x20 | (2 << 2));
  1152  00E8  3028               	movlw	40
  1153  00E9  120A  118A  21EC  120A  118A  	fcall	_LCD_CMD
  1154                           
  1155                           ;BTL.c: 203:     _delay((unsigned long)((5)*(20000000/4000.0)));
  1156  00EE  3021               	movlw	33
  1157  00EF  1283               	bcf	3,5	;RP0=0, select bank0
  1158  00F0  1303               	bcf	3,6	;RP1=0, select bank0
  1159  00F1  00A7               	movwf	??_LCD_Init+1
  1160  00F2  3075               	movlw	117
  1161  00F3  00A6               	movwf	??_LCD_Init
  1162  00F4                     u517:
  1163  00F4  0BA6               	decfsz	??_LCD_Init,f
  1164  00F5  28F4               	goto	u517
  1165  00F6  0BA7               	decfsz	??_LCD_Init+1,f
  1166  00F7  28F4               	goto	u517
  1167  00F8  28F9               	nop2
  1168  00F9                     l1160:
  1169                           
  1170                           ;BTL.c: 204:     LCD_CMD(0x0C);
  1171  00F9  300C               	movlw	12
  1172  00FA  120A  118A  21EC  120A  118A  	fcall	_LCD_CMD
  1173  00FF                     l1162:
  1174                           
  1175                           ;BTL.c: 205:     _delay((unsigned long)((50)*(20000000/4000.0)));
  1176  00FF  3002               	movlw	2
  1177  0100  1283               	bcf	3,5	;RP0=0, select bank0
  1178  0101  1303               	bcf	3,6	;RP1=0, select bank0
  1179  0102  00A8               	movwf	??_LCD_Init+2
  1180  0103  3045               	movlw	69
  1181  0104  00A7               	movwf	??_LCD_Init+1
  1182  0105  30A9               	movlw	169
  1183  0106  00A6               	movwf	??_LCD_Init
  1184  0107                     u527:
  1185  0107  0BA6               	decfsz	??_LCD_Init,f
  1186  0108  2907               	goto	u527
  1187  0109  0BA7               	decfsz	??_LCD_Init+1,f
  1188  010A  2907               	goto	u527
  1189  010B  0BA8               	decfsz	??_LCD_Init+2,f
  1190  010C  2907               	goto	u527
  1191                           
  1192                           ;BTL.c: 206:     LCD_CMD(0x01);
  1193  010D  3001               	movlw	1
  1194  010E  120A  118A  21EC  120A  118A  	fcall	_LCD_CMD
  1195  0113                     l1164:
  1196                           
  1197                           ;BTL.c: 207:     _delay((unsigned long)((50)*(20000000/4000.0)));
  1198  0113  3002               	movlw	2
  1199  0114  1283               	bcf	3,5	;RP0=0, select bank0
  1200  0115  1303               	bcf	3,6	;RP1=0, select bank0
  1201  0116  00A8               	movwf	??_LCD_Init+2
  1202  0117  3045               	movlw	69
  1203  0118  00A7               	movwf	??_LCD_Init+1
  1204  0119  30A9               	movlw	169
  1205  011A  00A6               	movwf	??_LCD_Init
  1206  011B                     u537:
  1207  011B  0BA6               	decfsz	??_LCD_Init,f
  1208  011C  291B               	goto	u537
  1209  011D  0BA7               	decfsz	??_LCD_Init+1,f
  1210  011E  291B               	goto	u537
  1211  011F  0BA8               	decfsz	??_LCD_Init+2,f
  1212  0120  291B               	goto	u537
  1213  0121                     l130:
  1214  0121  0008               	return
  1215  0122                     __end_of_LCD_Init:
  1216                           
  1217                           	psect	text6
  1218  0262                     __ptext6:	
  1219 ;; *************** function _LCD_Clear *****************
  1220 ;; Defined at:
  1221 ;;		line 261 in file "BTL.c"
  1222 ;; Parameters:    Size  Location     Type
  1223 ;;		None
  1224 ;; Auto vars:     Size  Location     Type
  1225 ;;		None
  1226 ;; Return value:  Size  Location     Type
  1227 ;;                  1    wreg      void 
  1228 ;; Registers used:
  1229 ;;		wreg, status,2, status,0, pclath, cstack
  1230 ;; Tracked objects:
  1231 ;;		On entry : 0/0
  1232 ;;		On exit  : 0/0
  1233 ;;		Unchanged: 0/0
  1234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1235 ;;      Params:         0       0       0       0       0
  1236 ;;      Locals:         0       0       0       0       0
  1237 ;;      Temps:          0       1       0       0       0
  1238 ;;      Totals:         0       1       0       0       0
  1239 ;;Total ram usage:        1 bytes
  1240 ;; Hardware stack levels used:    1
  1241 ;; Hardware stack levels required when called:    6
  1242 ;; This function calls:
  1243 ;;		_LCD_CMD
  1244 ;; This function is called by:
  1245 ;;		_main
  1246 ;; This function uses a non-reentrant model
  1247 ;;
  1248                           
  1249                           
  1250                           ;psect for function _LCD_Clear
  1251  0262                     _LCD_Clear:
  1252  0262                     l1166:	
  1253                           ;incstack = 0
  1254                           ; Regs used in _LCD_Clear: [wreg+status,2+status,0+pclath+cstack]
  1255                           
  1256                           
  1257                           ;BTL.c: 263:     LCD_CMD(0x01);
  1258  0262  3001               	movlw	1
  1259  0263  120A  118A  21EC  120A  118A  	fcall	_LCD_CMD
  1260  0268                     l1168:
  1261                           
  1262                           ;BTL.c: 264:      _delay((unsigned long)((40)*(20000000/4000000.0)));
  1263  0268  3041               	movlw	65
  1264  0269  1283               	bcf	3,5	;RP0=0, select bank0
  1265  026A  1303               	bcf	3,6	;RP1=0, select bank0
  1266  026B  00A6               	movwf	??_LCD_Clear
  1267  026C                     u547:
  1268  026C  0BA6               	decfsz	??_LCD_Clear,f
  1269  026D  2A6C               	goto	u547
  1270  026E  2A6F               	nop2
  1271  026F                     l158:
  1272  026F  0008               	return
  1273  0270                     __end_of_LCD_Clear:
  1274                           
  1275                           	psect	text7
  1276  01EC                     __ptext7:	
  1277 ;; *************** function _LCD_CMD *****************
  1278 ;; Defined at:
  1279 ;;		line 227 in file "BTL.c"
  1280 ;; Parameters:    Size  Location     Type
  1281 ;;  CMD             1    wreg     unsigned char 
  1282 ;; Auto vars:     Size  Location     Type
  1283 ;;  CMD             1    5[BANK0 ] unsigned char 
  1284 ;; Return value:  Size  Location     Type
  1285 ;;                  1    wreg      void 
  1286 ;; Registers used:
  1287 ;;		wreg, status,2, status,0, pclath, cstack
  1288 ;; Tracked objects:
  1289 ;;		On entry : 0/0
  1290 ;;		On exit  : 0/0
  1291 ;;		Unchanged: 0/0
  1292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1293 ;;      Params:         0       0       0       0       0
  1294 ;;      Locals:         0       1       0       0       0
  1295 ;;      Temps:          0       1       0       0       0
  1296 ;;      Totals:         0       2       0       0       0
  1297 ;;Total ram usage:        2 bytes
  1298 ;; Hardware stack levels used:    1
  1299 ;; Hardware stack levels required when called:    5
  1300 ;; This function calls:
  1301 ;;		_LCD_Write_4Bit
  1302 ;; This function is called by:
  1303 ;;		_LCD_Init
  1304 ;;		_LCD_Set_Cursor
  1305 ;;		_LCD_Clear
  1306 ;; This function uses a non-reentrant model
  1307 ;;
  1308                           
  1309                           
  1310                           ;psect for function _LCD_CMD
  1311  01EC                     _LCD_CMD:
  1312                           
  1313                           ;incstack = 0
  1314                           ; Regs used in _LCD_CMD: [wreg+status,2+status,0+pclath+cstack]
  1315                           ;LCD_CMD@CMD stored from wreg
  1316  01EC  1283               	bcf	3,5	;RP0=0, select bank0
  1317  01ED  1303               	bcf	3,6	;RP1=0, select bank0
  1318  01EE  00A5               	movwf	LCD_CMD@CMD
  1319  01EF                     l1126:
  1320                           
  1321                           ;BTL.c: 227: void LCD_CMD(unsigned char CMD);BTL.c: 228: {;BTL.c: 229:     RS = 0;
  1322  01EF  01F6               	clrf	_RS
  1323  01F0                     l1128:
  1324                           
  1325                           ;BTL.c: 230:     LCD_Write_4Bit(CMD & 0xF0);
  1326  01F0  0825               	movf	LCD_CMD@CMD,w
  1327  01F1  39F0               	andlw	240
  1328  01F2  120A  118A  2227  120A  118A  	fcall	_LCD_Write_4Bit
  1329  01F7                     l1130:
  1330                           
  1331                           ;BTL.c: 231:     LCD_Write_4Bit((CMD << 4) & 0xF0);
  1332  01F7  1283               	bcf	3,5	;RP0=0, select bank0
  1333  01F8  1303               	bcf	3,6	;RP1=0, select bank0
  1334  01F9  0825               	movf	LCD_CMD@CMD,w
  1335  01FA  00A4               	movwf	??_LCD_CMD
  1336  01FB  3003               	movlw	3
  1337  01FC                     u385:
  1338  01FC  1003               	clrc
  1339  01FD  0DA4               	rlf	??_LCD_CMD,f
  1340  01FE  3EFF               	addlw	-1
  1341  01FF  1D03               	skipz
  1342  0200  29FC               	goto	u385
  1343  0201  1003               	clrc
  1344  0202  0D24               	rlf	??_LCD_CMD,w
  1345  0203  39F0               	andlw	240
  1346  0204  120A  118A  2227  120A  118A  	fcall	_LCD_Write_4Bit
  1347  0209                     l139:
  1348  0209  0008               	return
  1349  020A                     __end_of_LCD_CMD:
  1350                           
  1351                           	psect	text8
  1352  0227                     __ptext8:	
  1353 ;; *************** function _LCD_Write_4Bit *****************
  1354 ;; Defined at:
  1355 ;;		line 218 in file "BTL.c"
  1356 ;; Parameters:    Size  Location     Type
  1357 ;;  Nibble          1    wreg     unsigned char 
  1358 ;; Auto vars:     Size  Location     Type
  1359 ;;  Nibble          1    3[BANK0 ] unsigned char 
  1360 ;; Return value:  Size  Location     Type
  1361 ;;                  1    wreg      void 
  1362 ;; Registers used:
  1363 ;;		wreg, status,2, status,0, pclath, cstack
  1364 ;; Tracked objects:
  1365 ;;		On entry : 0/0
  1366 ;;		On exit  : 0/0
  1367 ;;		Unchanged: 0/0
  1368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1369 ;;      Params:         0       0       0       0       0
  1370 ;;      Locals:         0       1       0       0       0
  1371 ;;      Temps:          0       1       0       0       0
  1372 ;;      Totals:         0       2       0       0       0
  1373 ;;Total ram usage:        2 bytes
  1374 ;; Hardware stack levels used:    1
  1375 ;; Hardware stack levels required when called:    4
  1376 ;; This function calls:
  1377 ;;		_IO_Expander_Write
  1378 ;; This function is called by:
  1379 ;;		_LCD_CMD
  1380 ;;		_LCD_Write_Char
  1381 ;; This function uses a non-reentrant model
  1382 ;;
  1383                           
  1384                           
  1385                           ;psect for function _LCD_Write_4Bit
  1386  0227                     _LCD_Write_4Bit:
  1387                           
  1388                           ;incstack = 0
  1389                           ; Regs used in _LCD_Write_4Bit: [wreg+status,2+status,0+pclath+cstack]
  1390                           ;LCD_Write_4Bit@Nibble stored from wreg
  1391  0227  1283               	bcf	3,5	;RP0=0, select bank0
  1392  0228  1303               	bcf	3,6	;RP1=0, select bank0
  1393  0229  00A3               	movwf	LCD_Write_4Bit@Nibble
  1394  022A                     l1120:
  1395                           
  1396                           ;BTL.c: 218: void LCD_Write_4Bit(unsigned char Nibble);BTL.c: 219: {;BTL.c: 221:     Nib
      +                          ble |= RS;
  1397  022A  0876               	movf	_RS,w
  1398  022B  00A2               	movwf	??_LCD_Write_4Bit
  1399  022C  0822               	movf	??_LCD_Write_4Bit,w
  1400  022D  04A3               	iorwf	LCD_Write_4Bit@Nibble,f
  1401  022E                     l1122:
  1402                           
  1403                           ;BTL.c: 222:     IO_Expander_Write(Nibble | 0x04);
  1404  022E  0823               	movf	LCD_Write_4Bit@Nibble,w
  1405  022F  3804               	iorlw	4
  1406  0230  120A  118A  220A  120A  118A  	fcall	_IO_Expander_Write
  1407  0235                     l1124:
  1408                           
  1409                           ;BTL.c: 223:     IO_Expander_Write(Nibble & 0xFB);
  1410  0235  1283               	bcf	3,5	;RP0=0, select bank0
  1411  0236  1303               	bcf	3,6	;RP1=0, select bank0
  1412  0237  0823               	movf	LCD_Write_4Bit@Nibble,w
  1413  0238  39FB               	andlw	251
  1414  0239  120A  118A  220A  120A  118A  	fcall	_IO_Expander_Write
  1415  023E                     l136:
  1416  023E  0008               	return
  1417  023F                     __end_of_LCD_Write_4Bit:
  1418                           
  1419                           	psect	text9
  1420  020A                     __ptext9:	
  1421 ;; *************** function _IO_Expander_Write *****************
  1422 ;; Defined at:
  1423 ;;		line 210 in file "BTL.c"
  1424 ;; Parameters:    Size  Location     Type
  1425 ;;  Data            1    wreg     unsigned char 
  1426 ;; Auto vars:     Size  Location     Type
  1427 ;;  Data            1    1[BANK0 ] unsigned char 
  1428 ;; Return value:  Size  Location     Type
  1429 ;;                  1    wreg      void 
  1430 ;; Registers used:
  1431 ;;		wreg, status,2, status,0, pclath, cstack
  1432 ;; Tracked objects:
  1433 ;;		On entry : 0/0
  1434 ;;		On exit  : 0/0
  1435 ;;		Unchanged: 0/0
  1436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1437 ;;      Params:         0       0       0       0       0
  1438 ;;      Locals:         0       1       0       0       0
  1439 ;;      Temps:          0       0       0       0       0
  1440 ;;      Totals:         0       1       0       0       0
  1441 ;;Total ram usage:        1 bytes
  1442 ;; Hardware stack levels used:    1
  1443 ;; Hardware stack levels required when called:    3
  1444 ;; This function calls:
  1445 ;;		_I2C_Master_Start
  1446 ;;		_I2C_Master_Stop
  1447 ;;		_I2C_Master_Write
  1448 ;; This function is called by:
  1449 ;;		_LCD_Init
  1450 ;;		_LCD_Write_4Bit
  1451 ;; This function uses a non-reentrant model
  1452 ;;
  1453                           
  1454                           
  1455                           ;psect for function _IO_Expander_Write
  1456  020A                     _IO_Expander_Write:
  1457                           
  1458                           ;incstack = 0
  1459                           ; Regs used in _IO_Expander_Write: [wreg+status,2+status,0+pclath+cstack]
  1460                           ;IO_Expander_Write@Data stored from wreg
  1461  020A  1283               	bcf	3,5	;RP0=0, select bank0
  1462  020B  1303               	bcf	3,6	;RP1=0, select bank0
  1463  020C  00A1               	movwf	IO_Expander_Write@Data
  1464  020D                     l1118:
  1465                           
  1466                           ;BTL.c: 210: void IO_Expander_Write(unsigned char Data);BTL.c: 211: {;BTL.c: 212:     I2
      +                          C_Master_Start();
  1467  020D  120A  118A  2293  120A  118A  	fcall	_I2C_Master_Start
  1468                           
  1469                           ;BTL.c: 213:     I2C_Master_Write(i2c_add);
  1470  0212  0878               	movf	_i2c_add,w
  1471  0213  120A  118A  223F  120A  118A  	fcall	_I2C_Master_Write
  1472                           
  1473                           ;BTL.c: 214:     I2C_Master_Write(Data | BackLight_State);
  1474  0218  1283               	bcf	3,5	;RP0=0, select bank0
  1475  0219  1303               	bcf	3,6	;RP1=0, select bank0
  1476  021A  0821               	movf	IO_Expander_Write@Data,w
  1477  021B  3808               	iorlw	8
  1478  021C  120A  118A  223F  120A  118A  	fcall	_I2C_Master_Write
  1479                           
  1480                           ;BTL.c: 215:     I2C_Master_Stop();
  1481  0221  120A  118A  228A  120A  118A  	fcall	_I2C_Master_Stop
  1482  0226                     l133:
  1483  0226  0008               	return
  1484  0227                     __end_of_IO_Expander_Write:
  1485                           
  1486                           	psect	text10
  1487  023F                     __ptext10:	
  1488 ;; *************** function _I2C_Master_Write *****************
  1489 ;; Defined at:
  1490 ;;		line 183 in file "BTL.c"
  1491 ;; Parameters:    Size  Location     Type
  1492 ;;  data            1    wreg     unsigned char 
  1493 ;; Auto vars:     Size  Location     Type
  1494 ;;  data            1    0[BANK0 ] unsigned char 
  1495 ;; Return value:  Size  Location     Type
  1496 ;;                  1    wreg      void 
  1497 ;; Registers used:
  1498 ;;		wreg, status,2, status,0, pclath, cstack
  1499 ;; Tracked objects:
  1500 ;;		On entry : 0/0
  1501 ;;		On exit  : 0/0
  1502 ;;		Unchanged: 0/0
  1503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1504 ;;      Params:         0       0       0       0       0
  1505 ;;      Locals:         0       1       0       0       0
  1506 ;;      Temps:          0       0       0       0       0
  1507 ;;      Totals:         0       1       0       0       0
  1508 ;;Total ram usage:        1 bytes
  1509 ;; Hardware stack levels used:    1
  1510 ;; Hardware stack levels required when called:    2
  1511 ;; This function calls:
  1512 ;;		_I2C_Master_Wait
  1513 ;; This function is called by:
  1514 ;;		_IO_Expander_Write
  1515 ;; This function uses a non-reentrant model
  1516 ;;
  1517                           
  1518                           
  1519                           ;psect for function _I2C_Master_Write
  1520  023F                     _I2C_Master_Write:
  1521                           
  1522                           ;incstack = 0
  1523                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  1524                           ;I2C_Master_Write@data stored from wreg
  1525  023F  1283               	bcf	3,5	;RP0=0, select bank0
  1526  0240  1303               	bcf	3,6	;RP1=0, select bank0
  1527  0241  00A0               	movwf	I2C_Master_Write@data
  1528  0242                     l1114:
  1529                           
  1530                           ;BTL.c: 183: void I2C_Master_Write(unsigned char data);BTL.c: 184: {;BTL.c: 185:     I2C
      +                          _Master_Wait();
  1531  0242  120A  118A  2270  120A  118A  	fcall	_I2C_Master_Wait
  1532  0247                     l1116:
  1533                           
  1534                           ;BTL.c: 186:     SSPBUF = data;
  1535  0247  1283               	bcf	3,5	;RP0=0, select bank0
  1536  0248  1303               	bcf	3,6	;RP1=0, select bank0
  1537  0249  0820               	movf	I2C_Master_Write@data,w
  1538  024A  0093               	movwf	19	;volatile
  1539  024B                     l124:	
  1540                           ;BTL.c: 188:         ;
  1541                           
  1542                           
  1543                           ;BTL.c: 187:     while (!SSPIF)
  1544  024B  1D8C               	btfss	12,3	;volatile
  1545  024C  2A4E               	goto	u371
  1546  024D  2A4F               	goto	u370
  1547  024E                     u371:
  1548  024E  2A4B               	goto	l124
  1549  024F                     u370:
  1550  024F                     l126:
  1551                           
  1552                           ;BTL.c: 189:     SSPIF = 0;
  1553  024F  118C               	bcf	12,3	;volatile
  1554  0250                     l127:
  1555  0250  0008               	return
  1556  0251                     __end_of_I2C_Master_Write:
  1557                           
  1558                           	psect	text11
  1559  028A                     __ptext11:	
  1560 ;; *************** function _I2C_Master_Stop *****************
  1561 ;; Defined at:
  1562 ;;		line 177 in file "BTL.c"
  1563 ;; Parameters:    Size  Location     Type
  1564 ;;		None
  1565 ;; Auto vars:     Size  Location     Type
  1566 ;;		None
  1567 ;; Return value:  Size  Location     Type
  1568 ;;                  1    wreg      void 
  1569 ;; Registers used:
  1570 ;;		wreg, status,2, status,0, pclath, cstack
  1571 ;; Tracked objects:
  1572 ;;		On entry : 0/0
  1573 ;;		On exit  : 0/0
  1574 ;;		Unchanged: 0/0
  1575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1576 ;;      Params:         0       0       0       0       0
  1577 ;;      Locals:         0       0       0       0       0
  1578 ;;      Temps:          0       0       0       0       0
  1579 ;;      Totals:         0       0       0       0       0
  1580 ;;Total ram usage:        0 bytes
  1581 ;; Hardware stack levels used:    1
  1582 ;; Hardware stack levels required when called:    2
  1583 ;; This function calls:
  1584 ;;		_I2C_Master_Wait
  1585 ;; This function is called by:
  1586 ;;		_IO_Expander_Write
  1587 ;; This function uses a non-reentrant model
  1588 ;;
  1589                           
  1590                           
  1591                           ;psect for function _I2C_Master_Stop
  1592  028A                     _I2C_Master_Stop:
  1593  028A                     l1110:	
  1594                           ;incstack = 0
  1595                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  1596                           
  1597                           
  1598                           ;BTL.c: 179:     I2C_Master_Wait();
  1599  028A  120A  118A  2270  120A  118A  	fcall	_I2C_Master_Wait
  1600  028F                     l1112:
  1601                           
  1602                           ;BTL.c: 180:     PEN = 1;
  1603  028F  1683               	bsf	3,5	;RP0=1, select bank1
  1604  0290  1303               	bcf	3,6	;RP1=0, select bank1
  1605  0291  1511               	bsf	17,2	;volatile
  1606  0292                     l121:
  1607  0292  0008               	return
  1608  0293                     __end_of_I2C_Master_Stop:
  1609                           
  1610                           	psect	text12
  1611  0293                     __ptext12:	
  1612 ;; *************** function _I2C_Master_Start *****************
  1613 ;; Defined at:
  1614 ;;		line 171 in file "BTL.c"
  1615 ;; Parameters:    Size  Location     Type
  1616 ;;		None
  1617 ;; Auto vars:     Size  Location     Type
  1618 ;;		None
  1619 ;; Return value:  Size  Location     Type
  1620 ;;                  1    wreg      void 
  1621 ;; Registers used:
  1622 ;;		wreg, status,2, status,0, pclath, cstack
  1623 ;; Tracked objects:
  1624 ;;		On entry : 0/0
  1625 ;;		On exit  : 0/0
  1626 ;;		Unchanged: 0/0
  1627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1628 ;;      Params:         0       0       0       0       0
  1629 ;;      Locals:         0       0       0       0       0
  1630 ;;      Temps:          0       0       0       0       0
  1631 ;;      Totals:         0       0       0       0       0
  1632 ;;Total ram usage:        0 bytes
  1633 ;; Hardware stack levels used:    1
  1634 ;; Hardware stack levels required when called:    2
  1635 ;; This function calls:
  1636 ;;		_I2C_Master_Wait
  1637 ;; This function is called by:
  1638 ;;		_IO_Expander_Write
  1639 ;; This function uses a non-reentrant model
  1640 ;;
  1641                           
  1642                           
  1643                           ;psect for function _I2C_Master_Start
  1644  0293                     _I2C_Master_Start:
  1645  0293                     l1106:	
  1646                           ;incstack = 0
  1647                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  1648                           
  1649                           
  1650                           ;BTL.c: 173:     I2C_Master_Wait();
  1651  0293  120A  118A  2270  120A  118A  	fcall	_I2C_Master_Wait
  1652  0298                     l1108:
  1653                           
  1654                           ;BTL.c: 174:     SEN = 1;
  1655  0298  1683               	bsf	3,5	;RP0=1, select bank1
  1656  0299  1303               	bcf	3,6	;RP1=0, select bank1
  1657  029A  1411               	bsf	17,0	;volatile
  1658  029B                     l118:
  1659  029B  0008               	return
  1660  029C                     __end_of_I2C_Master_Start:
  1661                           
  1662                           	psect	text13
  1663  0270                     __ptext13:	
  1664 ;; *************** function _I2C_Master_Wait *****************
  1665 ;; Defined at:
  1666 ;;		line 165 in file "BTL.c"
  1667 ;; Parameters:    Size  Location     Type
  1668 ;;		None
  1669 ;; Auto vars:     Size  Location     Type
  1670 ;;		None
  1671 ;; Return value:  Size  Location     Type
  1672 ;;                  1    wreg      void 
  1673 ;; Registers used:
  1674 ;;		wreg, status,2
  1675 ;; Tracked objects:
  1676 ;;		On entry : 0/0
  1677 ;;		On exit  : 0/0
  1678 ;;		Unchanged: 0/0
  1679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1680 ;;      Params:         0       0       0       0       0
  1681 ;;      Locals:         0       0       0       0       0
  1682 ;;      Temps:          0       0       0       0       0
  1683 ;;      Totals:         0       0       0       0       0
  1684 ;;Total ram usage:        0 bytes
  1685 ;; Hardware stack levels used:    1
  1686 ;; Hardware stack levels required when called:    1
  1687 ;; This function calls:
  1688 ;;		Nothing
  1689 ;; This function is called by:
  1690 ;;		_I2C_Master_Start
  1691 ;;		_I2C_Master_Stop
  1692 ;;		_I2C_Master_Write
  1693 ;; This function uses a non-reentrant model
  1694 ;;
  1695                           
  1696                           
  1697                           ;psect for function _I2C_Master_Wait
  1698  0270                     _I2C_Master_Wait:
  1699  0270                     l1102:	
  1700                           ;incstack = 0
  1701                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  1702                           
  1703  0270                     l112:	
  1704                           ;BTL.c: 168:         ;
  1705                           
  1706                           
  1707                           ;BTL.c: 167:     while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F))
  1708  0270  1683               	bsf	3,5	;RP0=1, select bank1
  1709  0271  1303               	bcf	3,6	;RP1=0, select bank1
  1710  0272  1914               	btfsc	20,2	;volatile
  1711  0273  2A75               	goto	u351
  1712  0274  2A76               	goto	u350
  1713  0275                     u351:
  1714  0275  2A70               	goto	l112
  1715  0276                     u350:
  1716  0276                     l1104:
  1717  0276  0811               	movf	17,w	;volatile
  1718  0277  391F               	andlw	31
  1719  0278  1D03               	btfss	3,2
  1720  0279  2A7B               	goto	u361
  1721  027A  2A7C               	goto	u360
  1722  027B                     u361:
  1723  027B  2A70               	goto	l112
  1724  027C                     u360:
  1725  027C                     l115:
  1726  027C  0008               	return
  1727  027D                     __end_of_I2C_Master_Wait:
  1728                           
  1729                           	psect	text14
  1730  027D                     __ptext14:	
  1731 ;; *************** function _I2C_Master_Init *****************
  1732 ;; Defined at:
  1733 ;;		line 154 in file "BTL.c"
  1734 ;; Parameters:    Size  Location     Type
  1735 ;;		None
  1736 ;; Auto vars:     Size  Location     Type
  1737 ;;		None
  1738 ;; Return value:  Size  Location     Type
  1739 ;;                  1    wreg      void 
  1740 ;; Registers used:
  1741 ;;		wreg, status,2
  1742 ;; Tracked objects:
  1743 ;;		On entry : 0/0
  1744 ;;		On exit  : 0/0
  1745 ;;		Unchanged: 0/0
  1746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1747 ;;      Params:         0       0       0       0       0
  1748 ;;      Locals:         0       0       0       0       0
  1749 ;;      Temps:          0       0       0       0       0
  1750 ;;      Totals:         0       0       0       0       0
  1751 ;;Total ram usage:        0 bytes
  1752 ;; Hardware stack levels used:    1
  1753 ;; Hardware stack levels required when called:    1
  1754 ;; This function calls:
  1755 ;;		Nothing
  1756 ;; This function is called by:
  1757 ;;		_main
  1758 ;; This function uses a non-reentrant model
  1759 ;;
  1760                           
  1761                           
  1762                           ;psect for function _I2C_Master_Init
  1763  027D                     _I2C_Master_Init:
  1764  027D                     l1140:	
  1765                           ;incstack = 0
  1766                           ; Regs used in _I2C_Master_Init: [wreg+status,2]
  1767                           
  1768                           
  1769                           ;BTL.c: 156:     SSPCON = 0x28;
  1770  027D  3028               	movlw	40
  1771  027E  1283               	bcf	3,5	;RP0=0, select bank0
  1772  027F  1303               	bcf	3,6	;RP1=0, select bank0
  1773  0280  0094               	movwf	20	;volatile
  1774  0281                     l1142:
  1775                           
  1776                           ;BTL.c: 157:     SSPCON2 = 0x00;
  1777  0281  1683               	bsf	3,5	;RP0=1, select bank1
  1778  0282  1303               	bcf	3,6	;RP1=0, select bank1
  1779  0283  0191               	clrf	17	;volatile
  1780  0284                     l1144:
  1781                           
  1782                           ;BTL.c: 158:     SSPSTAT = 0x00;
  1783  0284  0194               	clrf	20	;volatile
  1784                           
  1785                           ;BTL.c: 159:     SSPADD = ((20000000 / 4) / 100000) - 1;
  1786  0285  3031               	movlw	49
  1787  0286  0093               	movwf	19	;volatile
  1788  0287                     l1146:
  1789                           
  1790                           ;BTL.c: 161:     TRISC3 = 1;
  1791  0287  1587               	bsf	7,3	;volatile
  1792  0288                     l1148:
  1793                           
  1794                           ;BTL.c: 162:     TRISC4 = 1;
  1795  0288  1607               	bsf	7,4	;volatile
  1796  0289                     l109:
  1797  0289  0008               	return
  1798  028A                     __end_of_I2C_Master_Init:
  1799                           
  1800                           	psect	text15
  1801  0122                     __ptext15:	
  1802 ;; *************** function _isr1 *****************
  1803 ;; Defined at:
  1804 ;;		line 131 in file "BTL.c"
  1805 ;; Parameters:    Size  Location     Type
  1806 ;;		None
  1807 ;; Auto vars:     Size  Location     Type
  1808 ;;		None
  1809 ;; Return value:  Size  Location     Type
  1810 ;;                  1    wreg      void 
  1811 ;; Registers used:
  1812 ;;		wreg, status,2, status,0
  1813 ;; Tracked objects:
  1814 ;;		On entry : 0/0
  1815 ;;		On exit  : 0/0
  1816 ;;		Unchanged: 0/0
  1817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1818 ;;      Params:         0       0       0       0       0
  1819 ;;      Locals:         0       0       0       0       0
  1820 ;;      Temps:          6       0       0       0       0
  1821 ;;      Totals:         6       0       0       0       0
  1822 ;;Total ram usage:        6 bytes
  1823 ;; Hardware stack levels used:    1
  1824 ;; This function calls:
  1825 ;;		Nothing
  1826 ;; This function is called by:
  1827 ;;		Interrupt level 1
  1828 ;; This function uses a non-reentrant model
  1829 ;;
  1830                           
  1831                           
  1832                           ;psect for function _isr1
  1833  0122                     _isr1:
  1834  0122                     i1l1054:
  1835                           
  1836                           ;BTL.c: 133:     if (T0IF == 1)
  1837  0122  1D0B               	btfss	11,2	;volatile
  1838  0123  2925               	goto	u32_21
  1839  0124  2926               	goto	u32_20
  1840  0125                     u32_21:
  1841  0125  294E               	goto	i1l106
  1842  0126                     u32_20:
  1843  0126                     i1l1056:
  1844                           
  1845                           ;BTL.c: 134:     {;BTL.c: 135:         TMR0 = 5;
  1846  0126  3005               	movlw	5
  1847  0127  1283               	bcf	3,5	;RP0=0, select bank0
  1848  0128  1303               	bcf	3,6	;RP1=0, select bank0
  1849  0129  0081               	movwf	1	;volatile
  1850  012A                     i1l1058:
  1851                           
  1852                           ;BTL.c: 136:         T0IF = 0;
  1853  012A  110B               	bcf	11,2	;volatile
  1854  012B                     i1l1060:
  1855                           
  1856                           ;BTL.c: 137:         cnt++;
  1857  012B  3001               	movlw	1
  1858  012C  00F0               	movwf	??_isr1
  1859  012D  0870               	movf	??_isr1,w
  1860  012E  07F7               	addwf	_cnt,f
  1861  012F                     i1l1062:
  1862                           
  1863                           ;BTL.c: 139:         if (cnt == pos)
  1864  012F  0877               	movf	_cnt,w
  1865  0130  062C               	xorwf	_pos,w
  1866  0131  1D03               	skipz
  1867  0132  2934               	goto	u33_21
  1868  0133  2935               	goto	u33_20
  1869  0134                     u33_21:
  1870  0134  2937               	goto	i1l1066
  1871  0135                     u33_20:
  1872  0135                     i1l1064:
  1873                           
  1874                           ;BTL.c: 140:         {;BTL.c: 141:             RD0 = ~RD0;
  1875  0135  3001               	movlw	1
  1876  0136  0688               	xorwf	8,f
  1877  0137                     i1l1066:
  1878                           
  1879                           ;BTL.c: 144:         if (cnt == 200 - pos)
  1880  0137  3000               	movlw	0
  1881  0138  00F1               	movwf	??_isr1+1
  1882  0139  082C               	movf	_pos,w
  1883  013A  3CC8               	sublw	200
  1884  013B  00F0               	movwf	??_isr1
  1885  013C  1C03               	skipc
  1886  013D  03F1               	decf	??_isr1+1,f
  1887  013E  0877               	movf	_cnt,w
  1888  013F  00F2               	movwf	??_isr1+2
  1889  0140  01F3               	clrf	??_isr1+3
  1890  0141  0871               	movf	??_isr1+1,w
  1891  0142  0673               	xorwf	??_isr1+3,w
  1892  0143  1D03               	skipz
  1893  0144  2947               	goto	u34_25
  1894  0145  0870               	movf	??_isr1,w
  1895  0146  0672               	xorwf	??_isr1+2,w
  1896  0147                     u34_25:
  1897  0147  1D03               	skipz
  1898  0148  294A               	goto	u34_21
  1899  0149  294B               	goto	u34_20
  1900  014A                     u34_21:
  1901  014A  294E               	goto	i1l106
  1902  014B                     u34_20:
  1903  014B                     i1l1068:
  1904                           
  1905                           ;BTL.c: 145:         {;BTL.c: 146:             RD0 = ~RD0;
  1906  014B  3001               	movlw	1
  1907  014C  0688               	xorwf	8,f
  1908  014D                     i1l1070:
  1909                           
  1910                           ;BTL.c: 147:             cnt = 0;
  1911  014D  01F7               	clrf	_cnt
  1912  014E                     i1l106:
  1913  014E  0875               	movf	??_isr1+5,w
  1914  014F  008A               	movwf	10
  1915  0150  0E74               	swapf	??_isr1+4,w
  1916  0151  0083               	movwf	3
  1917  0152  0EFE               	swapf	btemp,f
  1918  0153  0E7E               	swapf	btemp,w
  1919  0154  0009               	retfie
  1920  0155                     __end_of_isr1:
  1921  007E                     btemp	set	126	;btemp
  1922  007E                     wtemp0	set	126
  1923                           
  1924                           	psect	intentry
  1925  0004                     __pintentry:	
  1926                           ;incstack = 0
  1927                           ; Regs used in _isr1: [wreg+status,2+status,0]
  1928                           
  1929  0004                     interrupt_function:
  1930  007E                     saved_w	set	btemp
  1931  0004  00FE               	movwf	btemp
  1932  0005  0E03               	swapf	3,w
  1933  0006  00F4               	movwf	??_isr1+4
  1934  0007  080A               	movf	10,w
  1935  0008  00F5               	movwf	??_isr1+5
  1936  0009  120A  118A  2922   	ljmp	_isr1
  1937                           
  1938                           	psect	config
  1939                           
  1940                           ;Config register CONFIG @ 0x2007
  1941                           ;	Oscillator Selection bits
  1942                           ;	FOSC = HS, HS oscillator
  1943                           ;	Watchdog Timer Enable bit
  1944                           ;	WDTE = OFF, WDT disabled
  1945                           ;	Power-up Timer Enable bit
  1946                           ;	PWRTE = ON, PWRT enabled
  1947                           ;	Brown-out Reset Enable bit
  1948                           ;	BOREN = ON, BOR enabled
  1949                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1950                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1951                           ;	Data EEPROM Memory Code Protection bit
  1952                           ;	CPD = OFF, Data EEPROM code protection off
  1953                           ;	Flash Program Memory Write Enable bits
  1954                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1955                           ;	In-Circuit Debugger Mode bit
  1956                           ;	DEBUG = 0x1, unprogrammed default
  1957                           ;	Flash Program Memory Code Protection bit
  1958                           ;	CP = OFF, Code protection off
  1959  2007                     	org	8199
  1960  2007  3F72               	dw	16242

Data Sizes:
    Strings     39
    Constant    0
    Data        2
    BSS         3
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     11      13
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCD_Write_String@Str	PTR unsigned char  size(1) Largest target is 12
		 -> STR_4(CODE[7]), STR_3(CODE[8]), STR_2(CODE[12]), STR_1(CODE[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr1 in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_LCD_Init
    _main->_LCD_Set_Cursor
    _LCD_Write_String->_LCD_Write_Char
    _LCD_Write_Char->_LCD_Write_4Bit
    _LCD_Set_Cursor->_LCD_CMD
    _LCD_Init->_LCD_CMD
    _LCD_Clear->_LCD_CMD
    _LCD_CMD->_LCD_Write_4Bit
    _LCD_Write_4Bit->_IO_Expander_Write
    _IO_Expander_Write->_I2C_Master_Write

Critical Paths under _isr1 in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr1 in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr1 in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr1 in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    1576
                                             10 BANK0      1     1      0
                    _I2C_Master_Init
                          _LCD_Clear
                           _LCD_Init
                     _LCD_Set_Cursor
                   _LCD_Write_String
                         _Servo_Init
 ---------------------------------------------------------------------------------
 (1) _Servo_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_Write_String                                     3     3      0     463
                                              6 BANK0      3     3      0
                     _LCD_Write_Char
 ---------------------------------------------------------------------------------
 (2) _LCD_Write_Char                                       2     2      0     189
                                              4 BANK0      2     2      0
                     _LCD_Write_4Bit
 ---------------------------------------------------------------------------------
 (1) _LCD_Set_Cursor                                       4     3      1     642
                                              6 BANK0      4     3      1
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             4     4      0     282
                                              6 BANK0      4     4      0
                  _IO_Expander_Write
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            1     1      0     189
                                              6 BANK0      1     1      0
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _LCD_CMD                                              2     2      0     189
                                              4 BANK0      2     2      0
                     _LCD_Write_4Bit
 ---------------------------------------------------------------------------------
 (3) _LCD_Write_4Bit                                       2     2      0     127
                                              2 BANK0      2     2      0
                  _IO_Expander_Write
 ---------------------------------------------------------------------------------
 (4) _IO_Expander_Write                                    1     1      0      62
                                              1 BANK0      1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     1     1      0      31
                                              0 BANK0      1     1      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr1                                                 6     6      0       0
                                              0 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
   _LCD_Clear
     _LCD_CMD
       _LCD_Write_4Bit
         _IO_Expander_Write
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
   _LCD_Init
     _IO_Expander_Write
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _LCD_CMD
       _LCD_Write_4Bit
         _IO_Expander_Write
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
   _LCD_Set_Cursor
     _LCD_CMD
       _LCD_Write_4Bit
         _IO_Expander_Write
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
   _LCD_Write_String
     _LCD_Write_Char
       _LCD_Write_4Bit
         _IO_Expander_Write
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
   _Servo_Init

 _isr1 (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      B       D       5       16.2%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      17      12        0.0%
ABS                  0      0      17       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Sat Jun 04 19:30:53 2022

                         pc 0002                          l98 0261                          _RS 0076  
                        fsr 0004                         l112 0270                         l121 0292  
                       l130 0121                         l115 027C                         l124 024B  
                       l109 0289                         l133 0226                         l118 029B  
                       l126 024F                         l142 01EB                         l127 0250  
                       l136 023E                         l139 0209                         l155 01CC  
                       l148 01AA                         l158 026F                         _GIE 005F  
                       _RD0 0040                         _RD1 0041                         _RD2 0042  
                       _RD3 0043                         _RD4 0044                         u400 01AA  
                       u401 01A9                         u410 0038                         u411 0037  
                       u420 0048                         u421 0044                         u350 0276  
                       _PS0 0408                         u351 0275                         _PS1 0409  
                       u360 027C                         u440 004F                         _PS2 040A  
                       _PEN 048A                         u361 027B                         u441 004E  
                       u370 024F                         u450 0057                         u434 004B  
                       u371 024E                         u507 00E3                         u451 0056  
                       u460 0088                         u517 00F4                         u461 0087  
                       u470 00B8                         u527 0107                         u471 00B4  
                       u385 01FC                         u537 011B                         u547 026C  
                       u395 01DE                         u484 00BB                         _SEN 0488  
                       _PSA 040B                         u497 00D2                         _cnt 0077  
                       _pos 002C                         fsr0 0004             __end_of_LCD_CMD 020A  
       LCD_Write_String@Str 0028              _LCD_Set_Cursor 01AB                        l1102 0270  
                      l1110 028A                        l1104 0276                        l1112 028F  
                      l1120 022A                        l1200 003D                        l1106 0293  
                      l1114 0242                        l1122 022E                        l1130 01F7  
                      l1210 005C                        l1202 0041                        l1140 027D  
                      l1108 0298                        l1116 0247                        l1124 0235  
                      l1132 01D0                        l1212 0066                        l1220 0080  
                      l1204 004B                        l1142 0281                        l1118 020D  
                      l1126 01EF                        l1150 00C2                        l1134 01D2  
                      l1230 00A7                        l1222 0088                        l1214 006C  
                      l1206 004F                        l1144 0284                        l1128 01F0  
                      l1160 00F9                        l1152 00C6                        l1136 0251  
                      l1232 00AD                        l1224 008D                        l1216 0076  
                      l1208 0057                        l1146 0287                        l1162 00FF  
                      l1154 00CC                        l1170 01AE                        l1138 025B  
                      l1226 0097                        l1234 00B1                        l1218 007C  
                      l1148 0288                        l1164 0113                        l1156 00DD  
                      l1172 01AF                        l1228 009D                        l1166 0262  
                      l1158 00E8                        l1174 01B7                        l1190 0195  
                      l1168 0268                        l1192 019D                        l1266 01C7  
                      l1178 01BF                        l1186 0185                        l1194 0022  
                      l1188 0188                        l1196 0032                        l1198 0038  
                      STR_1 0167                        STR_2 015B                        STR_3 0173  
                      STR_4 017B                        _T0IE 005D                        _T0IF 005A  
                      _T0CS 040D                        _TMR0 0001           ?_LCD_Write_String 0070  
                      _isr1 0122                        _main 0022          __size_of_LCD_Clear 000E  
                      btemp 007E                        start 000C          ??_LCD_Write_String 0026  
      LCD_Write_4Bit@Nibble 0023            __end_of_LCD_Init 0122            ?_I2C_Master_Init 0070  
          ?_I2C_Master_Wait 0070            ?_I2C_Master_Stop 0070                       ?_isr1 0070  
                     ?_main 0070                       i1l106 014E                       u32_20 0126  
                     u32_21 0125                       u33_20 0135                       u33_21 0134  
                     u34_20 014B                       u34_21 014A                       u34_25 0147  
                     _PORTD 0008                       _TRISD 0088                       _SSPIF 0063  
    __end_of_LCD_Set_Cursor 01CD                       pclath 000A                       status 0003  
                     wtemp0 007E              _LCD_Write_4Bit 0227              _LCD_Write_Char 01CD  
           __initialization 000F                __end_of_isr1 0155                __end_of_main 00BF  
         _IO_Expander_Write 020A          ?_IO_Expander_Write 0070                      ??_isr1 0070  
                    ??_main 002A           __end_of_LCD_Clear 0270                   ??_LCD_CMD 0024  
         ?_I2C_Master_Start 0070           ?_I2C_Master_Write 0070         ??_IO_Expander_Write 0021  
           ?_LCD_Set_Cursor 0026          ??_I2C_Master_Start 0020          ??_I2C_Master_Write 0020  
                    i1l1060 012B                      i1l1070 014D                      i1l1062 012F  
                    i1l1054 0122                      i1l1064 0135                      i1l1056 0126  
                    i1l1066 0137                      i1l1058 012A                      i1l1068 014B  
                    _SSPADD 0093                      _TRISC3 043B                      _TRISC4 043C  
                    _SSPCON 0014                      _SSPBUF 0013      __end_of_LCD_Write_4Bit 023F  
    __end_of_LCD_Write_Char 01EC   __end_of_IO_Expander_Write 0227                  _Servo_Init 0251  
              __pdataCOMMON 0079                      saved_w 007E     __end_of__initialization 001E  
                 ?_LCD_Init 0070             ?_LCD_Write_4Bit 0070             ?_LCD_Write_Char 0070  
            __pcstackCOMMON 0070                __pidataBANK0 029D                  __pbssBANK0 002B  
                ??_LCD_Init 0026                  __pnvCOMMON 0078  __size_of_IO_Expander_Write 001D  
                __pmaintext 0022                  __pintentry 0004                 ?_Servo_Init 0070  
 __size_of_LCD_Write_String 0029                     _LCD_CMD 01EC                     _SSPCON2 0091  
                   _SSPSTAT 0094                  __stringtab 0155                     _i2c_add 0078  
          ??_LCD_Set_Cursor 0027                     __ptext1 0251                     __ptext2 0182  
                   __ptext3 01CD                     __ptext4 01AB                     __ptext5 00BF  
                   __ptext6 0262                     __ptext7 01EC                     __ptext8 0227  
                   __ptext9 020A    __size_of_I2C_Master_Init 000D    __size_of_I2C_Master_Wait 000D  
  __size_of_I2C_Master_Stop 0009                   _LCD_Clear 0262        end_of_initialization 001E  
       __size_of_Servo_Init 0011   __size_of_I2C_Master_Start 0009   __size_of_I2C_Master_Write 0012  
              _LCD_SWAP_OLL 002B                  LCD_CMD@CMD 0025                  ?_LCD_Clear 0070  
          ??_LCD_Write_4Bit 0022           LCD_Write_String@i 0026            ??_LCD_Write_Char 0024  
         __size_of_LCD_Init 0063            _LCD_Write_String 0182               __pidataCOMMON 029C  
       start_initialization 000F           ??_I2C_Master_Init 0020           ??_I2C_Master_Wait 0020  
         ??_I2C_Master_Stop 0020                ??_Servo_Init 0020                 __pdataBANK0 002C  
                  ?_LCD_CMD 0070                 __pbssCOMMON 0076                   ___latbits 0002  
             __pcstackBANK0 0020                 ??_LCD_Clear 0026          __end_of_Servo_Init 0262  
          _I2C_Master_Start 0293            _I2C_Master_Write 023F       IO_Expander_Write@Data 0021  
      I2C_Master_Write@data 0020                   __pstrings 0155           interrupt_function 0004  
                  _LCD_Init 00BF                 __stringbase 015A            __size_of_LCD_CMD 001E  
  __end_of_LCD_Write_String 01AB          __end_of__stringtab 015B             _I2C_Master_Init 027D  
           _I2C_Master_Wait 0270             _I2C_Master_Stop 028A                    __ptext10 023F  
                  __ptext11 028A                    __ptext12 0293                    __ptext13 0270  
                  __ptext14 027D                    __ptext15 0122     __size_of_LCD_Set_Cursor 0022  
           _BackLight_State 0079               __size_of_isr1 0033               __size_of_main 009D  
  __end_of_I2C_Master_Start 029C    __end_of_I2C_Master_Write 0251          LCD_Write_Char@Data 0025  
                  intlevel1 0000                   stringcode 0155     __size_of_LCD_Write_4Bit 0018  
   __size_of_LCD_Write_Char 001F     __end_of_I2C_Master_Init 028A     __end_of_I2C_Master_Wait 027D  
   __end_of_I2C_Master_Stop 0293             LCD_Init@I2C_Add 0029                    stringdir 0155  
                  stringtab 0155           LCD_Set_Cursor@COL 0026           LCD_Set_Cursor@ROW 0029  
