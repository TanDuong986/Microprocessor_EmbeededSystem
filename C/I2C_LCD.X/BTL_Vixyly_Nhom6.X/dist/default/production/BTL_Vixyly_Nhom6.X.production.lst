

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Thu Jun 09 03:56:23 2022

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	strings,global,class=STRING,delta=2,noexec
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	maintext,global,class=CODE,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	intentry,global,class=CODE,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2
    44                           	psect	text27,local,class=CODE,merge=1,delta=2
    45                           	psect	text28,local,class=CODE,merge=1,delta=2
    46                           	psect	text29,local,class=CODE,merge=1,delta=2
    47                           	psect	text30,local,class=CODE,merge=1,delta=2
    48                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    49                           	dabs	1,0x7E,2
    50  0000                     
    51                           ; Version 2.30
    52                           ; Generated 26/08/2020 GMT
    53                           ; 
    54                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    55                           ; All rights reserved.
    56                           ; 
    57                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    58                           ; 
    59                           ; Redistribution and use in source and binary forms, with or without modification, are
    60                           ; permitted provided that the following conditions are met:
    61                           ; 
    62                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    63                           ;        conditions and the following disclaimer.
    64                           ; 
    65                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    66                           ;        of conditions and the following disclaimer in the documentation and/or other
    67                           ;        materials provided with the distribution. Publication is not required when
    68                           ;        this file is used in an embedded application.
    69                           ; 
    70                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    71                           ;        software without specific prior written permission.
    72                           ; 
    73                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    74                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    75                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    76                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    77                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    78                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    79                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    80                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    81                           ; 
    82                           ; 
    83                           ; Code-generator required, PIC16F877A Definitions
    84                           ; 
    85                           ; SFR Addresses
    86  0000                     	;# 
    87  0001                     	;# 
    88  0002                     	;# 
    89  0003                     	;# 
    90  0004                     	;# 
    91  0005                     	;# 
    92  0006                     	;# 
    93  0007                     	;# 
    94  0008                     	;# 
    95  0009                     	;# 
    96  000A                     	;# 
    97  000B                     	;# 
    98  000C                     	;# 
    99  000D                     	;# 
   100  000E                     	;# 
   101  000E                     	;# 
   102  000F                     	;# 
   103  0010                     	;# 
   104  0011                     	;# 
   105  0012                     	;# 
   106  0013                     	;# 
   107  0014                     	;# 
   108  0015                     	;# 
   109  0015                     	;# 
   110  0016                     	;# 
   111  0017                     	;# 
   112  0018                     	;# 
   113  0019                     	;# 
   114  001A                     	;# 
   115  001B                     	;# 
   116  001B                     	;# 
   117  001C                     	;# 
   118  001D                     	;# 
   119  001E                     	;# 
   120  001F                     	;# 
   121  0081                     	;# 
   122  0085                     	;# 
   123  0086                     	;# 
   124  0087                     	;# 
   125  0088                     	;# 
   126  0089                     	;# 
   127  008C                     	;# 
   128  008D                     	;# 
   129  008E                     	;# 
   130  0091                     	;# 
   131  0092                     	;# 
   132  0093                     	;# 
   133  0094                     	;# 
   134  0098                     	;# 
   135  0099                     	;# 
   136  009C                     	;# 
   137  009D                     	;# 
   138  009E                     	;# 
   139  009F                     	;# 
   140  010C                     	;# 
   141  010D                     	;# 
   142  010E                     	;# 
   143  010F                     	;# 
   144  018C                     	;# 
   145  018D                     	;# 
   146  0000                     	;# 
   147  0001                     	;# 
   148  0002                     	;# 
   149  0003                     	;# 
   150  0004                     	;# 
   151  0005                     	;# 
   152  0006                     	;# 
   153  0007                     	;# 
   154  0008                     	;# 
   155  0009                     	;# 
   156  000A                     	;# 
   157  000B                     	;# 
   158  000C                     	;# 
   159  000D                     	;# 
   160  000E                     	;# 
   161  000E                     	;# 
   162  000F                     	;# 
   163  0010                     	;# 
   164  0011                     	;# 
   165  0012                     	;# 
   166  0013                     	;# 
   167  0014                     	;# 
   168  0015                     	;# 
   169  0015                     	;# 
   170  0016                     	;# 
   171  0017                     	;# 
   172  0018                     	;# 
   173  0019                     	;# 
   174  001A                     	;# 
   175  001B                     	;# 
   176  001B                     	;# 
   177  001C                     	;# 
   178  001D                     	;# 
   179  001E                     	;# 
   180  001F                     	;# 
   181  0081                     	;# 
   182  0085                     	;# 
   183  0086                     	;# 
   184  0087                     	;# 
   185  0088                     	;# 
   186  0089                     	;# 
   187  008C                     	;# 
   188  008D                     	;# 
   189  008E                     	;# 
   190  0091                     	;# 
   191  0092                     	;# 
   192  0093                     	;# 
   193  0094                     	;# 
   194  0098                     	;# 
   195  0099                     	;# 
   196  009C                     	;# 
   197  009D                     	;# 
   198  009E                     	;# 
   199  009F                     	;# 
   200  010C                     	;# 
   201  010D                     	;# 
   202  010E                     	;# 
   203  010F                     	;# 
   204  018C                     	;# 
   205  018D                     	;# 
   206  0000                     	;# 
   207  0001                     	;# 
   208  0002                     	;# 
   209  0003                     	;# 
   210  0004                     	;# 
   211  0005                     	;# 
   212  0006                     	;# 
   213  0007                     	;# 
   214  0008                     	;# 
   215  0009                     	;# 
   216  000A                     	;# 
   217  000B                     	;# 
   218  000C                     	;# 
   219  000D                     	;# 
   220  000E                     	;# 
   221  000E                     	;# 
   222  000F                     	;# 
   223  0010                     	;# 
   224  0011                     	;# 
   225  0012                     	;# 
   226  0013                     	;# 
   227  0014                     	;# 
   228  0015                     	;# 
   229  0015                     	;# 
   230  0016                     	;# 
   231  0017                     	;# 
   232  0018                     	;# 
   233  0019                     	;# 
   234  001A                     	;# 
   235  001B                     	;# 
   236  001B                     	;# 
   237  001C                     	;# 
   238  001D                     	;# 
   239  001E                     	;# 
   240  001F                     	;# 
   241  0081                     	;# 
   242  0085                     	;# 
   243  0086                     	;# 
   244  0087                     	;# 
   245  0088                     	;# 
   246  0089                     	;# 
   247  008C                     	;# 
   248  008D                     	;# 
   249  008E                     	;# 
   250  0091                     	;# 
   251  0092                     	;# 
   252  0093                     	;# 
   253  0094                     	;# 
   254  0098                     	;# 
   255  0099                     	;# 
   256  009C                     	;# 
   257  009D                     	;# 
   258  009E                     	;# 
   259  009F                     	;# 
   260  010C                     	;# 
   261  010D                     	;# 
   262  010E                     	;# 
   263  010F                     	;# 
   264  018C                     	;# 
   265  018D                     	;# 
   266                           
   267                           	psect	idataCOMMON
   268  06DF                     __pidataCOMMON:
   269                           
   270                           ;initializer for _pos
   271  06DF  3402               	retlw	2
   272                           
   273                           	psect	idataBANK0
   274  06D2                     __pidataBANK0:
   275                           
   276                           ;initializer for _B_rate
   277  06D2  3480               	retlw	128
   278  06D3  3425               	retlw	37
   279                           
   280                           ;initializer for _time_delay
   281  06D4  3402               	retlw	2
   282  06D5  3400               	retlw	0
   283                           
   284                           ;initializer for _flag_dc
   285  06D6  3401               	retlw	1
   286                           
   287                           ;initializer for _LCD_SWAP
   288  06D7  3401               	retlw	1
   289                           
   290                           ;initializer for _BackLight_State
   291  06D8  3408               	retlw	8
   292                           
   293                           	psect	nvBANK0
   294  004C                     __pnvBANK0:
   295  004C                     _i2c_add:
   296  004C                     	ds	1
   297  0019                     _TXREG	set	25
   298  0015                     _CCPR1L	set	21
   299  001E                     _ADRESH	set	30
   300  001A                     _RCREG	set	26
   301  0001                     _TMR0	set	1
   302  0013                     _SSPBUF	set	19
   303  0014                     _SSPCON	set	20
   304  00C6                     _RX9	set	198
   305  005E                     _PEIE	set	94
   306  00C4                     _CREN	set	196
   307  00C7                     _SPEN	set	199
   308  005C                     _INTE	set	92
   309  00BD                     _CCP1X	set	189
   310  00BC                     _CCP1Y	set	188
   311  0092                     _TMR2ON	set	146
   312  0091                     _T2CKPS1	set	145
   313  0090                     _T2CKPS0	set	144
   314  00BB                     _CCP1M3	set	187
   315  00BA                     _CCP1M2	set	186
   316  00FA                     _GO_DONE	set	250
   317  00FD                     _CHS2	set	253
   318  00FC                     _CHS1	set	252
   319  00FB                     _CHS0	set	251
   320  00F8                     _ADON	set	248
   321  00FF                     _ADCS1	set	255
   322  00FE                     _ADCS0	set	254
   323  005D                     _T0IE	set	93
   324  005F                     _GIE	set	95
   325  0065                     _RCIF	set	101
   326  0059                     _INTF	set	89
   327  005A                     _T0IF	set	90
   328  0032                     _RB2	set	50
   329  0031                     _RB1	set	49
   330  0035                     _RB5	set	53
   331  0036                     _RB6	set	54
   332  0063                     _SSPIF	set	99
   333  0099                     _SPBRG	set	153
   334  0092                     _PR2	set	146
   335  009E                     _ADRESL	set	158
   336  0093                     _SSPADD	set	147
   337  0094                     _SSPSTAT	set	148
   338  0091                     _SSPCON2	set	145
   339  04C6                     _TX9	set	1222
   340  0465                     _RCIE	set	1125
   341  04C5                     _TXEN	set	1221
   342  043F                     _TRISC7	set	1087
   343  043E                     _TRISC6	set	1086
   344  04C4                     _SYNC	set	1220
   345  04C2                     _BRGH	set	1218
   346  04C1                     _TRMT	set	1217
   347  040E                     _INTEDG	set	1038
   348  043A                     _TRISC2	set	1082
   349  04FB                     _PCFG3	set	1275
   350  04FA                     _PCFG2	set	1274
   351  04F9                     _PCFG1	set	1273
   352  04F8                     _PCFG0	set	1272
   353  04FE                     _ADCS2	set	1278
   354  04FF                     _ADFM	set	1279
   355  040D                     _T0CS	set	1037
   356  0408                     _PS0	set	1032
   357  0409                     _PS1	set	1033
   358  040A                     _PS2	set	1034
   359  040B                     _PSA	set	1035
   360  0430                     _TRISB0	set	1072
   361  0432                     _TRISB2	set	1074
   362  0431                     _TRISB1	set	1073
   363  0428                     _TRISA0	set	1064
   364  0435                     _TRISB5	set	1077
   365  0436                     _TRISB6	set	1078
   366  048E                     _ACKSTAT	set	1166
   367  048A                     _PEN	set	1162
   368  0488                     _SEN	set	1160
   369  043C                     _TRISC4	set	1084
   370  043B                     _TRISC3	set	1083
   371  010C                     _EEDATA	set	268
   372  010D                     _EEADR	set	269
   373  018D                     _EECON2	set	397
   374  018C                     _EECON1bits	set	396
   375  0C61                     _WR	set	3169
   376  0C67                     _EEPGD	set	3175
   377                           
   378                           	psect	strings
   379  0486                     __pstrings:
   380  0486                     stringtab:
   381  0486                     __stringtab:
   382  0486                     stringcode:	
   383                           ;	String table - string pointers are 1 byte each
   384                           
   385  0486                     stringdir:
   386  0486  3004               	movlw	high stringdir
   387  0487  008A               	movwf	10
   388  0488  0804               	movf	4,w
   389  0489  0A84               	incf	4,f
   390  048A  0782               	addwf	2,f
   391  048B                     __stringbase:
   392  048B  3400               	retlw	0
   393  048C                     __end_of__stringtab:
   394  048C                     STR_1:
   395  048C  3420               	retlw	32	;' '
   396  048D  3420               	retlw	32	;' '
   397  048E  3420               	retlw	32	;' '
   398  048F  3420               	retlw	32	;' '
   399  0490  3456               	retlw	86	;'V'
   400  0491  3449               	retlw	73	;'I'
   401  0492  3420               	retlw	32	;' '
   402  0493  3458               	retlw	88	;'X'
   403  0494  3455               	retlw	85	;'U'
   404  0495  3420               	retlw	32	;' '
   405  0496  344C               	retlw	76	;'L'
   406  0497  3459               	retlw	89	;'Y'
   407  0498  3420               	retlw	32	;' '
   408  0499  3420               	retlw	32	;' '
   409  049A  3420               	retlw	32	;' '
   410  049B  3420               	retlw	32	;' '
   411  049C  3400               	retlw	0
   412  049D                     STR_2:
   413  049D  3420               	retlw	32	;' '
   414  049E  3420               	retlw	32	;' '
   415  049F  3420               	retlw	32	;' '
   416  04A0  3454               	retlw	84	;'T'
   417  04A1  3441               	retlw	65	;'A'
   418  04A2  344E               	retlw	78	;'N'
   419  04A3  3420               	retlw	32	;' '
   420  04A4  344D               	retlw	77	;'M'
   421  04A5  3441               	retlw	65	;'A'
   422  04A6  3449               	retlw	73	;'I'
   423  04A7  3420               	retlw	32	;' '
   424  04A8  344E               	retlw	78	;'N'
   425  04A9  3441               	retlw	65	;'A'
   426  04AA  344D               	retlw	77	;'M'
   427  04AB  3420               	retlw	32	;' '
   428  04AC  3420               	retlw	32	;' '
   429  04AD  3400               	retlw	0
   430  04AE                     STR_3:
   431  04AE  3420               	retlw	32	;' '
   432  04AF  3444               	retlw	68	;'D'
   433  04B0  3446               	retlw	70	;'F'
   434  04B1  3453               	retlw	83	;'S'
   435  04B2  3420               	retlw	32	;' '
   436  04B3  3420               	retlw	32	;' '
   437  04B4  3449               	retlw	73	;'I'
   438  04B5  3432               	retlw	50	;'2'
   439  04B6  3443               	retlw	67	;'C'
   440  04B7  3420               	retlw	32	;' '
   441  04B8  3420               	retlw	32	;' '
   442  04B9  3443               	retlw	67	;'C'
   443  04BA  3452               	retlw	82	;'R'
   444  04BB  3443               	retlw	67	;'C'
   445  04BC  3420               	retlw	32	;' '
   446  04BD  3400               	retlw	0
   447  04BE                     STR_4:
   448  04BE  3463               	retlw	99	;'c'
   449  04BF  3468               	retlw	104	;'h'
   450  04C0  3465               	retlw	101	;'e'
   451  04C1  3463               	retlw	99	;'c'
   452  04C2  346B               	retlw	107	;'k'
   453  04C3  340A               	retlw	10
   454  04C4  3400               	retlw	0
   455                           
   456                           	psect	cinit
   457  0015                     start_initialization:	
   458                           ; #config settings
   459                           
   460  0015                     __initialization:
   461                           
   462                           ; Initialize objects allocated to BANK0
   463  0015  1383               	bcf	3,7	;select IRP bank0
   464  0016  304C               	movlw	low (__pdataBANK0+7)
   465  0017  00FD               	movwf	btemp+-1
   466  0018  3006               	movlw	high __pidataBANK0
   467  0019  00FE               	movwf	btemp
   468  001A  30D2               	movlw	low __pidataBANK0
   469  001B  00FF               	movwf	btemp+1
   470  001C  3045               	movlw	low __pdataBANK0
   471  001D  0084               	movwf	4
   472  001E  120A  118A  2643  120A  118A  	fcall	init_ram0
   473                           
   474                           ; Initialize objects allocated to COMMON
   475  0023  120A  118A  26DF  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   476  0028  00FD               	movwf	__pdataCOMMON& (0+127)
   477                           
   478                           ; Clear objects allocated to BANK0
   479  0029  01BD               	clrf	__pbssBANK0& (0+127)
   480  002A  01BE               	clrf	(__pbssBANK0+1)& (0+127)
   481  002B  01BF               	clrf	(__pbssBANK0+2)& (0+127)
   482  002C  01C0               	clrf	(__pbssBANK0+3)& (0+127)
   483  002D  01C1               	clrf	(__pbssBANK0+4)& (0+127)
   484  002E  01C2               	clrf	(__pbssBANK0+5)& (0+127)
   485  002F  01C3               	clrf	(__pbssBANK0+6)& (0+127)
   486  0030  01C4               	clrf	(__pbssBANK0+7)& (0+127)
   487                           
   488                           ; Clear objects allocated to COMMON
   489  0031  01FA               	clrf	__pbssCOMMON& (0+127)
   490  0032  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   491  0033  01FC               	clrf	(__pbssCOMMON+2)& (0+127)
   492  0034                     end_of_initialization:	
   493                           ;End of C runtime variable initialization code
   494                           
   495  0034                     __end_of__initialization:
   496  0034  0183               	clrf	3
   497  0035  120A  118A  2838   	ljmp	_main	;jump to C main() function
   498                           
   499                           	psect	bssCOMMON
   500  007A                     __pbssCOMMON:
   501  007A                     _result:
   502  007A                     	ds	1
   503  007B                     _cnt_pos:
   504  007B                     	ds	1
   505  007C                     _SelectServo:
   506  007C                     	ds	1
   507                           
   508                           	psect	dataCOMMON
   509  007D                     __pdataCOMMON:
   510  007D                     _pos:
   511  007D                     	ds	1
   512                           
   513                           	psect	bssBANK0
   514  003D                     __pbssBANK0:
   515  003D                     _cnt_time_delay:
   516  003D                     	ds	2
   517  003F                     _count_sp3:
   518  003F                     	ds	1
   519  0040                     _count_sp2:
   520  0040                     	ds	1
   521  0041                     _count_sp1:
   522  0041                     	ds	1
   523  0042                     _flag_trans:
   524  0042                     	ds	1
   525  0043                     _OpenServo:
   526  0043                     	ds	1
   527  0044                     _RS:
   528  0044                     	ds	1
   529                           
   530                           	psect	dataBANK0
   531  0045                     __pdataBANK0:
   532  0045                     _B_rate:
   533  0045                     	ds	2
   534  0047                     _time_delay:
   535  0047                     	ds	2
   536  0049                     _flag_dc:
   537  0049                     	ds	1
   538  004A                     _LCD_SWAP:
   539  004A                     	ds	1
   540  004B                     _BackLight_State:
   541  004B                     	ds	1
   542                           
   543                           	psect	inittext
   544  063F                     init_fetch0:	
   545                           ;	Called with low address in FSR and high address in W
   546                           
   547  063F  087E               	movf	btemp,w
   548  0640  008A               	movwf	10
   549  0641  087F               	movf	btemp+1,w
   550  0642  0082               	movwf	2
   551  0643                     init_ram0:	
   552                           ;Called with:
   553                           ;	high address of idata address in btemp 
   554                           ;	low address of idata address in btemp+1 
   555                           ;	low address of data in FSR
   556                           ;	high address + 1 of data in btemp-1
   557                           
   558  0643  120A  118A  263F  120A  118A  	fcall	init_fetch0
   559  0648  0080               	movwf	0
   560  0649  0A84               	incf	4,f
   561  064A  0804               	movf	4,w
   562  064B  067D               	xorwf	btemp+-1,w
   563  064C  1903               	btfsc	3,2
   564  064D  3400               	retlw	0
   565  064E  0AFF               	incf	btemp+1,f
   566  064F  1903               	btfsc	3,2
   567  0650  0AFE               	incf	btemp,f
   568  0651  2E43               	goto	init_ram0
   569                           
   570                           	psect	cstackCOMMON
   571  0070                     __pcstackCOMMON:
   572  0070                     ?_IO_Expander_Write:
   573  0070                     ?_LCD_CMD:	
   574                           ; 1 bytes @ 0x0
   575                           
   576  0070                     ?_Servo_Init:	
   577                           ; 1 bytes @ 0x0
   578                           
   579  0070                     ?_ADC_Init:	
   580                           ; 1 bytes @ 0x0
   581                           
   582  0070                     ?_init_PWM:	
   583                           ; 1 bytes @ 0x0
   584                           
   585  0070                     ?_IR_Init:	
   586                           ; 1 bytes @ 0x0
   587                           
   588  0070                     ?_config_UART:	
   589                           ; 1 bytes @ 0x0
   590                           
   591  0070                     ?_EEPROM_Read:	
   592                           ; 1 bytes @ 0x0
   593                           
   594  0070                     ?_UART_send_string:	
   595                           ; 1 bytes @ 0x0
   596                           
   597  0070                     ?_EEPROM_Write:	
   598                           ; 1 bytes @ 0x0
   599                           
   600  0070                     ?_I2C_Master_Init:	
   601                           ; 1 bytes @ 0x0
   602                           
   603  0070                     ?_I2C_Master_Wait:	
   604                           ; 1 bytes @ 0x0
   605                           
   606  0070                     ?_I2C_Master_Start:	
   607                           ; 1 bytes @ 0x0
   608                           
   609  0070                     ?_I2C_Master_Stop:	
   610                           ; 1 bytes @ 0x0
   611                           
   612  0070                     ?_I2C_Master_Write:	
   613                           ; 1 bytes @ 0x0
   614                           
   615  0070                     ?_LCD_Init:	
   616                           ; 1 bytes @ 0x0
   617                           
   618  0070                     ?_LCD_Write_4Bit:	
   619                           ; 1 bytes @ 0x0
   620                           
   621  0070                     ?_LCD_Write_Char:	
   622                           ; 1 bytes @ 0x0
   623                           
   624  0070                     ?_LCD_Write_String:	
   625                           ; 1 bytes @ 0x0
   626                           
   627  0070                     ?_LCD_Clear:	
   628                           ; 1 bytes @ 0x0
   629                           
   630  0070                     ?_main:	
   631                           ; 1 bytes @ 0x0
   632                           
   633  0070                     ?_isr1:	
   634                           ; 1 bytes @ 0x0
   635                           
   636  0070                     ?_UART_send_char:	
   637                           ; 1 bytes @ 0x0
   638                           
   639  0070                     ??_UART_send_char:	
   640                           ; 1 bytes @ 0x0
   641                           
   642  0070                     ?i1_ADC_Read:	
   643                           ; 1 bytes @ 0x0
   644                           
   645  0070                     UART_send_char@bt:	
   646                           ; 2 bytes @ 0x0
   647                           
   648  0070                     EEPROM_Write@Data:	
   649                           ; 1 bytes @ 0x0
   650                           
   651                           
   652                           ; 1 bytes @ 0x0
   653  0070                     	ds	1
   654  0071                     ??_UART_send_string:
   655  0071                     ??_EEPROM_Write:	
   656                           ; 1 bytes @ 0x1
   657                           
   658  0071                     EEPROM_Write@Address:	
   659                           ; 1 bytes @ 0x1
   660                           
   661                           
   662                           ; 1 bytes @ 0x1
   663  0071                     	ds	1
   664  0072                     ??i1_ADC_Read:
   665  0072                     UART_send_string@st_pt:	
   666                           ; 1 bytes @ 0x2
   667                           
   668                           
   669                           ; 1 bytes @ 0x2
   670  0072                     	ds	1
   671  0073                     i1ADC_Read@result:
   672                           
   673                           ; 2 bytes @ 0x3
   674  0073                     	ds	2
   675  0075                     i1ADC_Read@ADC_channel:
   676                           
   677                           ; 1 bytes @ 0x5
   678  0075                     	ds	1
   679  0076                     ?i1_setPWM_DutyCycle:
   680  0076                     i1setPWM_DutyCycle@DC:	
   681                           ; 1 bytes @ 0x6
   682                           
   683                           
   684                           ; 2 bytes @ 0x6
   685  0076                     	ds	2
   686  0078                     ??i1_setPWM_DutyCycle:
   687                           
   688                           ; 1 bytes @ 0x8
   689  0078                     	ds	2
   690                           
   691                           	psect	cstackBANK0
   692  0020                     __pcstackBANK0:
   693  0020                     ??_isr1:
   694                           
   695                           ; 1 bytes @ 0x0
   696  0020                     	ds	8
   697  0028                     ??_Servo_Init:
   698  0028                     ??_ADC_Init:	
   699                           ; 1 bytes @ 0x8
   700                           
   701  0028                     ??_init_PWM:	
   702                           ; 1 bytes @ 0x8
   703                           
   704  0028                     ??_IR_Init:	
   705                           ; 1 bytes @ 0x8
   706                           
   707  0028                     ??_config_UART:	
   708                           ; 1 bytes @ 0x8
   709                           
   710  0028                     ??_EEPROM_Read:	
   711                           ; 1 bytes @ 0x8
   712                           
   713  0028                     ??_I2C_Master_Init:	
   714                           ; 1 bytes @ 0x8
   715                           
   716  0028                     ??_I2C_Master_Wait:	
   717                           ; 1 bytes @ 0x8
   718                           
   719  0028                     ??_I2C_Master_Start:	
   720                           ; 1 bytes @ 0x8
   721                           
   722  0028                     ??_I2C_Master_Stop:	
   723                           ; 1 bytes @ 0x8
   724                           
   725  0028                     ??_I2C_Master_Write:	
   726                           ; 1 bytes @ 0x8
   727                           
   728  0028                     ?_ADC_Read:	
   729                           ; 1 bytes @ 0x8
   730                           
   731  0028                     ?___awdiv:	
   732                           ; 2 bytes @ 0x8
   733                           
   734  0028                     ?___awmod:	
   735                           ; 2 bytes @ 0x8
   736                           
   737  0028                     I2C_Master_Write@data:	
   738                           ; 2 bytes @ 0x8
   739                           
   740  0028                     EEPROM_Read@Address:	
   741                           ; 1 bytes @ 0x8
   742                           
   743  0028                     ___awdiv@divisor:	
   744                           ; 1 bytes @ 0x8
   745                           
   746  0028                     ___awmod@divisor:	
   747                           ; 2 bytes @ 0x8
   748                           
   749                           
   750                           ; 2 bytes @ 0x8
   751  0028                     	ds	1
   752  0029                     ??_IO_Expander_Write:
   753  0029                     IO_Expander_Write@Data:	
   754                           ; 1 bytes @ 0x9
   755                           
   756                           
   757                           ; 1 bytes @ 0x9
   758  0029                     	ds	1
   759  002A                     ??_ADC_Read:
   760  002A                     ??_LCD_Write_4Bit:	
   761                           ; 1 bytes @ 0xA
   762                           
   763  002A                     ___awdiv@dividend:	
   764                           ; 1 bytes @ 0xA
   765                           
   766  002A                     ___awmod@dividend:	
   767                           ; 2 bytes @ 0xA
   768                           
   769                           
   770                           ; 2 bytes @ 0xA
   771  002A                     	ds	1
   772  002B                     LCD_Write_4Bit@Nibble:
   773  002B                     ADC_Read@result:	
   774                           ; 1 bytes @ 0xB
   775                           
   776                           
   777                           ; 2 bytes @ 0xB
   778  002B                     	ds	1
   779  002C                     ??_LCD_CMD:
   780  002C                     ??_LCD_Write_Char:	
   781                           ; 1 bytes @ 0xC
   782                           
   783  002C                     ??___awdiv:	
   784                           ; 1 bytes @ 0xC
   785                           
   786  002C                     ??___awmod:	
   787                           ; 1 bytes @ 0xC
   788                           
   789                           
   790                           ; 1 bytes @ 0xC
   791  002C                     	ds	1
   792  002D                     LCD_CMD@CMD:
   793  002D                     LCD_Write_Char@Data:	
   794                           ; 1 bytes @ 0xD
   795                           
   796  002D                     ADC_Read@ADC_channel:	
   797                           ; 1 bytes @ 0xD
   798                           
   799  002D                     ___awdiv@counter:	
   800                           ; 1 bytes @ 0xD
   801                           
   802  002D                     ___awmod@counter:	
   803                           ; 1 bytes @ 0xD
   804                           
   805                           
   806                           ; 1 bytes @ 0xD
   807  002D                     	ds	1
   808  002E                     ?_setPWM_DutyCycle:
   809  002E                     ??_LCD_Init:	
   810                           ; 1 bytes @ 0xE
   811                           
   812  002E                     ??_LCD_Write_String:	
   813                           ; 1 bytes @ 0xE
   814                           
   815  002E                     ?_LCD_Set_Cursor:	
   816                           ; 1 bytes @ 0xE
   817                           
   818  002E                     ??_LCD_Clear:	
   819                           ; 1 bytes @ 0xE
   820                           
   821  002E                     LCD_Set_Cursor@COL:	
   822                           ; 1 bytes @ 0xE
   823                           
   824  002E                     ___awdiv@sign:	
   825                           ; 1 bytes @ 0xE
   826                           
   827  002E                     ___awmod@sign:	
   828                           ; 1 bytes @ 0xE
   829                           
   830  002E                     LCD_Write_String@i:	
   831                           ; 1 bytes @ 0xE
   832                           
   833  002E                     setPWM_DutyCycle@DC:	
   834                           ; 2 bytes @ 0xE
   835                           
   836                           
   837                           ; 2 bytes @ 0xE
   838  002E                     	ds	1
   839  002F                     ??_LCD_Set_Cursor:
   840  002F                     ___awdiv@quotient:	
   841                           ; 1 bytes @ 0xF
   842                           
   843                           
   844                           ; 2 bytes @ 0xF
   845  002F                     	ds	1
   846  0030                     ??_setPWM_DutyCycle:
   847  0030                     LCD_Write_String@Str:	
   848                           ; 1 bytes @ 0x10
   849                           
   850                           
   851                           ; 1 bytes @ 0x10
   852  0030                     	ds	1
   853  0031                     LCD_Init@I2C_Add:
   854  0031                     LCD_Set_Cursor@ROW:	
   855                           ; 1 bytes @ 0x11
   856                           
   857                           
   858                           ; 1 bytes @ 0x11
   859  0031                     	ds	1
   860  0032                     ?_LCD_Write:
   861  0032                     LCD_Write@x:	
   862                           ; 1 bytes @ 0x12
   863                           
   864                           
   865                           ; 1 bytes @ 0x12
   866  0032                     	ds	1
   867  0033                     LCD_Write@y:
   868                           
   869                           ; 1 bytes @ 0x13
   870  0033                     	ds	1
   871  0034                     ??_LCD_Write:
   872                           
   873                           ; 1 bytes @ 0x14
   874  0034                     	ds	3
   875  0037                     LCD_Write@i:
   876                           
   877                           ; 1 bytes @ 0x17
   878  0037                     	ds	1
   879  0038                     LCD_Write@c:
   880                           
   881                           ; 1 bytes @ 0x18
   882  0038                     	ds	1
   883  0039                     LCD_Write@y_:
   884                           
   885                           ; 1 bytes @ 0x19
   886  0039                     	ds	1
   887  003A                     LCD_Write@count_sp:
   888                           
   889                           ; 1 bytes @ 0x1A
   890  003A                     	ds	1
   891  003B                     ??_main:
   892                           
   893                           ; 1 bytes @ 0x1B
   894  003B                     	ds	2
   895                           
   896                           	psect	maintext
   897  0038                     __pmaintext:	
   898 ;;
   899 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   900 ;;
   901 ;; *************** function _main *****************
   902 ;; Defined at:
   903 ;;		line 75 in file "Main.c"
   904 ;; Parameters:    Size  Location     Type
   905 ;;		None
   906 ;; Auto vars:     Size  Location     Type
   907 ;;  tmp             1    0        unsigned char 
   908 ;; Return value:  Size  Location     Type
   909 ;;                  1    wreg      void 
   910 ;; Registers used:
   911 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   912 ;; Tracked objects:
   913 ;;		On entry : B00/0
   914 ;;		On exit  : 0/0
   915 ;;		Unchanged: 0/0
   916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   917 ;;      Params:         0       0       0       0       0
   918 ;;      Locals:         0       0       0       0       0
   919 ;;      Temps:          0       2       0       0       0
   920 ;;      Totals:         0       2       0       0       0
   921 ;;Total ram usage:        2 bytes
   922 ;; Hardware stack levels required when called:   10
   923 ;; This function calls:
   924 ;;		_ADC_Init
   925 ;;		_ADC_Read
   926 ;;		_EEPROM_Read
   927 ;;		_I2C_Master_Init
   928 ;;		_IR_Init
   929 ;;		_LCD_Clear
   930 ;;		_LCD_Init
   931 ;;		_LCD_Set_Cursor
   932 ;;		_LCD_Write
   933 ;;		_LCD_Write_String
   934 ;;		_Servo_Init
   935 ;;		_config_UART
   936 ;;		_init_PWM
   937 ;;		_setPWM_DutyCycle
   938 ;; This function is called by:
   939 ;;		Startup code after reset
   940 ;; This function uses a non-reentrant model
   941 ;;
   942                           
   943                           
   944                           ;psect for function _main
   945  0038                     _main:
   946  0038                     l1881:	
   947                           ;incstack = 0
   948 ;; hardware stack exceeded
   949                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   950                           
   951                           
   952                           ;Main.c: 79:     I2C_Master_Init();
   953  0038  120A  118A  269C  120A  118A  	fcall	_I2C_Master_Init
   954                           
   955                           ;Main.c: 82:     LCD_Init(0x4E);
   956  003D  304E               	movlw	78
   957  003E  120A  118A  2208  120A  118A  	fcall	_LCD_Init
   958  0043                     l1883:
   959                           
   960                           ;Main.c: 83:     LCD_Set_Cursor(1, 1);
   961  0043  1283               	bcf	3,5	;RP0=0, select bank0
   962  0044  1303               	bcf	3,6	;RP1=0, select bank0
   963  0045  01AE               	clrf	LCD_Set_Cursor@COL
   964  0046  0AAE               	incf	LCD_Set_Cursor@COL,f
   965  0047  3001               	movlw	1
   966  0048  120A  118A  251B  120A  118A  	fcall	_LCD_Set_Cursor
   967  004D                     l1885:
   968                           
   969                           ;Main.c: 84:     LCD_Write_String("    VI XU LY    ");
   970  004D  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   971  004E  120A  118A  24F2  120A  118A  	fcall	_LCD_Write_String
   972  0053                     l1887:
   973                           
   974                           ;Main.c: 85:     LCD_Set_Cursor(2, 1);
   975  0053  1283               	bcf	3,5	;RP0=0, select bank0
   976  0054  1303               	bcf	3,6	;RP1=0, select bank0
   977  0055  01AE               	clrf	LCD_Set_Cursor@COL
   978  0056  0AAE               	incf	LCD_Set_Cursor@COL,f
   979  0057  3002               	movlw	2
   980  0058  120A  118A  251B  120A  118A  	fcall	_LCD_Set_Cursor
   981  005D                     l1889:
   982                           
   983                           ;Main.c: 86:     LCD_Write_String("   TAN MAI NAM  ");
   984  005D  3012               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   985  005E  120A  118A  24F2  120A  118A  	fcall	_LCD_Write_String
   986                           
   987                           ;Main.c: 87:     LCD_Clear();
   988  0063  120A  118A  2673  120A  118A  	fcall	_LCD_Clear
   989  0068                     l1891:
   990                           
   991                           ;Main.c: 90:     Servo_Init();
   992  0068  120A  118A  26B5  120A  118A  	fcall	_Servo_Init
   993  006D                     l1893:
   994                           
   995                           ;Main.c: 93:     ADC_Init();
   996  006D  120A  118A  2681  120A  118A  	fcall	_ADC_Init
   997  0072                     l1895:
   998                           
   999                           ;Main.c: 94:     init_PWM();
  1000  0072  120A  118A  24C5  120A  118A  	fcall	_init_PWM
  1001  0077                     l1897:
  1002                           
  1003                           ;Main.c: 97:     IR_Init();
  1004  0077  120A  118A  26D9  120A  118A  	fcall	_IR_Init
  1005  007C                     l1899:
  1006                           
  1007                           ;Main.c: 100:     config_UART();
  1008  007C  120A  118A  25D7  120A  118A  	fcall	_config_UART
  1009  0081                     l1901:
  1010                           
  1011                           ;Main.c: 106:     TRISB6 = 0;
  1012  0081  1683               	bsf	3,5	;RP0=1, select bank1
  1013  0082  1303               	bcf	3,6	;RP1=0, select bank1
  1014  0083  1306               	bcf	6,6	;volatile
  1015  0084                     l1903:
  1016                           
  1017                           ;Main.c: 107:     TRISB5 = 0;
  1018  0084  1286               	bcf	6,5	;volatile
  1019  0085                     l1905:
  1020                           
  1021                           ;Main.c: 108:     RB6 = 1;
  1022  0085  1283               	bcf	3,5	;RP0=0, select bank0
  1023  0086  1303               	bcf	3,6	;RP1=0, select bank0
  1024  0087  1706               	bsf	6,6	;volatile
  1025  0088                     l1907:
  1026                           
  1027                           ;Main.c: 109:     RB5 = 1;
  1028  0088  1686               	bsf	6,5	;volatile
  1029  0089                     l1909:
  1030                           
  1031                           ;Main.c: 112:     TRISA0 = 1;
  1032  0089  1683               	bsf	3,5	;RP0=1, select bank1
  1033  008A  1303               	bcf	3,6	;RP1=0, select bank1
  1034  008B  1405               	bsf	5,0	;volatile
  1035  008C                     l1911:
  1036                           
  1037                           ;Main.c: 113:     TRISB1 = 0;
  1038  008C  1086               	bcf	6,1	;volatile
  1039  008D                     l1913:
  1040                           
  1041                           ;Main.c: 114:     TRISB2 = 0;
  1042  008D  1106               	bcf	6,2	;volatile
  1043  008E                     l1915:
  1044                           
  1045                           ;Main.c: 115:     RB1 = 0;
  1046  008E  1283               	bcf	3,5	;RP0=0, select bank0
  1047  008F  1303               	bcf	3,6	;RP1=0, select bank0
  1048  0090  1086               	bcf	6,1	;volatile
  1049  0091                     l1917:
  1050                           
  1051                           ;Main.c: 118:     TRISB0 = 1;
  1052  0091  1683               	bsf	3,5	;RP0=1, select bank1
  1053  0092  1303               	bcf	3,6	;RP1=0, select bank1
  1054  0093  1406               	bsf	6,0	;volatile
  1055  0094                     l1919:
  1056                           
  1057                           ;Main.c: 121:     uint8_t tmp;;Main.c: 122:     count_sp1 = EEPROM_Read(0x00);
  1058  0094  3000               	movlw	0
  1059  0095  120A  118A  2664  120A  118A  	fcall	_EEPROM_Read
  1060  009A  1283               	bcf	3,5	;RP0=0, select bank0
  1061  009B  1303               	bcf	3,6	;RP1=0, select bank0
  1062  009C  00BB               	movwf	??_main
  1063  009D  083B               	movf	??_main,w
  1064  009E  00C1               	movwf	_count_sp1
  1065  009F                     l1921:
  1066                           
  1067                           ;Main.c: 123:     count_sp2 = EEPROM_Read(0x01);
  1068  009F  3001               	movlw	1
  1069  00A0  120A  118A  2664  120A  118A  	fcall	_EEPROM_Read
  1070  00A5  1283               	bcf	3,5	;RP0=0, select bank0
  1071  00A6  1303               	bcf	3,6	;RP1=0, select bank0
  1072  00A7  00BB               	movwf	??_main
  1073  00A8  083B               	movf	??_main,w
  1074  00A9  00C0               	movwf	_count_sp2
  1075  00AA                     l1923:
  1076                           
  1077                           ;Main.c: 124:     count_sp3 = EEPROM_Read(0x02);
  1078  00AA  3002               	movlw	2
  1079  00AB  120A  118A  2664  120A  118A  	fcall	_EEPROM_Read
  1080  00B0  1283               	bcf	3,5	;RP0=0, select bank0
  1081  00B1  1303               	bcf	3,6	;RP1=0, select bank0
  1082  00B2  00BB               	movwf	??_main
  1083  00B3  083B               	movf	??_main,w
  1084  00B4  00BF               	movwf	_count_sp3
  1085  00B5                     l1925:
  1086                           
  1087                           ;Main.c: 128:     {;Main.c: 130:         if (LCD_SWAP == 1)
  1088  00B5  1283               	bcf	3,5	;RP0=0, select bank0
  1089  00B6  1303               	bcf	3,6	;RP1=0, select bank0
  1090  00B7  034A               	decf	_LCD_SWAP,w
  1091  00B8  1D03               	btfss	3,2
  1092  00B9  28BB               	goto	u1261
  1093  00BA  28BC               	goto	u1260
  1094  00BB                     u1261:
  1095  00BB  2904               	goto	l1941
  1096  00BC                     u1260:
  1097  00BC                     l1927:
  1098                           
  1099                           ;Main.c: 131:         {;Main.c: 132:             LCD_Clear();
  1100  00BC  120A  118A  2673  120A  118A  	fcall	_LCD_Clear
  1101  00C1                     l1929:
  1102                           
  1103                           ;Main.c: 133:             LCD_Set_Cursor(1, 1);
  1104  00C1  1283               	bcf	3,5	;RP0=0, select bank0
  1105  00C2  1303               	bcf	3,6	;RP1=0, select bank0
  1106  00C3  01AE               	clrf	LCD_Set_Cursor@COL
  1107  00C4  0AAE               	incf	LCD_Set_Cursor@COL,f
  1108  00C5  3001               	movlw	1
  1109  00C6  120A  118A  251B  120A  118A  	fcall	_LCD_Set_Cursor
  1110  00CB                     l1931:
  1111                           
  1112                           ;Main.c: 134:             LCD_Write_String(" DFS  I2C  CRC ");
  1113  00CB  3023               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1114  00CC  120A  118A  24F2  120A  118A  	fcall	_LCD_Write_String
  1115  00D1                     l1933:
  1116                           
  1117                           ;Main.c: 137:             LCD_Write(count_sp1, 2, 2);
  1118  00D1  3002               	movlw	2
  1119  00D2  1283               	bcf	3,5	;RP0=0, select bank0
  1120  00D3  1303               	bcf	3,6	;RP1=0, select bank0
  1121  00D4  00BB               	movwf	??_main
  1122  00D5  083B               	movf	??_main,w
  1123  00D6  00B2               	movwf	LCD_Write@x
  1124  00D7  3002               	movlw	2
  1125  00D8  00BC               	movwf	??_main+1
  1126  00D9  083C               	movf	??_main+1,w
  1127  00DA  00B3               	movwf	LCD_Write@y
  1128  00DB  0841               	movf	_count_sp1,w
  1129  00DC  120A  118A  22B5  120A  118A  	fcall	_LCD_Write
  1130  00E1                     l1935:
  1131                           
  1132                           ;Main.c: 138:             LCD_Write(count_sp2, 2, 7);
  1133  00E1  3002               	movlw	2
  1134  00E2  1283               	bcf	3,5	;RP0=0, select bank0
  1135  00E3  1303               	bcf	3,6	;RP1=0, select bank0
  1136  00E4  00BB               	movwf	??_main
  1137  00E5  083B               	movf	??_main,w
  1138  00E6  00B2               	movwf	LCD_Write@x
  1139  00E7  3007               	movlw	7
  1140  00E8  00BC               	movwf	??_main+1
  1141  00E9  083C               	movf	??_main+1,w
  1142  00EA  00B3               	movwf	LCD_Write@y
  1143  00EB  0840               	movf	_count_sp2,w
  1144  00EC  120A  118A  22B5  120A  118A  	fcall	_LCD_Write
  1145  00F1                     l1937:
  1146                           
  1147                           ;Main.c: 139:             LCD_Write(count_sp3, 2, 12);
  1148  00F1  3002               	movlw	2
  1149  00F2  1283               	bcf	3,5	;RP0=0, select bank0
  1150  00F3  1303               	bcf	3,6	;RP1=0, select bank0
  1151  00F4  00BB               	movwf	??_main
  1152  00F5  083B               	movf	??_main,w
  1153  00F6  00B2               	movwf	LCD_Write@x
  1154  00F7  300C               	movlw	12
  1155  00F8  00BC               	movwf	??_main+1
  1156  00F9  083C               	movf	??_main+1,w
  1157  00FA  00B3               	movwf	LCD_Write@y
  1158  00FB  083F               	movf	_count_sp3,w
  1159  00FC  120A  118A  22B5  120A  118A  	fcall	_LCD_Write
  1160  0101                     l1939:
  1161                           
  1162                           ;Main.c: 141:             LCD_SWAP = 0;
  1163  0101  1283               	bcf	3,5	;RP0=0, select bank0
  1164  0102  1303               	bcf	3,6	;RP1=0, select bank0
  1165  0103  01CA               	clrf	_LCD_SWAP
  1166  0104                     l1941:
  1167                           
  1168                           ;Main.c: 145:         if (OpenServo == 1)
  1169  0104  0343               	decf	_OpenServo,w
  1170  0105  1D03               	btfss	3,2
  1171  0106  2908               	goto	u1271
  1172  0107  2909               	goto	u1270
  1173  0108                     u1271:
  1174  0108  290E               	goto	l1945
  1175  0109                     u1270:
  1176  0109                     l1943:
  1177                           
  1178                           ;Main.c: 146:         {;Main.c: 147:             pos = 8;
  1179  0109  3008               	movlw	8
  1180  010A  00BB               	movwf	??_main
  1181  010B  083B               	movf	??_main,w
  1182  010C  00FD               	movwf	_pos
  1183                           
  1184                           ;Main.c: 148:         }
  1185  010D  2912               	goto	l1947
  1186  010E                     l1945:
  1187                           
  1188                           ;Main.c: 150:         {;Main.c: 151:             pos = 14;
  1189  010E  300E               	movlw	14
  1190  010F  00BB               	movwf	??_main
  1191  0110  083B               	movf	??_main,w
  1192  0111  00FD               	movwf	_pos
  1193  0112                     l1947:
  1194                           
  1195                           ;Main.c: 154:         RB2 = flag_dc;
  1196  0112  1849               	btfsc	_flag_dc,0
  1197  0113  2915               	goto	u1281
  1198  0114  2919               	goto	u1280
  1199  0115                     u1281:
  1200  0115  1283               	bcf	3,5	;RP0=0, select bank0
  1201  0116  1303               	bcf	3,6	;RP1=0, select bank0
  1202  0117  1506               	bsf	6,2	;volatile
  1203  0118  291C               	goto	u1294
  1204  0119                     u1280:
  1205  0119  1283               	bcf	3,5	;RP0=0, select bank0
  1206  011A  1303               	bcf	3,6	;RP1=0, select bank0
  1207  011B  1106               	bcf	6,2	;volatile
  1208  011C                     u1294:
  1209  011C                     l1949:
  1210                           
  1211                           ;Main.c: 156:         setPWM_DutyCycle(ADC_Read(0));
  1212  011C  3000               	movlw	0
  1213  011D  120A  118A  23E2  120A  118A  	fcall	_ADC_Read
  1214  0122  1283               	bcf	3,5	;RP0=0, select bank0
  1215  0123  1303               	bcf	3,6	;RP1=0, select bank0
  1216  0124  0829               	movf	?_ADC_Read+1,w
  1217  0125  00AF               	movwf	setPWM_DutyCycle@DC+1
  1218  0126  0828               	movf	?_ADC_Read,w
  1219  0127  00AE               	movwf	setPWM_DutyCycle@DC
  1220  0128  120A  118A  260D  120A  118A  	fcall	_setPWM_DutyCycle
  1221  012D  28B5               	goto	l1925
  1222  012E  120A  118A  2812   	ljmp	start
  1223  0131                     __end_of_main:
  1224                           
  1225                           	psect	text1
  1226  060D                     __ptext1:	
  1227 ;; *************** function _setPWM_DutyCycle *****************
  1228 ;; Defined at:
  1229 ;;		line 383 in file "Main.c"
  1230 ;; Parameters:    Size  Location     Type
  1231 ;;  DC              2   14[BANK0 ] unsigned int 
  1232 ;; Auto vars:     Size  Location     Type
  1233 ;;		None
  1234 ;; Return value:  Size  Location     Type
  1235 ;;                  1    wreg      void 
  1236 ;; Registers used:
  1237 ;;		wreg, status,2, status,0
  1238 ;; Tracked objects:
  1239 ;;		On entry : 0/0
  1240 ;;		On exit  : 0/0
  1241 ;;		Unchanged: 0/0
  1242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1243 ;;      Params:         0       2       0       0       0
  1244 ;;      Locals:         0       0       0       0       0
  1245 ;;      Temps:          0       2       0       0       0
  1246 ;;      Totals:         0       4       0       0       0
  1247 ;;Total ram usage:        4 bytes
  1248 ;; Hardware stack levels used:    1
  1249 ;; Hardware stack levels required when called:    3
  1250 ;; This function calls:
  1251 ;;		Nothing
  1252 ;; This function is called by:
  1253 ;;		_main
  1254 ;; This function uses a non-reentrant model
  1255 ;;
  1256                           
  1257                           
  1258                           ;psect for function _setPWM_DutyCycle
  1259  060D                     _setPWM_DutyCycle:
  1260  060D                     l1815:	
  1261                           ;incstack = 0
  1262                           ; Regs used in _setPWM_DutyCycle: [wreg+status,2+status,0]
  1263                           
  1264                           
  1265                           ;Main.c: 383: void setPWM_DutyCycle(uint16_t DC);Main.c: 384: {;Main.c: 388:     CCP1Y =
      +                           DC & (1 << 0);
  1266  060D  1283               	bcf	3,5	;RP0=0, select bank0
  1267  060E  1303               	bcf	3,6	;RP1=0, select bank0
  1268  060F  182E               	btfsc	setPWM_DutyCycle@DC,0
  1269  0610  2E12               	goto	u1101
  1270  0611  2E16               	goto	u1100
  1271  0612                     u1101:
  1272  0612  1283               	bcf	3,5	;RP0=0, select bank0
  1273  0613  1303               	bcf	3,6	;RP1=0, select bank0
  1274  0614  1617               	bsf	23,4	;volatile
  1275  0615  2E19               	goto	u1114
  1276  0616                     u1100:
  1277  0616  1283               	bcf	3,5	;RP0=0, select bank0
  1278  0617  1303               	bcf	3,6	;RP1=0, select bank0
  1279  0618  1217               	bcf	23,4	;volatile
  1280  0619                     u1114:
  1281                           
  1282                           ;Main.c: 389:     CCP1X = DC & (1 << 1);
  1283  0619  1297               	bcf	23,5	;volatile
  1284  061A                     l1817:
  1285                           
  1286                           ;Main.c: 391:     CCPR1L = DC >> 2;
  1287  061A  082F               	movf	setPWM_DutyCycle@DC+1,w
  1288  061B  00B1               	movwf	??_setPWM_DutyCycle+1
  1289  061C  082E               	movf	setPWM_DutyCycle@DC,w
  1290  061D  00B0               	movwf	??_setPWM_DutyCycle
  1291  061E  1003               	clrc
  1292  061F  0CB1               	rrf	??_setPWM_DutyCycle+1,f
  1293  0620  0CB0               	rrf	??_setPWM_DutyCycle,f
  1294  0621  1003               	clrc
  1295  0622  0CB1               	rrf	??_setPWM_DutyCycle+1,f
  1296  0623  0CB0               	rrf	??_setPWM_DutyCycle,f
  1297  0624  0830               	movf	??_setPWM_DutyCycle,w
  1298  0625  0095               	movwf	21	;volatile
  1299  0626                     l366:
  1300  0626  0008               	return
  1301  0627                     __end_of_setPWM_DutyCycle:
  1302                           
  1303                           	psect	text2
  1304  04C5                     __ptext2:	
  1305 ;; *************** function _init_PWM *****************
  1306 ;; Defined at:
  1307 ;;		line 352 in file "Main.c"
  1308 ;; Parameters:    Size  Location     Type
  1309 ;;		None
  1310 ;; Auto vars:     Size  Location     Type
  1311 ;;		None
  1312 ;; Return value:  Size  Location     Type
  1313 ;;                  1    wreg      void 
  1314 ;; Registers used:
  1315 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1316 ;; Tracked objects:
  1317 ;;		On entry : 0/0
  1318 ;;		On exit  : 0/0
  1319 ;;		Unchanged: 0/0
  1320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1321 ;;      Params:         0       0       0       0       0
  1322 ;;      Locals:         0       0       0       0       0
  1323 ;;      Temps:          0       0       0       0       0
  1324 ;;      Totals:         0       0       0       0       0
  1325 ;;Total ram usage:        0 bytes
  1326 ;; Hardware stack levels used:    1
  1327 ;; Hardware stack levels required when called:    3
  1328 ;; This function calls:
  1329 ;;		Nothing
  1330 ;; This function is called by:
  1331 ;;		_main
  1332 ;; This function uses a non-reentrant model
  1333 ;;
  1334                           
  1335                           
  1336                           ;psect for function _init_PWM
  1337  04C5                     _init_PWM:
  1338  04C5                     l1725:	
  1339                           ;incstack = 0
  1340                           ; Regs used in _init_PWM: [wreg-fsr0h+status,2+status,0]
  1341                           
  1342                           
  1343                           ;Main.c: 355:     CCP1M2 = 1;
  1344  04C5  1283               	bcf	3,5	;RP0=0, select bank0
  1345  04C6  1303               	bcf	3,6	;RP1=0, select bank0
  1346  04C7  1517               	bsf	23,2	;volatile
  1347                           
  1348                           ;Main.c: 356:     CCP1M3 = 1;
  1349  04C8  1597               	bsf	23,3	;volatile
  1350                           
  1351                           ;Main.c: 358:     TRISC2 = 0;
  1352  04C9  1683               	bsf	3,5	;RP0=1, select bank1
  1353  04CA  1303               	bcf	3,6	;RP1=0, select bank1
  1354  04CB  1107               	bcf	7,2	;volatile
  1355                           
  1356                           ;Main.c: 360:     switch (1)
  1357  04CC  2CDB               	goto	l1727
  1358  04CD                     l359:	
  1359                           ;Main.c: 361:     {;Main.c: 362:     case 1:
  1360                           
  1361                           
  1362                           ;Main.c: 363:     {;Main.c: 364:         T2CKPS0 = 0;
  1363  04CD  1283               	bcf	3,5	;RP0=0, select bank0
  1364  04CE  1303               	bcf	3,6	;RP1=0, select bank0
  1365  04CF  1012               	bcf	18,0	;volatile
  1366                           
  1367                           ;Main.c: 365:         T2CKPS1 = 0;
  1368  04D0  1092               	bcf	18,1	;volatile
  1369                           
  1370                           ;Main.c: 366:         break;
  1371  04D1  2CEB               	goto	l360
  1372  04D2                     l361:	
  1373                           ;Main.c: 367:     };Main.c: 368:     case 4:
  1374                           
  1375                           
  1376                           ;Main.c: 369:     {;Main.c: 370:         T2CKPS0 = 1;
  1377  04D2  1283               	bcf	3,5	;RP0=0, select bank0
  1378  04D3  1303               	bcf	3,6	;RP1=0, select bank0
  1379  04D4  1412               	bsf	18,0	;volatile
  1380                           
  1381                           ;Main.c: 371:         T2CKPS1 = 0;
  1382  04D5  1092               	bcf	18,1	;volatile
  1383                           
  1384                           ;Main.c: 372:         break;
  1385  04D6  2CEB               	goto	l360
  1386  04D7                     l362:	
  1387                           ;Main.c: 373:     };Main.c: 374:     case 16:
  1388                           
  1389                           
  1390                           ;Main.c: 375:         T2CKPS1 = 1;
  1391  04D7  1283               	bcf	3,5	;RP0=0, select bank0
  1392  04D8  1303               	bcf	3,6	;RP1=0, select bank0
  1393  04D9  1492               	bsf	18,1	;volatile
  1394                           
  1395                           ;Main.c: 376:     }
  1396  04DA  2CEB               	goto	l360
  1397  04DB                     l1727:
  1398                           
  1399                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1400                           ; Switch size 1, requested type "simple"
  1401                           ; Number of cases is 1, Range of values is 0 to 0
  1402                           ; switch strategies available:
  1403                           ; Name         Instructions Cycles
  1404                           ; simple_byte            4     3 (average)
  1405                           ; direct_byte           11     8 (fixed)
  1406                           ; jumptable            260     6 (fixed)
  1407                           ;	Chosen strategy is simple_byte
  1408  04DB  3000               	movlw	0
  1409  04DC  3A00               	xorlw	0	; case 0
  1410  04DD  1903               	skipnz
  1411  04DE  2CE0               	goto	l2093
  1412  04DF  2CEB               	goto	l360
  1413  04E0                     l2093:
  1414                           
  1415                           ; Switch size 1, requested type "simple"
  1416                           ; Number of cases is 3, Range of values is 1 to 16
  1417                           ; switch strategies available:
  1418                           ; Name         Instructions Cycles
  1419                           ; simple_byte           10     6 (average)
  1420                           ; direct_byte           59    11 (fixed)
  1421                           ; jumptable            263     9 (fixed)
  1422                           ;	Chosen strategy is simple_byte
  1423  04E0  3001               	movlw	1
  1424  04E1  3A01               	xorlw	1	; case 1
  1425  04E2  1903               	skipnz
  1426  04E3  2CCD               	goto	l359
  1427  04E4  3A05               	xorlw	5	; case 4
  1428  04E5  1903               	skipnz
  1429  04E6  2CD2               	goto	l361
  1430  04E7  3A14               	xorlw	20	; case 16
  1431  04E8  1903               	skipnz
  1432  04E9  2CD7               	goto	l362
  1433  04EA  2CEB               	goto	l360
  1434  04EB                     l360:
  1435                           
  1436                           ;Main.c: 377:     TMR2ON = 1;
  1437  04EB  1283               	bcf	3,5	;RP0=0, select bank0
  1438  04EC  1512               	bsf	18,2	;volatile
  1439  04ED                     l1729:
  1440                           
  1441                           ;Main.c: 379:     PR2 = ((float)(20000000 / 3950)) / (4 * 1) - 1;
  1442  04ED  30F0               	movlw	240
  1443  04EE  1683               	bsf	3,5	;RP0=1, select bank1
  1444  04EF  1303               	bcf	3,6	;RP1=0, select bank1
  1445  04F0  0092               	movwf	18	;volatile
  1446  04F1                     l363:
  1447  04F1  0008               	return
  1448  04F2                     __end_of_init_PWM:
  1449                           
  1450                           	psect	text3
  1451  05D7                     __ptext3:	
  1452 ;; *************** function _config_UART *****************
  1453 ;; Defined at:
  1454 ;;		line 416 in file "Main.c"
  1455 ;; Parameters:    Size  Location     Type
  1456 ;;		None
  1457 ;; Auto vars:     Size  Location     Type
  1458 ;;		None
  1459 ;; Return value:  Size  Location     Type
  1460 ;;                  1    wreg      void 
  1461 ;; Registers used:
  1462 ;;		wreg
  1463 ;; Tracked objects:
  1464 ;;		On entry : 0/0
  1465 ;;		On exit  : 0/0
  1466 ;;		Unchanged: 0/0
  1467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1468 ;;      Params:         0       0       0       0       0
  1469 ;;      Locals:         0       0       0       0       0
  1470 ;;      Temps:          0       0       0       0       0
  1471 ;;      Totals:         0       0       0       0       0
  1472 ;;Total ram usage:        0 bytes
  1473 ;; Hardware stack levels used:    1
  1474 ;; Hardware stack levels required when called:    3
  1475 ;; This function calls:
  1476 ;;		Nothing
  1477 ;; This function is called by:
  1478 ;;		_main
  1479 ;; This function uses a non-reentrant model
  1480 ;;
  1481                           
  1482                           
  1483                           ;psect for function _config_UART
  1484  05D7                     _config_UART:
  1485  05D7                     l1737:	
  1486                           ;incstack = 0
  1487                           ; Regs used in _config_UART: [wreg]
  1488                           
  1489                           
  1490                           ;Main.c: 419:     BRGH = 1;
  1491  05D7  1683               	bsf	3,5	;RP0=1, select bank1
  1492  05D8  1303               	bcf	3,6	;RP1=0, select bank1
  1493  05D9  1518               	bsf	24,2	;volatile
  1494  05DA                     l1739:
  1495                           
  1496                           ;Main.c: 420:     SPBRG = 129;
  1497  05DA  3081               	movlw	129
  1498  05DB  0099               	movwf	25	;volatile
  1499  05DC                     l1741:
  1500                           
  1501                           ;Main.c: 422:     SYNC = 0;
  1502  05DC  1218               	bcf	24,4	;volatile
  1503  05DD                     l1743:
  1504                           
  1505                           ;Main.c: 423:     SPEN = 1;
  1506  05DD  1283               	bcf	3,5	;RP0=0, select bank0
  1507  05DE  1303               	bcf	3,6	;RP1=0, select bank0
  1508  05DF  1798               	bsf	24,7	;volatile
  1509  05E0                     l1745:
  1510                           
  1511                           ;Main.c: 425:     TRISC6 = 1;
  1512  05E0  1683               	bsf	3,5	;RP0=1, select bank1
  1513  05E1  1303               	bcf	3,6	;RP1=0, select bank1
  1514  05E2  1707               	bsf	7,6	;volatile
  1515  05E3                     l1747:
  1516                           
  1517                           ;Main.c: 426:     TRISC7 = 1;
  1518  05E3  1787               	bsf	7,7	;volatile
  1519  05E4                     l1749:
  1520                           
  1521                           ;Main.c: 428:     TXEN = 1;
  1522  05E4  1698               	bsf	24,5	;volatile
  1523  05E5                     l1751:
  1524                           
  1525                           ;Main.c: 429:     CREN = 1;
  1526  05E5  1283               	bcf	3,5	;RP0=0, select bank0
  1527  05E6  1303               	bcf	3,6	;RP1=0, select bank0
  1528  05E7  1618               	bsf	24,4	;volatile
  1529  05E8                     l1753:
  1530                           
  1531                           ;Main.c: 432:     RCIE = 1;
  1532  05E8  1683               	bsf	3,5	;RP0=1, select bank1
  1533  05E9  1303               	bcf	3,6	;RP1=0, select bank1
  1534  05EA  168C               	bsf	12,5	;volatile
  1535  05EB                     l1755:
  1536                           
  1537                           ;Main.c: 433:     PEIE = 1;
  1538  05EB  170B               	bsf	11,6	;volatile
  1539  05EC                     l1757:
  1540                           
  1541                           ;Main.c: 434:     GIE = 1;
  1542  05EC  178B               	bsf	11,7	;volatile
  1543  05ED                     l1759:
  1544                           
  1545                           ;Main.c: 436:     TX9 = 0;
  1546  05ED  1318               	bcf	24,6	;volatile
  1547  05EE                     l1761:
  1548                           
  1549                           ;Main.c: 437:     RX9 = 0;
  1550  05EE  1283               	bcf	3,5	;RP0=0, select bank0
  1551  05EF  1303               	bcf	3,6	;RP1=0, select bank0
  1552  05F0  1318               	bcf	24,6	;volatile
  1553  05F1                     l384:
  1554  05F1  0008               	return
  1555  05F2                     __end_of_config_UART:
  1556                           
  1557                           	psect	text4
  1558  06B5                     __ptext4:	
  1559 ;; *************** function _Servo_Init *****************
  1560 ;; Defined at:
  1561 ;;		line 258 in file "Main.c"
  1562 ;; Parameters:    Size  Location     Type
  1563 ;;		None
  1564 ;; Auto vars:     Size  Location     Type
  1565 ;;		None
  1566 ;; Return value:  Size  Location     Type
  1567 ;;                  1    wreg      void 
  1568 ;; Registers used:
  1569 ;;		None
  1570 ;; Tracked objects:
  1571 ;;		On entry : 0/0
  1572 ;;		On exit  : 0/0
  1573 ;;		Unchanged: 0/0
  1574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1575 ;;      Params:         0       0       0       0       0
  1576 ;;      Locals:         0       0       0       0       0
  1577 ;;      Temps:          0       0       0       0       0
  1578 ;;      Totals:         0       0       0       0       0
  1579 ;;Total ram usage:        0 bytes
  1580 ;; Hardware stack levels used:    1
  1581 ;; Hardware stack levels required when called:    3
  1582 ;; This function calls:
  1583 ;;		Nothing
  1584 ;; This function is called by:
  1585 ;;		_main
  1586 ;; This function uses a non-reentrant model
  1587 ;;
  1588                           
  1589                           
  1590                           ;psect for function _Servo_Init
  1591  06B5                     _Servo_Init:
  1592  06B5                     l1721:	
  1593                           ;incstack = 0
  1594                           ; Regs used in _Servo_Init: []
  1595                           
  1596                           
  1597                           ;Main.c: 261:     PSA = 0;
  1598  06B5  1683               	bsf	3,5	;RP0=1, select bank1
  1599  06B6  1303               	bcf	3,6	;RP1=0, select bank1
  1600  06B7  1181               	bcf	1,3	;volatile
  1601                           
  1602                           ;Main.c: 263:     PS2 = 0;
  1603  06B8  1101               	bcf	1,2	;volatile
  1604                           
  1605                           ;Main.c: 264:     PS1 = 0;
  1606  06B9  1081               	bcf	1,1	;volatile
  1607                           
  1608                           ;Main.c: 265:     PS0 = 0;
  1609  06BA  1001               	bcf	1,0	;volatile
  1610                           
  1611                           ;Main.c: 267:     T0CS = 0;
  1612  06BB  1281               	bcf	1,5	;volatile
  1613                           
  1614                           ;Main.c: 269:     GIE = 1;
  1615  06BC  178B               	bsf	11,7	;volatile
  1616                           
  1617                           ;Main.c: 270:     T0IE = 1;
  1618  06BD  168B               	bsf	11,5	;volatile
  1619                           
  1620                           ;Main.c: 271:     T0IF = 0;
  1621  06BE  110B               	bcf	11,2	;volatile
  1622  06BF                     l336:
  1623  06BF  0008               	return
  1624  06C0                     __end_of_Servo_Init:
  1625                           
  1626                           	psect	text5
  1627  04F2                     __ptext5:	
  1628 ;; *************** function _LCD_Write_String *****************
  1629 ;; Defined at:
  1630 ;;		line 106 in file "I2C_LCD.c"
  1631 ;; Parameters:    Size  Location     Type
  1632 ;;  Str             1    wreg     PTR unsigned char 
  1633 ;;		 -> STR_3(16), STR_2(17), STR_1(17), 
  1634 ;; Auto vars:     Size  Location     Type
  1635 ;;  Str             1   16[BANK0 ] PTR unsigned char 
  1636 ;;		 -> STR_3(16), STR_2(17), STR_1(17), 
  1637 ;;  i               2   14[BANK0 ] int 
  1638 ;; Return value:  Size  Location     Type
  1639 ;;                  1    wreg      void 
  1640 ;; Registers used:
  1641 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1642 ;; Tracked objects:
  1643 ;;		On entry : 0/0
  1644 ;;		On exit  : 0/0
  1645 ;;		Unchanged: 0/0
  1646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1647 ;;      Params:         0       0       0       0       0
  1648 ;;      Locals:         0       3       0       0       0
  1649 ;;      Temps:          0       0       0       0       0
  1650 ;;      Totals:         0       3       0       0       0
  1651 ;;Total ram usage:        3 bytes
  1652 ;; Hardware stack levels used:    1
  1653 ;; Hardware stack levels required when called:    8
  1654 ;; This function calls:
  1655 ;;		_LCD_Write_Char
  1656 ;; This function is called by:
  1657 ;;		_main
  1658 ;; This function uses a non-reentrant model
  1659 ;;
  1660                           
  1661                           
  1662                           ;psect for function _LCD_Write_String
  1663  04F2                     _LCD_Write_String:
  1664                           
  1665                           ;incstack = 0
  1666 ;; hardware stack exceeded
  1667                           ; Regs used in _LCD_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1668                           ;LCD_Write_String@Str stored from wreg
  1669  04F2  1283               	bcf	3,5	;RP0=0, select bank0
  1670  04F3  1303               	bcf	3,6	;RP1=0, select bank0
  1671  04F4  00B0               	movwf	LCD_Write_String@Str
  1672  04F5                     l1709:
  1673                           
  1674                           ;I2C_LCD.c: 106: void LCD_Write_String(char *Str);I2C_LCD.c: 107: {;I2C_LCD.c: 108:   fo
      +                          r (int i = 0; Str[i] != '\0'; i++)
  1675  04F5  01AE               	clrf	LCD_Write_String@i
  1676  04F6  01AF               	clrf	LCD_Write_String@i+1
  1677  04F7  2D0D               	goto	l1715
  1678  04F8                     l1711:
  1679                           
  1680                           ;I2C_LCD.c: 109:     LCD_Write_Char(Str[i]);
  1681  04F8  082E               	movf	LCD_Write_String@i,w
  1682  04F9  0730               	addwf	LCD_Write_String@Str,w
  1683  04FA  0084               	movwf	4
  1684  04FB  120A  118A  2486  120A  118A  	fcall	stringdir
  1685  0500  120A  118A  253D  120A  118A  	fcall	_LCD_Write_Char
  1686  0505                     l1713:
  1687  0505  3001               	movlw	1
  1688  0506  1283               	bcf	3,5	;RP0=0, select bank0
  1689  0507  1303               	bcf	3,6	;RP1=0, select bank0
  1690  0508  07AE               	addwf	LCD_Write_String@i,f
  1691  0509  1803               	skipnc
  1692  050A  0AAF               	incf	LCD_Write_String@i+1,f
  1693  050B  3000               	movlw	0
  1694  050C  07AF               	addwf	LCD_Write_String@i+1,f
  1695  050D                     l1715:
  1696  050D  082E               	movf	LCD_Write_String@i,w
  1697  050E  0730               	addwf	LCD_Write_String@Str,w
  1698  050F  0084               	movwf	4
  1699  0510  120A  118A  2486  120A  118A  	fcall	stringdir
  1700  0515  3A00               	xorlw	0
  1701  0516  1D03               	skipz
  1702  0517  2D19               	goto	u971
  1703  0518  2D1A               	goto	u970
  1704  0519                     u971:
  1705  0519  2CF8               	goto	l1711
  1706  051A                     u970:
  1707  051A                     l76:
  1708  051A  0008               	return
  1709  051B                     __end_of_LCD_Write_String:
  1710                           
  1711                           	psect	text6
  1712  02B5                     __ptext6:	
  1713 ;; *************** function _LCD_Write *****************
  1714 ;; Defined at:
  1715 ;;		line 275 in file "Main.c"
  1716 ;; Parameters:    Size  Location     Type
  1717 ;;  count_sp        1    wreg     unsigned char 
  1718 ;;  x               1   18[BANK0 ] unsigned char 
  1719 ;;  y               1   19[BANK0 ] unsigned char 
  1720 ;; Auto vars:     Size  Location     Type
  1721 ;;  count_sp        1   26[BANK0 ] unsigned char 
  1722 ;;  y_              1   25[BANK0 ] unsigned char 
  1723 ;;  c               1   24[BANK0 ] unsigned char 
  1724 ;;  i               1   23[BANK0 ] unsigned char 
  1725 ;; Return value:  Size  Location     Type
  1726 ;;                  1    wreg      void 
  1727 ;; Registers used:
  1728 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1729 ;; Tracked objects:
  1730 ;;		On entry : 0/0
  1731 ;;		On exit  : 0/0
  1732 ;;		Unchanged: 0/0
  1733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1734 ;;      Params:         0       2       0       0       0
  1735 ;;      Locals:         0       4       0       0       0
  1736 ;;      Temps:          0       3       0       0       0
  1737 ;;      Totals:         0       9       0       0       0
  1738 ;;Total ram usage:        9 bytes
  1739 ;; Hardware stack levels used:    1
  1740 ;; Hardware stack levels required when called:    9
  1741 ;; This function calls:
  1742 ;;		_LCD_Set_Cursor
  1743 ;;		_LCD_Write_Char
  1744 ;;		___awdiv
  1745 ;;		___awmod
  1746 ;; This function is called by:
  1747 ;;		_main
  1748 ;; This function uses a non-reentrant model
  1749 ;;
  1750                           
  1751                           
  1752                           ;psect for function _LCD_Write
  1753  02B5                     _LCD_Write:
  1754                           
  1755                           ;incstack = 0
  1756 ;; hardware stack exceeded
  1757                           ; Regs used in _LCD_Write: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1758                           ;LCD_Write@count_sp stored from wreg
  1759  02B5  1283               	bcf	3,5	;RP0=0, select bank0
  1760  02B6  1303               	bcf	3,6	;RP1=0, select bank0
  1761  02B7  00BA               	movwf	LCD_Write@count_sp
  1762  02B8                     l1771:
  1763                           
  1764                           ;Main.c: 275: void LCD_Write(uint8_t count_sp, uint8_t x, uint8_t y);Main.c: 276: {;Main
      +                          .c: 277:     char c;;Main.c: 278:     uint8_t y_ = y + 2;
  1765  02B8  0833               	movf	LCD_Write@y,w
  1766  02B9  3E02               	addlw	2
  1767  02BA  00B4               	movwf	??_LCD_Write
  1768  02BB  0834               	movf	??_LCD_Write,w
  1769  02BC  00B9               	movwf	LCD_Write@y_
  1770  02BD                     l1773:
  1771                           
  1772                           ;Main.c: 279:     uint8_t i;;Main.c: 280:     for (i = 2; i >= 0; i--)
  1773  02BD  3002               	movlw	2
  1774  02BE  00B4               	movwf	??_LCD_Write
  1775  02BF  0834               	movf	??_LCD_Write,w
  1776  02C0  00B7               	movwf	LCD_Write@i
  1777  02C1                     l1777:
  1778                           
  1779                           ;Main.c: 281:     {;Main.c: 282:         c = count_sp % 10 + 48;
  1780  02C1  300A               	movlw	10
  1781  02C2  00A8               	movwf	___awmod@divisor
  1782  02C3  3000               	movlw	0
  1783  02C4  00A9               	movwf	___awmod@divisor+1
  1784  02C5  083A               	movf	LCD_Write@count_sp,w
  1785  02C6  00B4               	movwf	??_LCD_Write
  1786  02C7  01B5               	clrf	??_LCD_Write+1
  1787  02C8  0834               	movf	??_LCD_Write,w
  1788  02C9  00AA               	movwf	___awmod@dividend
  1789  02CA  0835               	movf	??_LCD_Write+1,w
  1790  02CB  00AB               	movwf	___awmod@dividend+1
  1791  02CC  120A  118A  2387  120A  118A  	fcall	___awmod
  1792  02D1  1283               	bcf	3,5	;RP0=0, select bank0
  1793  02D2  1303               	bcf	3,6	;RP1=0, select bank0
  1794  02D3  0828               	movf	?___awmod,w
  1795  02D4  3E30               	addlw	48
  1796  02D5  00B6               	movwf	??_LCD_Write+2
  1797  02D6  0836               	movf	??_LCD_Write+2,w
  1798  02D7  00B8               	movwf	LCD_Write@c
  1799  02D8                     l1779:
  1800                           
  1801                           ;Main.c: 284:         LCD_Set_Cursor(x, y_);
  1802  02D8  0839               	movf	LCD_Write@y_,w
  1803  02D9  00B4               	movwf	??_LCD_Write
  1804  02DA  0834               	movf	??_LCD_Write,w
  1805  02DB  00AE               	movwf	LCD_Set_Cursor@COL
  1806  02DC  0832               	movf	LCD_Write@x,w
  1807  02DD  120A  118A  251B  120A  118A  	fcall	_LCD_Set_Cursor
  1808  02E2                     l1781:
  1809                           
  1810                           ;Main.c: 285:         LCD_Write_Char(c);
  1811  02E2  1283               	bcf	3,5	;RP0=0, select bank0
  1812  02E3  1303               	bcf	3,6	;RP1=0, select bank0
  1813  02E4  0838               	movf	LCD_Write@c,w
  1814  02E5  120A  118A  253D  120A  118A  	fcall	_LCD_Write_Char
  1815  02EA                     l1783:
  1816                           
  1817                           ;Main.c: 286:         y_--;
  1818  02EA  3001               	movlw	1
  1819  02EB  1283               	bcf	3,5	;RP0=0, select bank0
  1820  02EC  1303               	bcf	3,6	;RP1=0, select bank0
  1821  02ED  02B9               	subwf	LCD_Write@y_,f
  1822  02EE                     l1785:
  1823                           
  1824                           ;Main.c: 288:         count_sp /= 10;
  1825  02EE  300A               	movlw	10
  1826  02EF  00A8               	movwf	___awdiv@divisor
  1827  02F0  3000               	movlw	0
  1828  02F1  00A9               	movwf	___awdiv@divisor+1
  1829  02F2  083A               	movf	LCD_Write@count_sp,w
  1830  02F3  00B4               	movwf	??_LCD_Write
  1831  02F4  01B5               	clrf	??_LCD_Write+1
  1832  02F5  0834               	movf	??_LCD_Write,w
  1833  02F6  00AA               	movwf	___awdiv@dividend
  1834  02F7  0835               	movf	??_LCD_Write+1,w
  1835  02F8  00AB               	movwf	___awdiv@dividend+1
  1836  02F9  120A  118A  231E  120A  118A  	fcall	___awdiv
  1837  02FE  1283               	bcf	3,5	;RP0=0, select bank0
  1838  02FF  1303               	bcf	3,6	;RP1=0, select bank0
  1839  0300  0828               	movf	?___awdiv,w
  1840  0301  00B6               	movwf	??_LCD_Write+2
  1841  0302  0836               	movf	??_LCD_Write+2,w
  1842  0303  00BA               	movwf	LCD_Write@count_sp
  1843  0304                     l1787:
  1844                           
  1845                           ;Main.c: 289:         if (count_sp <= 0)
  1846  0304  083A               	movf	LCD_Write@count_sp,w
  1847  0305  1D03               	btfss	3,2
  1848  0306  2B08               	goto	u981
  1849  0307  2B09               	goto	u980
  1850  0308                     u981:
  1851  0308  2B0A               	goto	l1791
  1852  0309                     u980:
  1853  0309  2B17               	goto	l1797
  1854  030A                     l1791:
  1855                           
  1856                           ;Main.c: 293:     }
  1857  030A  3001               	movlw	1
  1858  030B  02B7               	subwf	LCD_Write@i,f
  1859  030C  2AC1               	goto	l1777
  1860  030D                     l1793:
  1861                           
  1862                           ;Main.c: 296:     {;Main.c: 297:         LCD_Write_Char(' ');
  1863  030D  3020               	movlw	32
  1864  030E  120A  118A  253D  120A  118A  	fcall	_LCD_Write_Char
  1865  0313                     l1795:
  1866                           
  1867                           ;Main.c: 298:         y_--;
  1868  0313  3001               	movlw	1
  1869  0314  1283               	bcf	3,5	;RP0=0, select bank0
  1870  0315  1303               	bcf	3,6	;RP1=0, select bank0
  1871  0316  02B9               	subwf	LCD_Write@y_,f
  1872  0317                     l1797:
  1873                           
  1874                           ;Main.c: 295:     while (y_ >= y)
  1875  0317  0833               	movf	LCD_Write@y,w
  1876  0318  0239               	subwf	LCD_Write@y_,w
  1877  0319  1803               	skipnc
  1878  031A  2B1C               	goto	u991
  1879  031B  2B1D               	goto	u990
  1880  031C                     u991:
  1881  031C  2B0D               	goto	l1793
  1882  031D                     u990:
  1883  031D                     l345:
  1884  031D  0008               	return
  1885  031E                     __end_of_LCD_Write:
  1886                           
  1887                           	psect	text7
  1888  0387                     __ptext7:	
  1889 ;; *************** function ___awmod *****************
  1890 ;; Defined at:
  1891 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\awmod.c"
  1892 ;; Parameters:    Size  Location     Type
  1893 ;;  divisor         2    8[BANK0 ] int 
  1894 ;;  dividend        2   10[BANK0 ] int 
  1895 ;; Auto vars:     Size  Location     Type
  1896 ;;  sign            1   14[BANK0 ] unsigned char 
  1897 ;;  counter         1   13[BANK0 ] unsigned char 
  1898 ;; Return value:  Size  Location     Type
  1899 ;;                  2    8[BANK0 ] int 
  1900 ;; Registers used:
  1901 ;;		wreg, status,2, status,0
  1902 ;; Tracked objects:
  1903 ;;		On entry : 0/0
  1904 ;;		On exit  : 0/0
  1905 ;;		Unchanged: 0/0
  1906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1907 ;;      Params:         0       4       0       0       0
  1908 ;;      Locals:         0       2       0       0       0
  1909 ;;      Temps:          0       1       0       0       0
  1910 ;;      Totals:         0       7       0       0       0
  1911 ;;Total ram usage:        7 bytes
  1912 ;; Hardware stack levels used:    1
  1913 ;; Hardware stack levels required when called:    3
  1914 ;; This function calls:
  1915 ;;		Nothing
  1916 ;; This function is called by:
  1917 ;;		_LCD_Write
  1918 ;; This function uses a non-reentrant model
  1919 ;;
  1920                           
  1921                           
  1922                           ;psect for function ___awmod
  1923  0387                     ___awmod:
  1924  0387                     l1635:	
  1925                           ;incstack = 0
  1926                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  1927                           
  1928  0387  1283               	bcf	3,5	;RP0=0, select bank0
  1929  0388  1303               	bcf	3,6	;RP1=0, select bank0
  1930  0389  01AE               	clrf	___awmod@sign
  1931  038A                     l1637:
  1932  038A  1FAB               	btfss	___awmod@dividend+1,7
  1933  038B  2B8D               	goto	u881
  1934  038C  2B8E               	goto	u880
  1935  038D                     u881:
  1936  038D  2B95               	goto	l1643
  1937  038E                     u880:
  1938  038E                     l1639:
  1939  038E  09AA               	comf	___awmod@dividend,f
  1940  038F  09AB               	comf	___awmod@dividend+1,f
  1941  0390  0AAA               	incf	___awmod@dividend,f
  1942  0391  1903               	skipnz
  1943  0392  0AAB               	incf	___awmod@dividend+1,f
  1944  0393                     l1641:
  1945  0393  01AE               	clrf	___awmod@sign
  1946  0394  0AAE               	incf	___awmod@sign,f
  1947  0395                     l1643:
  1948  0395  1FA9               	btfss	___awmod@divisor+1,7
  1949  0396  2B98               	goto	u891
  1950  0397  2B99               	goto	u890
  1951  0398                     u891:
  1952  0398  2B9E               	goto	l1647
  1953  0399                     u890:
  1954  0399                     l1645:
  1955  0399  09A8               	comf	___awmod@divisor,f
  1956  039A  09A9               	comf	___awmod@divisor+1,f
  1957  039B  0AA8               	incf	___awmod@divisor,f
  1958  039C  1903               	skipnz
  1959  039D  0AA9               	incf	___awmod@divisor+1,f
  1960  039E                     l1647:
  1961  039E  0828               	movf	___awmod@divisor,w
  1962  039F  0429               	iorwf	___awmod@divisor+1,w
  1963  03A0  1903               	btfsc	3,2
  1964  03A1  2BA3               	goto	u901
  1965  03A2  2BA4               	goto	u900
  1966  03A3                     u901:
  1967  03A3  2BD3               	goto	l1665
  1968  03A4                     u900:
  1969  03A4                     l1649:
  1970  03A4  01AD               	clrf	___awmod@counter
  1971  03A5  0AAD               	incf	___awmod@counter,f
  1972  03A6  2BB2               	goto	l1655
  1973  03A7                     l1651:
  1974  03A7  3001               	movlw	1
  1975  03A8                     u915:
  1976  03A8  1003               	clrc
  1977  03A9  0DA8               	rlf	___awmod@divisor,f
  1978  03AA  0DA9               	rlf	___awmod@divisor+1,f
  1979  03AB  3EFF               	addlw	-1
  1980  03AC  1D03               	skipz
  1981  03AD  2BA8               	goto	u915
  1982  03AE                     l1653:
  1983  03AE  3001               	movlw	1
  1984  03AF  00AC               	movwf	??___awmod
  1985  03B0  082C               	movf	??___awmod,w
  1986  03B1  07AD               	addwf	___awmod@counter,f
  1987  03B2                     l1655:
  1988  03B2  1FA9               	btfss	___awmod@divisor+1,7
  1989  03B3  2BB5               	goto	u921
  1990  03B4  2BB6               	goto	u920
  1991  03B5                     u921:
  1992  03B5  2BA7               	goto	l1651
  1993  03B6                     u920:
  1994  03B6                     l1657:
  1995  03B6  0829               	movf	___awmod@divisor+1,w
  1996  03B7  022B               	subwf	___awmod@dividend+1,w
  1997  03B8  1D03               	skipz
  1998  03B9  2BBC               	goto	u935
  1999  03BA  0828               	movf	___awmod@divisor,w
  2000  03BB  022A               	subwf	___awmod@dividend,w
  2001  03BC                     u935:
  2002  03BC  1C03               	skipc
  2003  03BD  2BBF               	goto	u931
  2004  03BE  2BC0               	goto	u930
  2005  03BF                     u931:
  2006  03BF  2BC6               	goto	l1661
  2007  03C0                     u930:
  2008  03C0                     l1659:
  2009  03C0  0828               	movf	___awmod@divisor,w
  2010  03C1  02AA               	subwf	___awmod@dividend,f
  2011  03C2  0829               	movf	___awmod@divisor+1,w
  2012  03C3  1C03               	skipc
  2013  03C4  03AB               	decf	___awmod@dividend+1,f
  2014  03C5  02AB               	subwf	___awmod@dividend+1,f
  2015  03C6                     l1661:
  2016  03C6  3001               	movlw	1
  2017  03C7                     u945:
  2018  03C7  1003               	clrc
  2019  03C8  0CA9               	rrf	___awmod@divisor+1,f
  2020  03C9  0CA8               	rrf	___awmod@divisor,f
  2021  03CA  3EFF               	addlw	-1
  2022  03CB  1D03               	skipz
  2023  03CC  2BC7               	goto	u945
  2024  03CD                     l1663:
  2025  03CD  3001               	movlw	1
  2026  03CE  02AD               	subwf	___awmod@counter,f
  2027  03CF  1D03               	btfss	3,2
  2028  03D0  2BD2               	goto	u951
  2029  03D1  2BD3               	goto	u950
  2030  03D2                     u951:
  2031  03D2  2BB6               	goto	l1657
  2032  03D3                     u950:
  2033  03D3                     l1665:
  2034  03D3  082E               	movf	___awmod@sign,w
  2035  03D4  1903               	btfsc	3,2
  2036  03D5  2BD7               	goto	u961
  2037  03D6  2BD8               	goto	u960
  2038  03D7                     u961:
  2039  03D7  2BDD               	goto	l1669
  2040  03D8                     u960:
  2041  03D8                     l1667:
  2042  03D8  09AA               	comf	___awmod@dividend,f
  2043  03D9  09AB               	comf	___awmod@dividend+1,f
  2044  03DA  0AAA               	incf	___awmod@dividend,f
  2045  03DB  1903               	skipnz
  2046  03DC  0AAB               	incf	___awmod@dividend+1,f
  2047  03DD                     l1669:
  2048  03DD  082B               	movf	___awmod@dividend+1,w
  2049  03DE  00A9               	movwf	?___awmod+1
  2050  03DF  082A               	movf	___awmod@dividend,w
  2051  03E0  00A8               	movwf	?___awmod
  2052  03E1                     l645:
  2053  03E1  0008               	return
  2054  03E2                     __end_of___awmod:
  2055                           
  2056                           	psect	text8
  2057  031E                     __ptext8:	
  2058 ;; *************** function ___awdiv *****************
  2059 ;; Defined at:
  2060 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\awdiv.c"
  2061 ;; Parameters:    Size  Location     Type
  2062 ;;  divisor         2    8[BANK0 ] int 
  2063 ;;  dividend        2   10[BANK0 ] int 
  2064 ;; Auto vars:     Size  Location     Type
  2065 ;;  quotient        2   15[BANK0 ] int 
  2066 ;;  sign            1   14[BANK0 ] unsigned char 
  2067 ;;  counter         1   13[BANK0 ] unsigned char 
  2068 ;; Return value:  Size  Location     Type
  2069 ;;                  2    8[BANK0 ] int 
  2070 ;; Registers used:
  2071 ;;		wreg, status,2, status,0
  2072 ;; Tracked objects:
  2073 ;;		On entry : 0/0
  2074 ;;		On exit  : 0/0
  2075 ;;		Unchanged: 0/0
  2076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2077 ;;      Params:         0       4       0       0       0
  2078 ;;      Locals:         0       4       0       0       0
  2079 ;;      Temps:          0       1       0       0       0
  2080 ;;      Totals:         0       9       0       0       0
  2081 ;;Total ram usage:        9 bytes
  2082 ;; Hardware stack levels used:    1
  2083 ;; Hardware stack levels required when called:    3
  2084 ;; This function calls:
  2085 ;;		Nothing
  2086 ;; This function is called by:
  2087 ;;		_LCD_Write
  2088 ;; This function uses a non-reentrant model
  2089 ;;
  2090                           
  2091                           
  2092                           ;psect for function ___awdiv
  2093  031E                     ___awdiv:
  2094  031E                     l1591:	
  2095                           ;incstack = 0
  2096                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  2097                           
  2098  031E  1283               	bcf	3,5	;RP0=0, select bank0
  2099  031F  1303               	bcf	3,6	;RP1=0, select bank0
  2100  0320  01AE               	clrf	___awdiv@sign
  2101  0321                     l1593:
  2102  0321  1FA9               	btfss	___awdiv@divisor+1,7
  2103  0322  2B24               	goto	u781
  2104  0323  2B25               	goto	u780
  2105  0324                     u781:
  2106  0324  2B2C               	goto	l1599
  2107  0325                     u780:
  2108  0325                     l1595:
  2109  0325  09A8               	comf	___awdiv@divisor,f
  2110  0326  09A9               	comf	___awdiv@divisor+1,f
  2111  0327  0AA8               	incf	___awdiv@divisor,f
  2112  0328  1903               	skipnz
  2113  0329  0AA9               	incf	___awdiv@divisor+1,f
  2114  032A                     l1597:
  2115  032A  01AE               	clrf	___awdiv@sign
  2116  032B  0AAE               	incf	___awdiv@sign,f
  2117  032C                     l1599:
  2118  032C  1FAB               	btfss	___awdiv@dividend+1,7
  2119  032D  2B2F               	goto	u791
  2120  032E  2B30               	goto	u790
  2121  032F                     u791:
  2122  032F  2B39               	goto	l1605
  2123  0330                     u790:
  2124  0330                     l1601:
  2125  0330  09AA               	comf	___awdiv@dividend,f
  2126  0331  09AB               	comf	___awdiv@dividend+1,f
  2127  0332  0AAA               	incf	___awdiv@dividend,f
  2128  0333  1903               	skipnz
  2129  0334  0AAB               	incf	___awdiv@dividend+1,f
  2130  0335                     l1603:
  2131  0335  3001               	movlw	1
  2132  0336  00AC               	movwf	??___awdiv
  2133  0337  082C               	movf	??___awdiv,w
  2134  0338  06AE               	xorwf	___awdiv@sign,f
  2135  0339                     l1605:
  2136  0339  01AF               	clrf	___awdiv@quotient
  2137  033A  01B0               	clrf	___awdiv@quotient+1
  2138  033B                     l1607:
  2139  033B  0828               	movf	___awdiv@divisor,w
  2140  033C  0429               	iorwf	___awdiv@divisor+1,w
  2141  033D  1903               	btfsc	3,2
  2142  033E  2B40               	goto	u801
  2143  033F  2B41               	goto	u800
  2144  0340                     u801:
  2145  0340  2B78               	goto	l1627
  2146  0341                     u800:
  2147  0341                     l1609:
  2148  0341  01AD               	clrf	___awdiv@counter
  2149  0342  0AAD               	incf	___awdiv@counter,f
  2150  0343  2B4F               	goto	l1615
  2151  0344                     l1611:
  2152  0344  3001               	movlw	1
  2153  0345                     u815:
  2154  0345  1003               	clrc
  2155  0346  0DA8               	rlf	___awdiv@divisor,f
  2156  0347  0DA9               	rlf	___awdiv@divisor+1,f
  2157  0348  3EFF               	addlw	-1
  2158  0349  1D03               	skipz
  2159  034A  2B45               	goto	u815
  2160  034B                     l1613:
  2161  034B  3001               	movlw	1
  2162  034C  00AC               	movwf	??___awdiv
  2163  034D  082C               	movf	??___awdiv,w
  2164  034E  07AD               	addwf	___awdiv@counter,f
  2165  034F                     l1615:
  2166  034F  1FA9               	btfss	___awdiv@divisor+1,7
  2167  0350  2B52               	goto	u821
  2168  0351  2B53               	goto	u820
  2169  0352                     u821:
  2170  0352  2B44               	goto	l1611
  2171  0353                     u820:
  2172  0353                     l1617:
  2173  0353  3001               	movlw	1
  2174  0354                     u835:
  2175  0354  1003               	clrc
  2176  0355  0DAF               	rlf	___awdiv@quotient,f
  2177  0356  0DB0               	rlf	___awdiv@quotient+1,f
  2178  0357  3EFF               	addlw	-1
  2179  0358  1D03               	skipz
  2180  0359  2B54               	goto	u835
  2181  035A  0829               	movf	___awdiv@divisor+1,w
  2182  035B  022B               	subwf	___awdiv@dividend+1,w
  2183  035C  1D03               	skipz
  2184  035D  2B60               	goto	u845
  2185  035E  0828               	movf	___awdiv@divisor,w
  2186  035F  022A               	subwf	___awdiv@dividend,w
  2187  0360                     u845:
  2188  0360  1C03               	skipc
  2189  0361  2B63               	goto	u841
  2190  0362  2B64               	goto	u840
  2191  0363                     u841:
  2192  0363  2B6B               	goto	l1623
  2193  0364                     u840:
  2194  0364                     l1619:
  2195  0364  0828               	movf	___awdiv@divisor,w
  2196  0365  02AA               	subwf	___awdiv@dividend,f
  2197  0366  0829               	movf	___awdiv@divisor+1,w
  2198  0367  1C03               	skipc
  2199  0368  03AB               	decf	___awdiv@dividend+1,f
  2200  0369  02AB               	subwf	___awdiv@dividend+1,f
  2201  036A                     l1621:
  2202  036A  142F               	bsf	___awdiv@quotient,0
  2203  036B                     l1623:
  2204  036B  3001               	movlw	1
  2205  036C                     u855:
  2206  036C  1003               	clrc
  2207  036D  0CA9               	rrf	___awdiv@divisor+1,f
  2208  036E  0CA8               	rrf	___awdiv@divisor,f
  2209  036F  3EFF               	addlw	-1
  2210  0370  1D03               	skipz
  2211  0371  2B6C               	goto	u855
  2212  0372                     l1625:
  2213  0372  3001               	movlw	1
  2214  0373  02AD               	subwf	___awdiv@counter,f
  2215  0374  1D03               	btfss	3,2
  2216  0375  2B77               	goto	u861
  2217  0376  2B78               	goto	u860
  2218  0377                     u861:
  2219  0377  2B53               	goto	l1617
  2220  0378                     u860:
  2221  0378                     l1627:
  2222  0378  082E               	movf	___awdiv@sign,w
  2223  0379  1903               	btfsc	3,2
  2224  037A  2B7C               	goto	u871
  2225  037B  2B7D               	goto	u870
  2226  037C                     u871:
  2227  037C  2B82               	goto	l1631
  2228  037D                     u870:
  2229  037D                     l1629:
  2230  037D  09AF               	comf	___awdiv@quotient,f
  2231  037E  09B0               	comf	___awdiv@quotient+1,f
  2232  037F  0AAF               	incf	___awdiv@quotient,f
  2233  0380  1903               	skipnz
  2234  0381  0AB0               	incf	___awdiv@quotient+1,f
  2235  0382                     l1631:
  2236  0382  0830               	movf	___awdiv@quotient+1,w
  2237  0383  00A9               	movwf	?___awdiv+1
  2238  0384  082F               	movf	___awdiv@quotient,w
  2239  0385  00A8               	movwf	?___awdiv
  2240  0386                     l632:
  2241  0386  0008               	return
  2242  0387                     __end_of___awdiv:
  2243                           
  2244                           	psect	text9
  2245  053D                     __ptext9:	
  2246 ;; *************** function _LCD_Write_Char *****************
  2247 ;; Defined at:
  2248 ;;		line 99 in file "I2C_LCD.c"
  2249 ;; Parameters:    Size  Location     Type
  2250 ;;  Data            1    wreg     unsigned char 
  2251 ;; Auto vars:     Size  Location     Type
  2252 ;;  Data            1   13[BANK0 ] unsigned char 
  2253 ;; Return value:  Size  Location     Type
  2254 ;;                  1    wreg      void 
  2255 ;; Registers used:
  2256 ;;		wreg, status,2, status,0, pclath, cstack
  2257 ;; Tracked objects:
  2258 ;;		On entry : 0/0
  2259 ;;		On exit  : 0/0
  2260 ;;		Unchanged: 0/0
  2261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2262 ;;      Params:         0       0       0       0       0
  2263 ;;      Locals:         0       1       0       0       0
  2264 ;;      Temps:          0       1       0       0       0
  2265 ;;      Totals:         0       2       0       0       0
  2266 ;;Total ram usage:        2 bytes
  2267 ;; Hardware stack levels used:    1
  2268 ;; Hardware stack levels required when called:    7
  2269 ;; This function calls:
  2270 ;;		_LCD_Write_4Bit
  2271 ;; This function is called by:
  2272 ;;		_LCD_Write_String
  2273 ;;		_LCD_Write
  2274 ;; This function uses a non-reentrant model
  2275 ;;
  2276                           
  2277                           
  2278                           ;psect for function _LCD_Write_Char
  2279  053D                     _LCD_Write_Char:
  2280                           
  2281                           ;incstack = 0
  2282 ;; hardware stack exceeded
  2283                           ; Regs used in _LCD_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  2284                           ;LCD_Write_Char@Data stored from wreg
  2285  053D  1283               	bcf	3,5	;RP0=0, select bank0
  2286  053E  1303               	bcf	3,6	;RP1=0, select bank0
  2287  053F  00AD               	movwf	LCD_Write_Char@Data
  2288  0540                     l1569:
  2289                           
  2290                           ;I2C_LCD.c: 99: void LCD_Write_Char(char Data);I2C_LCD.c: 100: {;I2C_LCD.c: 101:   RS = 
      +                          1;
  2291  0540  01C4               	clrf	_RS
  2292  0541  0AC4               	incf	_RS,f
  2293  0542                     l1571:
  2294                           
  2295                           ;I2C_LCD.c: 102:   LCD_Write_4Bit(Data & 0xF0);
  2296  0542  082D               	movf	LCD_Write_Char@Data,w
  2297  0543  39F0               	andlw	240
  2298  0544  120A  118A  255C  120A  118A  	fcall	_LCD_Write_4Bit
  2299                           
  2300                           ;I2C_LCD.c: 103:   LCD_Write_4Bit((Data << 4) & 0xF0);
  2301  0549  1283               	bcf	3,5	;RP0=0, select bank0
  2302  054A  1303               	bcf	3,6	;RP1=0, select bank0
  2303  054B  082D               	movf	LCD_Write_Char@Data,w
  2304  054C  00AC               	movwf	??_LCD_Write_Char
  2305  054D  3003               	movlw	3
  2306  054E                     u765:
  2307  054E  1003               	clrc
  2308  054F  0DAC               	rlf	??_LCD_Write_Char,f
  2309  0550  3EFF               	addlw	-1
  2310  0551  1D03               	skipz
  2311  0552  2D4E               	goto	u765
  2312  0553  1003               	clrc
  2313  0554  0D2C               	rlf	??_LCD_Write_Char,w
  2314  0555  39F0               	andlw	240
  2315  0556  120A  118A  255C  120A  118A  	fcall	_LCD_Write_4Bit
  2316  055B                     l70:
  2317  055B  0008               	return
  2318  055C                     __end_of_LCD_Write_Char:
  2319                           
  2320                           	psect	text10
  2321  051B                     __ptext10:	
  2322 ;; *************** function _LCD_Set_Cursor *****************
  2323 ;; Defined at:
  2324 ;;		line 112 in file "I2C_LCD.c"
  2325 ;; Parameters:    Size  Location     Type
  2326 ;;  ROW             1    wreg     unsigned char 
  2327 ;;  COL             1   14[BANK0 ] unsigned char 
  2328 ;; Auto vars:     Size  Location     Type
  2329 ;;  ROW             1   17[BANK0 ] unsigned char 
  2330 ;; Return value:  Size  Location     Type
  2331 ;;                  1    wreg      void 
  2332 ;; Registers used:
  2333 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2334 ;; Tracked objects:
  2335 ;;		On entry : 0/0
  2336 ;;		On exit  : 0/0
  2337 ;;		Unchanged: 0/0
  2338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2339 ;;      Params:         0       1       0       0       0
  2340 ;;      Locals:         0       1       0       0       0
  2341 ;;      Temps:          0       2       0       0       0
  2342 ;;      Totals:         0       4       0       0       0
  2343 ;;Total ram usage:        4 bytes
  2344 ;; Hardware stack levels used:    1
  2345 ;; Hardware stack levels required when called:    8
  2346 ;; This function calls:
  2347 ;;		_LCD_CMD
  2348 ;; This function is called by:
  2349 ;;		_main
  2350 ;;		_LCD_Write
  2351 ;; This function uses a non-reentrant model
  2352 ;;
  2353                           
  2354                           
  2355                           ;psect for function _LCD_Set_Cursor
  2356  051B                     _LCD_Set_Cursor:
  2357                           
  2358                           ;incstack = 0
  2359 ;; hardware stack exceeded
  2360                           ; Regs used in _LCD_Set_Cursor: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2361                           ;LCD_Set_Cursor@ROW stored from wreg
  2362  051B  1283               	bcf	3,5	;RP0=0, select bank0
  2363  051C  1303               	bcf	3,6	;RP1=0, select bank0
  2364  051D  00B1               	movwf	LCD_Set_Cursor@ROW
  2365  051E                     l1573:
  2366                           
  2367                           ;I2C_LCD.c: 112: void LCD_Set_Cursor(unsigned char ROW, unsigned char COL);I2C_LCD.c: 11
      +                          3: {;I2C_LCD.c: 114:   switch (ROW)
  2368  051E  2D2F               	goto	l1579
  2369  051F                     l1575:
  2370                           
  2371                           ;I2C_LCD.c: 117:     LCD_CMD(0xC0 + COL - 1);
  2372  051F  082E               	movf	LCD_Set_Cursor@COL,w
  2373  0520  3EBF               	addlw	191
  2374  0521  120A  118A  25B9  120A  118A  	fcall	_LCD_CMD
  2375                           
  2376                           ;I2C_LCD.c: 118:     break;
  2377  0526  2D3C               	goto	l83
  2378  0527                     l1577:
  2379                           
  2380                           ;I2C_LCD.c: 122:     LCD_CMD(0x80 + COL - 1);
  2381  0527  082E               	movf	LCD_Set_Cursor@COL,w
  2382  0528  3E7F               	addlw	127
  2383  0529  120A  118A  25B9  120A  118A  	fcall	_LCD_CMD
  2384                           
  2385                           ;I2C_LCD.c: 123:   }
  2386  052E  2D3C               	goto	l83
  2387  052F                     l1579:
  2388  052F  0831               	movf	LCD_Set_Cursor@ROW,w
  2389  0530  00AF               	movwf	??_LCD_Set_Cursor
  2390  0531  01B0               	clrf	??_LCD_Set_Cursor+1
  2391                           
  2392                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2393                           ; Switch size 1, requested type "simple"
  2394                           ; Number of cases is 1, Range of values is 0 to 0
  2395                           ; switch strategies available:
  2396                           ; Name         Instructions Cycles
  2397                           ; simple_byte            4     3 (average)
  2398                           ; direct_byte           11     8 (fixed)
  2399                           ; jumptable            260     6 (fixed)
  2400                           ;	Chosen strategy is simple_byte
  2401  0532  0830               	movf	??_LCD_Set_Cursor+1,w
  2402  0533  3A00               	xorlw	0	; case 0
  2403  0534  1903               	skipnz
  2404  0535  2D37               	goto	l2095
  2405  0536  2D27               	goto	l1577
  2406  0537                     l2095:
  2407                           
  2408                           ; Switch size 1, requested type "simple"
  2409                           ; Number of cases is 1, Range of values is 2 to 2
  2410                           ; switch strategies available:
  2411                           ; Name         Instructions Cycles
  2412                           ; simple_byte            4     3 (average)
  2413                           ; direct_byte           14    11 (fixed)
  2414                           ; jumptable            263     9 (fixed)
  2415                           ;	Chosen strategy is simple_byte
  2416  0537  082F               	movf	??_LCD_Set_Cursor,w
  2417  0538  3A02               	xorlw	2	; case 2
  2418  0539  1903               	skipnz
  2419  053A  2D1F               	goto	l1575
  2420  053B  2D27               	goto	l1577
  2421  053C                     l83:
  2422  053C  0008               	return
  2423  053D                     __end_of_LCD_Set_Cursor:
  2424                           
  2425                           	psect	text11
  2426  0208                     __ptext11:	
  2427 ;; *************** function _LCD_Init *****************
  2428 ;; Defined at:
  2429 ;;		line 52 in file "I2C_LCD.c"
  2430 ;; Parameters:    Size  Location     Type
  2431 ;;  I2C_Add         1    wreg     unsigned char 
  2432 ;; Auto vars:     Size  Location     Type
  2433 ;;  I2C_Add         1   17[BANK0 ] unsigned char 
  2434 ;; Return value:  Size  Location     Type
  2435 ;;                  1    wreg      void 
  2436 ;; Registers used:
  2437 ;;		wreg, status,2, status,0, pclath, cstack
  2438 ;; Tracked objects:
  2439 ;;		On entry : 0/0
  2440 ;;		On exit  : 0/0
  2441 ;;		Unchanged: 0/0
  2442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2443 ;;      Params:         0       0       0       0       0
  2444 ;;      Locals:         0       1       0       0       0
  2445 ;;      Temps:          0       3       0       0       0
  2446 ;;      Totals:         0       4       0       0       0
  2447 ;;Total ram usage:        4 bytes
  2448 ;; Hardware stack levels used:    1
  2449 ;; Hardware stack levels required when called:    8
  2450 ;; This function calls:
  2451 ;;		_IO_Expander_Write
  2452 ;;		_LCD_CMD
  2453 ;; This function is called by:
  2454 ;;		_main
  2455 ;; This function uses a non-reentrant model
  2456 ;;
  2457                           
  2458                           
  2459                           ;psect for function _LCD_Init
  2460  0208                     _LCD_Init:
  2461                           
  2462                           ;incstack = 0
  2463 ;; hardware stack exceeded
  2464                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
  2465                           ;LCD_Init@I2C_Add stored from wreg
  2466  0208  1283               	bcf	3,5	;RP0=0, select bank0
  2467  0209  1303               	bcf	3,6	;RP1=0, select bank0
  2468  020A  00B1               	movwf	LCD_Init@I2C_Add
  2469  020B                     l1683:
  2470                           
  2471                           ;I2C_LCD.c: 52: void LCD_Init(unsigned char I2C_Add);I2C_LCD.c: 53: {;I2C_LCD.c: 54:   i
      +                          2c_add = I2C_Add;
  2472  020B  0831               	movf	LCD_Init@I2C_Add,w
  2473  020C  00AE               	movwf	??_LCD_Init
  2474  020D  082E               	movf	??_LCD_Init,w
  2475  020E  00CC               	movwf	_i2c_add
  2476  020F                     l1685:
  2477                           
  2478                           ;I2C_LCD.c: 55:   IO_Expander_Write(0x00);
  2479  020F  3000               	movlw	0
  2480  0210  120A  118A  257B  120A  118A  	fcall	_IO_Expander_Write
  2481  0215                     l1687:
  2482                           
  2483                           ;I2C_LCD.c: 56:   _delay((unsigned long)((30)*(20000000/4000.0)));
  2484  0215  30C3               	movlw	195
  2485  0216  1283               	bcf	3,5	;RP0=0, select bank0
  2486  0217  1303               	bcf	3,6	;RP1=0, select bank0
  2487  0218  00AF               	movwf	??_LCD_Init+1
  2488  0219  30CC               	movlw	204
  2489  021A  00AE               	movwf	??_LCD_Init
  2490  021B                     u1437:
  2491  021B  0BAE               	decfsz	??_LCD_Init,f
  2492  021C  2A1B               	goto	u1437
  2493  021D  0BAF               	decfsz	??_LCD_Init+1,f
  2494  021E  2A1B               	goto	u1437
  2495  021F  0000               	nop
  2496                           
  2497                           ;I2C_LCD.c: 57:   LCD_CMD(0x03);
  2498  0220  3003               	movlw	3
  2499  0221  120A  118A  25B9  120A  118A  	fcall	_LCD_CMD
  2500  0226                     l1689:
  2501                           
  2502                           ;I2C_LCD.c: 58:   _delay((unsigned long)((5)*(20000000/4000.0)));
  2503  0226  3021               	movlw	33
  2504  0227  1283               	bcf	3,5	;RP0=0, select bank0
  2505  0228  1303               	bcf	3,6	;RP1=0, select bank0
  2506  0229  00AF               	movwf	??_LCD_Init+1
  2507  022A  3075               	movlw	117
  2508  022B  00AE               	movwf	??_LCD_Init
  2509  022C                     u1447:
  2510  022C  0BAE               	decfsz	??_LCD_Init,f
  2511  022D  2A2C               	goto	u1447
  2512  022E  0BAF               	decfsz	??_LCD_Init+1,f
  2513  022F  2A2C               	goto	u1447
  2514  0230  2A31               	nop2
  2515  0231                     l1691:
  2516                           
  2517                           ;I2C_LCD.c: 59:   LCD_CMD(0x03);
  2518  0231  3003               	movlw	3
  2519  0232  120A  118A  25B9  120A  118A  	fcall	_LCD_CMD
  2520                           
  2521                           ;I2C_LCD.c: 60:   _delay((unsigned long)((5)*(20000000/4000.0)));
  2522  0237  3021               	movlw	33
  2523  0238  1283               	bcf	3,5	;RP0=0, select bank0
  2524  0239  1303               	bcf	3,6	;RP1=0, select bank0
  2525  023A  00AF               	movwf	??_LCD_Init+1
  2526  023B  3075               	movlw	117
  2527  023C  00AE               	movwf	??_LCD_Init
  2528  023D                     u1457:
  2529  023D  0BAE               	decfsz	??_LCD_Init,f
  2530  023E  2A3D               	goto	u1457
  2531  023F  0BAF               	decfsz	??_LCD_Init+1,f
  2532  0240  2A3D               	goto	u1457
  2533  0241  2A42               	nop2
  2534  0242                     l1693:
  2535                           
  2536                           ;I2C_LCD.c: 61:   LCD_CMD(0x03);
  2537  0242  3003               	movlw	3
  2538  0243  120A  118A  25B9  120A  118A  	fcall	_LCD_CMD
  2539  0248                     l1695:
  2540                           
  2541                           ;I2C_LCD.c: 62:   _delay((unsigned long)((5)*(20000000/4000.0)));
  2542  0248  3021               	movlw	33
  2543  0249  1283               	bcf	3,5	;RP0=0, select bank0
  2544  024A  1303               	bcf	3,6	;RP1=0, select bank0
  2545  024B  00AF               	movwf	??_LCD_Init+1
  2546  024C  3075               	movlw	117
  2547  024D  00AE               	movwf	??_LCD_Init
  2548  024E                     u1467:
  2549  024E  0BAE               	decfsz	??_LCD_Init,f
  2550  024F  2A4E               	goto	u1467
  2551  0250  0BAF               	decfsz	??_LCD_Init+1,f
  2552  0251  2A4E               	goto	u1467
  2553  0252  2A53               	nop2
  2554                           
  2555                           ;I2C_LCD.c: 63:   LCD_CMD(0x02);
  2556  0253  3002               	movlw	2
  2557  0254  120A  118A  25B9  120A  118A  	fcall	_LCD_CMD
  2558  0259                     l1697:
  2559                           
  2560                           ;I2C_LCD.c: 64:   _delay((unsigned long)((5)*(20000000/4000.0)));
  2561  0259  3021               	movlw	33
  2562  025A  1283               	bcf	3,5	;RP0=0, select bank0
  2563  025B  1303               	bcf	3,6	;RP1=0, select bank0
  2564  025C  00AF               	movwf	??_LCD_Init+1
  2565  025D  3075               	movlw	117
  2566  025E  00AE               	movwf	??_LCD_Init
  2567  025F                     u1477:
  2568  025F  0BAE               	decfsz	??_LCD_Init,f
  2569  0260  2A5F               	goto	u1477
  2570  0261  0BAF               	decfsz	??_LCD_Init+1,f
  2571  0262  2A5F               	goto	u1477
  2572  0263  2A64               	nop2
  2573  0264                     l1699:
  2574                           
  2575                           ;I2C_LCD.c: 65:   LCD_CMD(0x20 | (2 << 2));
  2576  0264  3028               	movlw	40
  2577  0265  120A  118A  25B9  120A  118A  	fcall	_LCD_CMD
  2578                           
  2579                           ;I2C_LCD.c: 66:   _delay((unsigned long)((50)*(20000000/4000.0)));
  2580  026A  3002               	movlw	2
  2581  026B  1283               	bcf	3,5	;RP0=0, select bank0
  2582  026C  1303               	bcf	3,6	;RP1=0, select bank0
  2583  026D  00B0               	movwf	??_LCD_Init+2
  2584  026E  3045               	movlw	69
  2585  026F  00AF               	movwf	??_LCD_Init+1
  2586  0270  30A9               	movlw	169
  2587  0271  00AE               	movwf	??_LCD_Init
  2588  0272                     u1487:
  2589  0272  0BAE               	decfsz	??_LCD_Init,f
  2590  0273  2A72               	goto	u1487
  2591  0274  0BAF               	decfsz	??_LCD_Init+1,f
  2592  0275  2A72               	goto	u1487
  2593  0276  0BB0               	decfsz	??_LCD_Init+2,f
  2594  0277  2A72               	goto	u1487
  2595  0278                     l1701:
  2596                           
  2597                           ;I2C_LCD.c: 67:   LCD_CMD(0x0C);
  2598  0278  300C               	movlw	12
  2599  0279  120A  118A  25B9  120A  118A  	fcall	_LCD_CMD
  2600  027E                     l1703:
  2601                           
  2602                           ;I2C_LCD.c: 68:   _delay((unsigned long)((50)*(20000000/4000.0)));
  2603  027E  3002               	movlw	2
  2604  027F  1283               	bcf	3,5	;RP0=0, select bank0
  2605  0280  1303               	bcf	3,6	;RP1=0, select bank0
  2606  0281  00B0               	movwf	??_LCD_Init+2
  2607  0282  3045               	movlw	69
  2608  0283  00AF               	movwf	??_LCD_Init+1
  2609  0284  30A9               	movlw	169
  2610  0285  00AE               	movwf	??_LCD_Init
  2611  0286                     u1497:
  2612  0286  0BAE               	decfsz	??_LCD_Init,f
  2613  0287  2A86               	goto	u1497
  2614  0288  0BAF               	decfsz	??_LCD_Init+1,f
  2615  0289  2A86               	goto	u1497
  2616  028A  0BB0               	decfsz	??_LCD_Init+2,f
  2617  028B  2A86               	goto	u1497
  2618                           
  2619                           ;I2C_LCD.c: 69:   LCD_CMD(0x01);
  2620  028C  3001               	movlw	1
  2621  028D  120A  118A  25B9  120A  118A  	fcall	_LCD_CMD
  2622  0292                     l1705:
  2623                           
  2624                           ;I2C_LCD.c: 70:   _delay((unsigned long)((50)*(20000000/4000.0)));
  2625  0292  3002               	movlw	2
  2626  0293  1283               	bcf	3,5	;RP0=0, select bank0
  2627  0294  1303               	bcf	3,6	;RP1=0, select bank0
  2628  0295  00B0               	movwf	??_LCD_Init+2
  2629  0296  3045               	movlw	69
  2630  0297  00AF               	movwf	??_LCD_Init+1
  2631  0298  30A9               	movlw	169
  2632  0299  00AE               	movwf	??_LCD_Init
  2633  029A                     u1507:
  2634  029A  0BAE               	decfsz	??_LCD_Init,f
  2635  029B  2A9A               	goto	u1507
  2636  029C  0BAF               	decfsz	??_LCD_Init+1,f
  2637  029D  2A9A               	goto	u1507
  2638  029E  0BB0               	decfsz	??_LCD_Init+2,f
  2639  029F  2A9A               	goto	u1507
  2640  02A0                     l1707:
  2641                           
  2642                           ;I2C_LCD.c: 71:   LCD_CMD(0x04 | 0x02);
  2643  02A0  3006               	movlw	6
  2644  02A1  120A  118A  25B9  120A  118A  	fcall	_LCD_CMD
  2645                           
  2646                           ;I2C_LCD.c: 72:   _delay((unsigned long)((50)*(20000000/4000.0)));
  2647  02A6  3002               	movlw	2
  2648  02A7  1283               	bcf	3,5	;RP0=0, select bank0
  2649  02A8  1303               	bcf	3,6	;RP1=0, select bank0
  2650  02A9  00B0               	movwf	??_LCD_Init+2
  2651  02AA  3045               	movlw	69
  2652  02AB  00AF               	movwf	??_LCD_Init+1
  2653  02AC  30A9               	movlw	169
  2654  02AD  00AE               	movwf	??_LCD_Init
  2655  02AE                     u1517:
  2656  02AE  0BAE               	decfsz	??_LCD_Init,f
  2657  02AF  2AAE               	goto	u1517
  2658  02B0  0BAF               	decfsz	??_LCD_Init+1,f
  2659  02B1  2AAE               	goto	u1517
  2660  02B2  0BB0               	decfsz	??_LCD_Init+2,f
  2661  02B3  2AAE               	goto	u1517
  2662  02B4                     l58:
  2663  02B4  0008               	return
  2664  02B5                     __end_of_LCD_Init:
  2665                           
  2666                           	psect	text12
  2667  0673                     __ptext12:	
  2668 ;; *************** function _LCD_Clear *****************
  2669 ;; Defined at:
  2670 ;;		line 150 in file "I2C_LCD.c"
  2671 ;; Parameters:    Size  Location     Type
  2672 ;;		None
  2673 ;; Auto vars:     Size  Location     Type
  2674 ;;		None
  2675 ;; Return value:  Size  Location     Type
  2676 ;;                  1    wreg      void 
  2677 ;; Registers used:
  2678 ;;		wreg, status,2, status,0, pclath, cstack
  2679 ;; Tracked objects:
  2680 ;;		On entry : 0/0
  2681 ;;		On exit  : 0/0
  2682 ;;		Unchanged: 0/0
  2683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2684 ;;      Params:         0       0       0       0       0
  2685 ;;      Locals:         0       0       0       0       0
  2686 ;;      Temps:          0       1       0       0       0
  2687 ;;      Totals:         0       1       0       0       0
  2688 ;;Total ram usage:        1 bytes
  2689 ;; Hardware stack levels used:    1
  2690 ;; Hardware stack levels required when called:    8
  2691 ;; This function calls:
  2692 ;;		_LCD_CMD
  2693 ;; This function is called by:
  2694 ;;		_main
  2695 ;; This function uses a non-reentrant model
  2696 ;;
  2697                           
  2698                           
  2699                           ;psect for function _LCD_Clear
  2700  0673                     _LCD_Clear:
  2701  0673                     l1717:	
  2702                           ;incstack = 0
  2703 ;; hardware stack exceeded
  2704                           ; Regs used in _LCD_Clear: [wreg+status,2+status,0+pclath+cstack]
  2705                           
  2706                           
  2707                           ;I2C_LCD.c: 152:   LCD_CMD(0x01);
  2708  0673  3001               	movlw	1
  2709  0674  120A  118A  25B9  120A  118A  	fcall	_LCD_CMD
  2710  0679                     l1719:
  2711                           
  2712                           ;I2C_LCD.c: 153:   _delay((unsigned long)((40)*(20000000/4000000.0)));
  2713  0679  3041               	movlw	65
  2714  067A  1283               	bcf	3,5	;RP0=0, select bank0
  2715  067B  1303               	bcf	3,6	;RP1=0, select bank0
  2716  067C  00AE               	movwf	??_LCD_Clear
  2717  067D                     u1527:
  2718  067D  0BAE               	decfsz	??_LCD_Clear,f
  2719  067E  2E7D               	goto	u1527
  2720  067F  2E80               	nop2
  2721  0680                     l98:
  2722  0680  0008               	return
  2723  0681                     __end_of_LCD_Clear:
  2724                           
  2725                           	psect	text13
  2726  05B9                     __ptext13:	
  2727 ;; *************** function _LCD_CMD *****************
  2728 ;; Defined at:
  2729 ;;		line 92 in file "I2C_LCD.c"
  2730 ;; Parameters:    Size  Location     Type
  2731 ;;  CMD             1    wreg     unsigned char 
  2732 ;; Auto vars:     Size  Location     Type
  2733 ;;  CMD             1   13[BANK0 ] unsigned char 
  2734 ;; Return value:  Size  Location     Type
  2735 ;;                  1    wreg      void 
  2736 ;; Registers used:
  2737 ;;		wreg, status,2, status,0, pclath, cstack
  2738 ;; Tracked objects:
  2739 ;;		On entry : 0/0
  2740 ;;		On exit  : 0/0
  2741 ;;		Unchanged: 0/0
  2742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2743 ;;      Params:         0       0       0       0       0
  2744 ;;      Locals:         0       1       0       0       0
  2745 ;;      Temps:          0       1       0       0       0
  2746 ;;      Totals:         0       2       0       0       0
  2747 ;;Total ram usage:        2 bytes
  2748 ;; Hardware stack levels used:    1
  2749 ;; Hardware stack levels required when called:    7
  2750 ;; This function calls:
  2751 ;;		_LCD_Write_4Bit
  2752 ;; This function is called by:
  2753 ;;		_LCD_Init
  2754 ;;		_LCD_Set_Cursor
  2755 ;;		_LCD_Clear
  2756 ;;		_LCD_SL
  2757 ;;		_LCD_SR
  2758 ;; This function uses a non-reentrant model
  2759 ;;
  2760                           
  2761                           
  2762                           ;psect for function _LCD_CMD
  2763  05B9                     _LCD_CMD:
  2764                           
  2765                           ;incstack = 0
  2766 ;; hardware stack exceeded
  2767                           ; Regs used in _LCD_CMD: [wreg+status,2+status,0+pclath+cstack]
  2768                           ;LCD_CMD@CMD stored from wreg
  2769  05B9  1283               	bcf	3,5	;RP0=0, select bank0
  2770  05BA  1303               	bcf	3,6	;RP1=0, select bank0
  2771  05BB  00AD               	movwf	LCD_CMD@CMD
  2772  05BC                     l1563:
  2773                           
  2774                           ;I2C_LCD.c: 92: void LCD_CMD(unsigned char CMD);I2C_LCD.c: 93: {;I2C_LCD.c: 94:   RS = 0
      +                          ;
  2775  05BC  01C4               	clrf	_RS
  2776  05BD                     l1565:
  2777                           
  2778                           ;I2C_LCD.c: 95:   LCD_Write_4Bit(CMD & 0xF0);
  2779  05BD  082D               	movf	LCD_CMD@CMD,w
  2780  05BE  39F0               	andlw	240
  2781  05BF  120A  118A  255C  120A  118A  	fcall	_LCD_Write_4Bit
  2782  05C4                     l1567:
  2783                           
  2784                           ;I2C_LCD.c: 96:   LCD_Write_4Bit((CMD << 4) & 0xF0);
  2785  05C4  1283               	bcf	3,5	;RP0=0, select bank0
  2786  05C5  1303               	bcf	3,6	;RP1=0, select bank0
  2787  05C6  082D               	movf	LCD_CMD@CMD,w
  2788  05C7  00AC               	movwf	??_LCD_CMD
  2789  05C8  3003               	movlw	3
  2790  05C9                     u755:
  2791  05C9  1003               	clrc
  2792  05CA  0DAC               	rlf	??_LCD_CMD,f
  2793  05CB  3EFF               	addlw	-1
  2794  05CC  1D03               	skipz
  2795  05CD  2DC9               	goto	u755
  2796  05CE  1003               	clrc
  2797  05CF  0D2C               	rlf	??_LCD_CMD,w
  2798  05D0  39F0               	andlw	240
  2799  05D1  120A  118A  255C  120A  118A  	fcall	_LCD_Write_4Bit
  2800  05D6                     l67:
  2801  05D6  0008               	return
  2802  05D7                     __end_of_LCD_CMD:
  2803                           
  2804                           	psect	text14
  2805  055C                     __ptext14:	
  2806 ;; *************** function _LCD_Write_4Bit *****************
  2807 ;; Defined at:
  2808 ;;		line 83 in file "I2C_LCD.c"
  2809 ;; Parameters:    Size  Location     Type
  2810 ;;  Nibble          1    wreg     unsigned char 
  2811 ;; Auto vars:     Size  Location     Type
  2812 ;;  Nibble          1   11[BANK0 ] unsigned char 
  2813 ;; Return value:  Size  Location     Type
  2814 ;;                  1    wreg      void 
  2815 ;; Registers used:
  2816 ;;		wreg, status,2, status,0, pclath, cstack
  2817 ;; Tracked objects:
  2818 ;;		On entry : 0/0
  2819 ;;		On exit  : 0/0
  2820 ;;		Unchanged: 0/0
  2821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2822 ;;      Params:         0       0       0       0       0
  2823 ;;      Locals:         0       1       0       0       0
  2824 ;;      Temps:          0       1       0       0       0
  2825 ;;      Totals:         0       2       0       0       0
  2826 ;;Total ram usage:        2 bytes
  2827 ;; Hardware stack levels used:    1
  2828 ;; Hardware stack levels required when called:    6
  2829 ;; This function calls:
  2830 ;;		_IO_Expander_Write
  2831 ;; This function is called by:
  2832 ;;		_LCD_CMD
  2833 ;;		_LCD_Write_Char
  2834 ;; This function uses a non-reentrant model
  2835 ;;
  2836                           
  2837                           
  2838                           ;psect for function _LCD_Write_4Bit
  2839  055C                     _LCD_Write_4Bit:
  2840                           
  2841                           ;incstack = 0
  2842 ;; hardware stack exceeded
  2843                           ; Regs used in _LCD_Write_4Bit: [wreg+status,2+status,0+pclath+cstack]
  2844                           ;LCD_Write_4Bit@Nibble stored from wreg
  2845  055C  1283               	bcf	3,5	;RP0=0, select bank0
  2846  055D  1303               	bcf	3,6	;RP1=0, select bank0
  2847  055E  00AB               	movwf	LCD_Write_4Bit@Nibble
  2848  055F                     l1557:
  2849                           
  2850                           ;I2C_LCD.c: 83: void LCD_Write_4Bit(unsigned char Nibble);I2C_LCD.c: 84: {;I2C_LCD.c: 86
      +                          :   Nibble |= RS;
  2851  055F  0844               	movf	_RS,w
  2852  0560  00AA               	movwf	??_LCD_Write_4Bit
  2853  0561  082A               	movf	??_LCD_Write_4Bit,w
  2854  0562  04AB               	iorwf	LCD_Write_4Bit@Nibble,f
  2855  0563                     l1559:
  2856                           
  2857                           ;I2C_LCD.c: 87:   IO_Expander_Write(Nibble | 0x04);
  2858  0563  082B               	movf	LCD_Write_4Bit@Nibble,w
  2859  0564  3804               	iorlw	4
  2860  0565  120A  118A  257B  120A  118A  	fcall	_IO_Expander_Write
  2861  056A                     l1561:
  2862                           
  2863                           ;I2C_LCD.c: 88:   IO_Expander_Write(Nibble & 0xFB);
  2864  056A  1283               	bcf	3,5	;RP0=0, select bank0
  2865  056B  1303               	bcf	3,6	;RP1=0, select bank0
  2866  056C  082B               	movf	LCD_Write_4Bit@Nibble,w
  2867  056D  39FB               	andlw	251
  2868  056E  120A  118A  257B  120A  118A  	fcall	_IO_Expander_Write
  2869                           
  2870                           ;I2C_LCD.c: 89:   _delay((unsigned long)((50)*(20000000/4000000.0)));
  2871  0573  3052               	movlw	82
  2872  0574  1283               	bcf	3,5	;RP0=0, select bank0
  2873  0575  1303               	bcf	3,6	;RP1=0, select bank0
  2874  0576  00AA               	movwf	??_LCD_Write_4Bit
  2875  0577                     u1537:
  2876  0577  0BAA               	decfsz	??_LCD_Write_4Bit,f
  2877  0578  2D77               	goto	u1537
  2878  0579  0000               	nop
  2879  057A                     l64:
  2880  057A  0008               	return
  2881  057B                     __end_of_LCD_Write_4Bit:
  2882                           
  2883                           	psect	text15
  2884  057B                     __ptext15:	
  2885 ;; *************** function _IO_Expander_Write *****************
  2886 ;; Defined at:
  2887 ;;		line 75 in file "I2C_LCD.c"
  2888 ;; Parameters:    Size  Location     Type
  2889 ;;  Data            1    wreg     unsigned char 
  2890 ;; Auto vars:     Size  Location     Type
  2891 ;;  Data            1    9[BANK0 ] unsigned char 
  2892 ;; Return value:  Size  Location     Type
  2893 ;;                  1    wreg      void 
  2894 ;; Registers used:
  2895 ;;		wreg, status,2, status,0, pclath, cstack
  2896 ;; Tracked objects:
  2897 ;;		On entry : 0/0
  2898 ;;		On exit  : 0/0
  2899 ;;		Unchanged: 0/0
  2900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2901 ;;      Params:         0       0       0       0       0
  2902 ;;      Locals:         0       1       0       0       0
  2903 ;;      Temps:          0       0       0       0       0
  2904 ;;      Totals:         0       1       0       0       0
  2905 ;;Total ram usage:        1 bytes
  2906 ;; Hardware stack levels used:    1
  2907 ;; Hardware stack levels required when called:    5
  2908 ;; This function calls:
  2909 ;;		_I2C_Master_Start
  2910 ;;		_I2C_Master_Stop
  2911 ;;		_I2C_Master_Write
  2912 ;; This function is called by:
  2913 ;;		_LCD_Init
  2914 ;;		_LCD_Write_4Bit
  2915 ;;		_Backlight
  2916 ;;		_noBacklight
  2917 ;; This function uses a non-reentrant model
  2918 ;;
  2919                           
  2920                           
  2921                           ;psect for function _IO_Expander_Write
  2922  057B                     _IO_Expander_Write:
  2923                           
  2924                           ;incstack = 0
  2925 ;; hardware stack exceeded
  2926                           ; Regs used in _IO_Expander_Write: [wreg+status,2+status,0+pclath+cstack]
  2927                           ;IO_Expander_Write@Data stored from wreg
  2928  057B  1283               	bcf	3,5	;RP0=0, select bank0
  2929  057C  1303               	bcf	3,6	;RP1=0, select bank0
  2930  057D  00A9               	movwf	IO_Expander_Write@Data
  2931  057E                     l1555:
  2932                           
  2933                           ;I2C_LCD.c: 75: void IO_Expander_Write(unsigned char Data);I2C_LCD.c: 76: {;I2C_LCD.c: 7
      +                          7:   I2C_Master_Start();
  2934  057E  120A  118A  26C9  120A  118A  	fcall	_I2C_Master_Start
  2935                           
  2936                           ;I2C_LCD.c: 78:   I2C_Master_Write(i2c_add);
  2937  0583  1283               	bcf	3,5	;RP0=0, select bank0
  2938  0584  1303               	bcf	3,6	;RP1=0, select bank0
  2939  0585  084C               	movf	_i2c_add,w
  2940  0586  120A  118A  2652  120A  118A  	fcall	_I2C_Master_Write
  2941                           
  2942                           ;I2C_LCD.c: 79:   I2C_Master_Write(Data | BackLight_State);
  2943  058B  1283               	bcf	3,5	;RP0=0, select bank0
  2944  058C  1303               	bcf	3,6	;RP1=0, select bank0
  2945  058D  0829               	movf	IO_Expander_Write@Data,w
  2946  058E  044B               	iorwf	_BackLight_State,w
  2947  058F  120A  118A  2652  120A  118A  	fcall	_I2C_Master_Write
  2948                           
  2949                           ;I2C_LCD.c: 80:   I2C_Master_Stop();
  2950  0594  120A  118A  26C0  120A  118A  	fcall	_I2C_Master_Stop
  2951  0599                     l61:
  2952  0599  0008               	return
  2953  059A                     __end_of_IO_Expander_Write:
  2954                           
  2955                           	psect	text16
  2956  0652                     __ptext16:	
  2957 ;; *************** function _I2C_Master_Write *****************
  2958 ;; Defined at:
  2959 ;;		line 37 in file "I2C_LCD.c"
  2960 ;; Parameters:    Size  Location     Type
  2961 ;;  data            1    wreg     unsigned char 
  2962 ;; Auto vars:     Size  Location     Type
  2963 ;;  data            1    8[BANK0 ] unsigned char 
  2964 ;; Return value:  Size  Location     Type
  2965 ;;                  1    wreg      unsigned char 
  2966 ;; Registers used:
  2967 ;;		wreg, status,2, status,0, pclath, cstack
  2968 ;; Tracked objects:
  2969 ;;		On entry : 0/0
  2970 ;;		On exit  : 0/0
  2971 ;;		Unchanged: 0/0
  2972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2973 ;;      Params:         0       0       0       0       0
  2974 ;;      Locals:         0       1       0       0       0
  2975 ;;      Temps:          0       0       0       0       0
  2976 ;;      Totals:         0       1       0       0       0
  2977 ;;Total ram usage:        1 bytes
  2978 ;; Hardware stack levels used:    1
  2979 ;; Hardware stack levels required when called:    4
  2980 ;; This function calls:
  2981 ;;		_I2C_Master_Wait
  2982 ;; This function is called by:
  2983 ;;		_IO_Expander_Write
  2984 ;; This function uses a non-reentrant model
  2985 ;;
  2986                           
  2987                           
  2988                           ;psect for function _I2C_Master_Write
  2989  0652                     _I2C_Master_Write:
  2990                           
  2991                           ;incstack = 0
  2992 ;; hardware stack exceeded
  2993                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  2994                           ;I2C_Master_Write@data stored from wreg
  2995  0652  1283               	bcf	3,5	;RP0=0, select bank0
  2996  0653  1303               	bcf	3,6	;RP1=0, select bank0
  2997  0654  00A8               	movwf	I2C_Master_Write@data
  2998  0655                     l1551:
  2999                           
  3000                           ;I2C_LCD.c: 37: unsigned char I2C_Master_Write(unsigned char data);I2C_LCD.c: 38: {;I2C_
      +                          LCD.c: 39:   I2C_Master_Wait();
  3001  0655  120A  118A  268F  120A  118A  	fcall	_I2C_Master_Wait
  3002  065A                     l1553:
  3003                           
  3004                           ;I2C_LCD.c: 40:   SSPBUF = data;
  3005  065A  1283               	bcf	3,5	;RP0=0, select bank0
  3006  065B  1303               	bcf	3,6	;RP1=0, select bank0
  3007  065C  0828               	movf	I2C_Master_Write@data,w
  3008  065D  0093               	movwf	19	;volatile
  3009  065E                     l52:	
  3010                           ;I2C_LCD.c: 42:     ;
  3011                           
  3012                           
  3013                           ;I2C_LCD.c: 41:   while (!SSPIF)
  3014  065E  1D8C               	btfss	12,3	;volatile
  3015  065F  2E61               	goto	u741
  3016  0660  2E62               	goto	u740
  3017  0661                     u741:
  3018  0661  2E5E               	goto	l52
  3019  0662                     u740:
  3020  0662                     l54:
  3021                           
  3022                           ;I2C_LCD.c: 43:   SSPIF = 0;
  3023  0662  118C               	bcf	12,3	;volatile
  3024  0663                     l55:	
  3025                           ;I2C_LCD.c: 44:   return ACKSTAT;;	Return value of _I2C_Master_Write is never used
  3026                           
  3027  0663  0008               	return
  3028  0664                     __end_of_I2C_Master_Write:
  3029                           
  3030                           	psect	text17
  3031  06C0                     __ptext17:	
  3032 ;; *************** function _I2C_Master_Stop *****************
  3033 ;; Defined at:
  3034 ;;		line 31 in file "I2C_LCD.c"
  3035 ;; Parameters:    Size  Location     Type
  3036 ;;		None
  3037 ;; Auto vars:     Size  Location     Type
  3038 ;;		None
  3039 ;; Return value:  Size  Location     Type
  3040 ;;                  1    wreg      void 
  3041 ;; Registers used:
  3042 ;;		wreg, status,2, status,0, pclath, cstack
  3043 ;; Tracked objects:
  3044 ;;		On entry : 0/0
  3045 ;;		On exit  : 0/0
  3046 ;;		Unchanged: 0/0
  3047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3048 ;;      Params:         0       0       0       0       0
  3049 ;;      Locals:         0       0       0       0       0
  3050 ;;      Temps:          0       0       0       0       0
  3051 ;;      Totals:         0       0       0       0       0
  3052 ;;Total ram usage:        0 bytes
  3053 ;; Hardware stack levels used:    1
  3054 ;; Hardware stack levels required when called:    4
  3055 ;; This function calls:
  3056 ;;		_I2C_Master_Wait
  3057 ;; This function is called by:
  3058 ;;		_IO_Expander_Write
  3059 ;; This function uses a non-reentrant model
  3060 ;;
  3061                           
  3062                           
  3063                           ;psect for function _I2C_Master_Stop
  3064  06C0                     _I2C_Master_Stop:
  3065  06C0                     l1547:	
  3066                           ;incstack = 0
  3067 ;; hardware stack exceeded
  3068                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  3069                           
  3070                           
  3071                           ;I2C_LCD.c: 33:   I2C_Master_Wait();
  3072  06C0  120A  118A  268F  120A  118A  	fcall	_I2C_Master_Wait
  3073  06C5                     l1549:
  3074                           
  3075                           ;I2C_LCD.c: 34:   PEN = 1;
  3076  06C5  1683               	bsf	3,5	;RP0=1, select bank1
  3077  06C6  1303               	bcf	3,6	;RP1=0, select bank1
  3078  06C7  1511               	bsf	17,2	;volatile
  3079  06C8                     l49:
  3080  06C8  0008               	return
  3081  06C9                     __end_of_I2C_Master_Stop:
  3082                           
  3083                           	psect	text18
  3084  06C9                     __ptext18:	
  3085 ;; *************** function _I2C_Master_Start *****************
  3086 ;; Defined at:
  3087 ;;		line 25 in file "I2C_LCD.c"
  3088 ;; Parameters:    Size  Location     Type
  3089 ;;		None
  3090 ;; Auto vars:     Size  Location     Type
  3091 ;;		None
  3092 ;; Return value:  Size  Location     Type
  3093 ;;                  1    wreg      void 
  3094 ;; Registers used:
  3095 ;;		wreg, status,2, status,0, pclath, cstack
  3096 ;; Tracked objects:
  3097 ;;		On entry : 0/0
  3098 ;;		On exit  : 0/0
  3099 ;;		Unchanged: 0/0
  3100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3101 ;;      Params:         0       0       0       0       0
  3102 ;;      Locals:         0       0       0       0       0
  3103 ;;      Temps:          0       0       0       0       0
  3104 ;;      Totals:         0       0       0       0       0
  3105 ;;Total ram usage:        0 bytes
  3106 ;; Hardware stack levels used:    1
  3107 ;; Hardware stack levels required when called:    4
  3108 ;; This function calls:
  3109 ;;		_I2C_Master_Wait
  3110 ;; This function is called by:
  3111 ;;		_IO_Expander_Write
  3112 ;; This function uses a non-reentrant model
  3113 ;;
  3114                           
  3115                           
  3116                           ;psect for function _I2C_Master_Start
  3117  06C9                     _I2C_Master_Start:
  3118  06C9                     l1543:	
  3119                           ;incstack = 0
  3120 ;; hardware stack exceeded
  3121                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  3122                           
  3123                           
  3124                           ;I2C_LCD.c: 27:   I2C_Master_Wait();
  3125  06C9  120A  118A  268F  120A  118A  	fcall	_I2C_Master_Wait
  3126  06CE                     l1545:
  3127                           
  3128                           ;I2C_LCD.c: 28:   SEN = 1;
  3129  06CE  1683               	bsf	3,5	;RP0=1, select bank1
  3130  06CF  1303               	bcf	3,6	;RP1=0, select bank1
  3131  06D0  1411               	bsf	17,0	;volatile
  3132  06D1                     l46:
  3133  06D1  0008               	return
  3134  06D2                     __end_of_I2C_Master_Start:
  3135                           
  3136                           	psect	text19
  3137  068F                     __ptext19:	
  3138 ;; *************** function _I2C_Master_Wait *****************
  3139 ;; Defined at:
  3140 ;;		line 19 in file "I2C_LCD.c"
  3141 ;; Parameters:    Size  Location     Type
  3142 ;;		None
  3143 ;; Auto vars:     Size  Location     Type
  3144 ;;		None
  3145 ;; Return value:  Size  Location     Type
  3146 ;;                  1    wreg      void 
  3147 ;; Registers used:
  3148 ;;		wreg, status,2
  3149 ;; Tracked objects:
  3150 ;;		On entry : 0/0
  3151 ;;		On exit  : 0/0
  3152 ;;		Unchanged: 0/0
  3153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3154 ;;      Params:         0       0       0       0       0
  3155 ;;      Locals:         0       0       0       0       0
  3156 ;;      Temps:          0       0       0       0       0
  3157 ;;      Totals:         0       0       0       0       0
  3158 ;;Total ram usage:        0 bytes
  3159 ;; Hardware stack levels used:    1
  3160 ;; Hardware stack levels required when called:    3
  3161 ;; This function calls:
  3162 ;;		Nothing
  3163 ;; This function is called by:
  3164 ;;		_I2C_Master_Start
  3165 ;;		_I2C_Master_Stop
  3166 ;;		_I2C_Master_Write
  3167 ;; This function uses a non-reentrant model
  3168 ;;
  3169                           
  3170                           
  3171                           ;psect for function _I2C_Master_Wait
  3172  068F                     _I2C_Master_Wait:
  3173  068F                     l1539:	
  3174                           ;incstack = 0
  3175 ;; hardware stack exceeded
  3176                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  3177                           
  3178  068F                     l40:	
  3179                           ;I2C_LCD.c: 22:     ;
  3180                           
  3181                           
  3182                           ;I2C_LCD.c: 21:   while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F))
  3183  068F  1683               	bsf	3,5	;RP0=1, select bank1
  3184  0690  1303               	bcf	3,6	;RP1=0, select bank1
  3185  0691  1914               	btfsc	20,2	;volatile
  3186  0692  2E94               	goto	u721
  3187  0693  2E95               	goto	u720
  3188  0694                     u721:
  3189  0694  2E8F               	goto	l40
  3190  0695                     u720:
  3191  0695                     l1541:
  3192  0695  0811               	movf	17,w	;volatile
  3193  0696  391F               	andlw	31
  3194  0697  1D03               	btfss	3,2
  3195  0698  2E9A               	goto	u731
  3196  0699  2E9B               	goto	u730
  3197  069A                     u731:
  3198  069A  2E8F               	goto	l40
  3199  069B                     u730:
  3200  069B                     l43:
  3201  069B  0008               	return
  3202  069C                     __end_of_I2C_Master_Wait:
  3203                           
  3204                           	psect	text20
  3205  06D9                     __ptext20:	
  3206 ;; *************** function _IR_Init *****************
  3207 ;; Defined at:
  3208 ;;		line 395 in file "Main.c"
  3209 ;; Parameters:    Size  Location     Type
  3210 ;;		None
  3211 ;; Auto vars:     Size  Location     Type
  3212 ;;		None
  3213 ;; Return value:  Size  Location     Type
  3214 ;;                  1    wreg      void 
  3215 ;; Registers used:
  3216 ;;		None
  3217 ;; Tracked objects:
  3218 ;;		On entry : 0/0
  3219 ;;		On exit  : 0/0
  3220 ;;		Unchanged: 0/0
  3221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3222 ;;      Params:         0       0       0       0       0
  3223 ;;      Locals:         0       0       0       0       0
  3224 ;;      Temps:          0       0       0       0       0
  3225 ;;      Totals:         0       0       0       0       0
  3226 ;;Total ram usage:        0 bytes
  3227 ;; Hardware stack levels used:    1
  3228 ;; Hardware stack levels required when called:    3
  3229 ;; This function calls:
  3230 ;;		Nothing
  3231 ;; This function is called by:
  3232 ;;		_main
  3233 ;; This function uses a non-reentrant model
  3234 ;;
  3235                           
  3236                           
  3237                           ;psect for function _IR_Init
  3238  06D9                     _IR_Init:
  3239  06D9                     l1735:	
  3240                           ;incstack = 0
  3241                           ; Regs used in _IR_Init: []
  3242                           
  3243                           
  3244                           ;Main.c: 397:     INTEDG = 0;
  3245  06D9  1683               	bsf	3,5	;RP0=1, select bank1
  3246  06DA  1303               	bcf	3,6	;RP1=0, select bank1
  3247  06DB  1301               	bcf	1,6	;volatile
  3248                           
  3249                           ;Main.c: 398:     INTE = 1;
  3250  06DC  160B               	bsf	11,4	;volatile
  3251                           
  3252                           ;Main.c: 399:     GIE = 1;
  3253  06DD  178B               	bsf	11,7	;volatile
  3254  06DE                     l369:
  3255  06DE  0008               	return
  3256  06DF                     __end_of_IR_Init:
  3257                           
  3258                           	psect	text21
  3259  069C                     __ptext21:	
  3260 ;; *************** function _I2C_Master_Init *****************
  3261 ;; Defined at:
  3262 ;;		line 9 in file "I2C_LCD.c"
  3263 ;; Parameters:    Size  Location     Type
  3264 ;;		None
  3265 ;; Auto vars:     Size  Location     Type
  3266 ;;		None
  3267 ;; Return value:  Size  Location     Type
  3268 ;;                  1    wreg      void 
  3269 ;; Registers used:
  3270 ;;		wreg, status,2
  3271 ;; Tracked objects:
  3272 ;;		On entry : 0/0
  3273 ;;		On exit  : 0/0
  3274 ;;		Unchanged: 0/0
  3275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3276 ;;      Params:         0       0       0       0       0
  3277 ;;      Locals:         0       0       0       0       0
  3278 ;;      Temps:          0       0       0       0       0
  3279 ;;      Totals:         0       0       0       0       0
  3280 ;;Total ram usage:        0 bytes
  3281 ;; Hardware stack levels used:    1
  3282 ;; Hardware stack levels required when called:    3
  3283 ;; This function calls:
  3284 ;;		Nothing
  3285 ;; This function is called by:
  3286 ;;		_main
  3287 ;; This function uses a non-reentrant model
  3288 ;;
  3289                           
  3290                           
  3291                           ;psect for function _I2C_Master_Init
  3292  069C                     _I2C_Master_Init:
  3293  069C                     l1673:	
  3294                           ;incstack = 0
  3295                           ; Regs used in _I2C_Master_Init: [wreg+status,2]
  3296                           
  3297                           
  3298                           ;I2C_LCD.c: 11:   SSPCON = 0x28;
  3299  069C  3028               	movlw	40
  3300  069D  1283               	bcf	3,5	;RP0=0, select bank0
  3301  069E  1303               	bcf	3,6	;RP1=0, select bank0
  3302  069F  0094               	movwf	20	;volatile
  3303  06A0                     l1675:
  3304                           
  3305                           ;I2C_LCD.c: 12:   SSPCON2 = 0x00;
  3306  06A0  1683               	bsf	3,5	;RP0=1, select bank1
  3307  06A1  1303               	bcf	3,6	;RP1=0, select bank1
  3308  06A2  0191               	clrf	17	;volatile
  3309  06A3                     l1677:
  3310                           
  3311                           ;I2C_LCD.c: 13:   SSPSTAT = 0x00;
  3312  06A3  0194               	clrf	20	;volatile
  3313                           
  3314                           ;I2C_LCD.c: 14:   SSPADD = ((20000000 / 4) / 100000) - 1;
  3315  06A4  3031               	movlw	49
  3316  06A5  0093               	movwf	19	;volatile
  3317  06A6                     l1679:
  3318                           
  3319                           ;I2C_LCD.c: 15:   TRISC3 = 1;
  3320  06A6  1587               	bsf	7,3	;volatile
  3321  06A7                     l1681:
  3322                           
  3323                           ;I2C_LCD.c: 16:   TRISC4 = 1;
  3324  06A7  1607               	bsf	7,4	;volatile
  3325  06A8                     l37:
  3326  06A8  0008               	return
  3327  06A9                     __end_of_I2C_Master_Init:
  3328                           
  3329                           	psect	text22
  3330  0664                     __ptext22:	
  3331 ;; *************** function _EEPROM_Read *****************
  3332 ;; Defined at:
  3333 ;;		line 441 in file "Main.c"
  3334 ;; Parameters:    Size  Location     Type
  3335 ;;  Address         1    wreg     unsigned char 
  3336 ;; Auto vars:     Size  Location     Type
  3337 ;;  Address         1    8[BANK0 ] unsigned char 
  3338 ;; Return value:  Size  Location     Type
  3339 ;;                  1    wreg      unsigned char 
  3340 ;; Registers used:
  3341 ;;		wreg
  3342 ;; Tracked objects:
  3343 ;;		On entry : 0/0
  3344 ;;		On exit  : 0/0
  3345 ;;		Unchanged: 0/0
  3346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3347 ;;      Params:         0       0       0       0       0
  3348 ;;      Locals:         0       1       0       0       0
  3349 ;;      Temps:          0       0       0       0       0
  3350 ;;      Totals:         0       1       0       0       0
  3351 ;;Total ram usage:        1 bytes
  3352 ;; Hardware stack levels used:    1
  3353 ;; Hardware stack levels required when called:    3
  3354 ;; This function calls:
  3355 ;;		Nothing
  3356 ;; This function is called by:
  3357 ;;		_main
  3358 ;; This function uses a non-reentrant model
  3359 ;;
  3360                           
  3361                           
  3362                           ;psect for function _EEPROM_Read
  3363  0664                     _EEPROM_Read:
  3364                           
  3365                           ;incstack = 0
  3366                           ; Regs used in _EEPROM_Read: [wreg]
  3367                           ;EEPROM_Read@Address stored from wreg
  3368  0664  1283               	bcf	3,5	;RP0=0, select bank0
  3369  0665  1303               	bcf	3,6	;RP1=0, select bank0
  3370  0666  00A8               	movwf	EEPROM_Read@Address
  3371  0667                     l1763:
  3372                           
  3373                           ;Main.c: 441: uint8_t EEPROM_Read(uint8_t Address);Main.c: 442: {;Main.c: 443:     EEADR
      +                           = Address;
  3374  0667  0828               	movf	EEPROM_Read@Address,w
  3375  0668  1283               	bcf	3,5	;RP0=0, select bank2
  3376  0669  1703               	bsf	3,6	;RP1=1, select bank2
  3377  066A  008D               	movwf	13	;volatile
  3378  066B                     l1765:
  3379                           
  3380                           ;Main.c: 444:     EEPGD = 0;
  3381  066B  1683               	bsf	3,5	;RP0=1, select bank3
  3382  066C  1703               	bsf	3,6	;RP1=1, select bank3
  3383  066D  138C               	bcf	12,7	;volsfr
  3384  066E                     l1767:
  3385                           
  3386                           ;Main.c: 445:     EECON1bits.RD = 1;
  3387  066E  140C               	bsf	12,0	;volsfr
  3388                           
  3389                           ;Main.c: 446:     return EEDATA;
  3390  066F  1283               	bcf	3,5	;RP0=0, select bank2
  3391  0670  1703               	bsf	3,6	;RP1=1, select bank2
  3392  0671  080C               	movf	12,w	;volatile
  3393  0672                     l387:
  3394  0672  0008               	return
  3395  0673                     __end_of_EEPROM_Read:
  3396                           
  3397                           	psect	text23
  3398  03E2                     __ptext23:	
  3399 ;; *************** function _ADC_Read *****************
  3400 ;; Defined at:
  3401 ;;		line 325 in file "Main.c"
  3402 ;; Parameters:    Size  Location     Type
  3403 ;;  ADC_channel     1    wreg     unsigned char 
  3404 ;; Auto vars:     Size  Location     Type
  3405 ;;  ADC_channel     1   13[BANK0 ] unsigned char 
  3406 ;;  result          2   11[BANK0 ] unsigned int 
  3407 ;; Return value:  Size  Location     Type
  3408 ;;                  2    8[BANK0 ] unsigned int 
  3409 ;; Registers used:
  3410 ;;		wreg, status,2, status,0
  3411 ;; Tracked objects:
  3412 ;;		On entry : 0/0
  3413 ;;		On exit  : 0/0
  3414 ;;		Unchanged: 0/0
  3415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3416 ;;      Params:         0       2       0       0       0
  3417 ;;      Locals:         0       3       0       0       0
  3418 ;;      Temps:          0       1       0       0       0
  3419 ;;      Totals:         0       6       0       0       0
  3420 ;;Total ram usage:        6 bytes
  3421 ;; Hardware stack levels used:    1
  3422 ;; Hardware stack levels required when called:    3
  3423 ;; This function calls:
  3424 ;;		Nothing
  3425 ;; This function is called by:
  3426 ;;		_main
  3427 ;; This function uses a non-reentrant model
  3428 ;;
  3429                           
  3430                           
  3431                           ;psect for function _ADC_Read
  3432  03E2                     _ADC_Read:
  3433                           
  3434                           ;incstack = 0
  3435                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  3436                           ;ADC_Read@ADC_channel stored from wreg
  3437  03E2  1283               	bcf	3,5	;RP0=0, select bank0
  3438  03E3  1303               	bcf	3,6	;RP1=0, select bank0
  3439  03E4  00AD               	movwf	ADC_Read@ADC_channel
  3440  03E5                     l1799:
  3441                           
  3442                           ;Main.c: 325: uint16_t ADC_Read(uint8_t ADC_channel);Main.c: 326: {;Main.c: 328:     if 
      +                          (ADC_channel < 0 || ADC_channel > 7)
  3443  03E5  3008               	movlw	8
  3444  03E6  022D               	subwf	ADC_Read@ADC_channel,w
  3445  03E7  1C03               	skipc
  3446  03E8  2BEA               	goto	u1001
  3447  03E9  2BEB               	goto	u1000
  3448  03EA                     u1001:
  3449  03EA  2BEE               	goto	l351
  3450  03EB                     u1000:
  3451  03EB                     l1801:
  3452                           
  3453                           ;Main.c: 329:         return 0;
  3454  03EB  01A8               	clrf	?_ADC_Read
  3455  03EC  01A9               	clrf	?_ADC_Read+1
  3456  03ED  2C36               	goto	l352
  3457  03EE                     l351:
  3458                           
  3459                           ;Main.c: 332:     CHS0 = (ADC_channel & 1) >> 0;
  3460  03EE  182D               	btfsc	ADC_Read@ADC_channel,0
  3461  03EF  2BF1               	goto	u1011
  3462  03F0  2BF5               	goto	u1010
  3463  03F1                     u1011:
  3464  03F1  1283               	bcf	3,5	;RP0=0, select bank0
  3465  03F2  1303               	bcf	3,6	;RP1=0, select bank0
  3466  03F3  159F               	bsf	31,3	;volatile
  3467  03F4  2BF8               	goto	u1024
  3468  03F5                     u1010:
  3469  03F5  1283               	bcf	3,5	;RP0=0, select bank0
  3470  03F6  1303               	bcf	3,6	;RP1=0, select bank0
  3471  03F7  119F               	bcf	31,3	;volatile
  3472  03F8                     u1024:
  3473  03F8                     l1805:
  3474                           
  3475                           ;Main.c: 333:     CHS1 = (ADC_channel & 2) >> 1;
  3476  03F8  082D               	movf	ADC_Read@ADC_channel,w
  3477  03F9  00AA               	movwf	??_ADC_Read
  3478  03FA  3001               	movlw	1
  3479  03FB                     u1035:
  3480  03FB  1003               	clrc
  3481  03FC  0CAA               	rrf	??_ADC_Read,f
  3482  03FD  3EFF               	addlw	-1
  3483  03FE  1D03               	skipz
  3484  03FF  2BFB               	goto	u1035
  3485  0400  182A               	btfsc	??_ADC_Read,0
  3486  0401  2C03               	goto	u1041
  3487  0402  2C07               	goto	u1040
  3488  0403                     u1041:
  3489  0403  1283               	bcf	3,5	;RP0=0, select bank0
  3490  0404  1303               	bcf	3,6	;RP1=0, select bank0
  3491  0405  161F               	bsf	31,4	;volatile
  3492  0406  2C0A               	goto	u1054
  3493  0407                     u1040:
  3494  0407  1283               	bcf	3,5	;RP0=0, select bank0
  3495  0408  1303               	bcf	3,6	;RP1=0, select bank0
  3496  0409  121F               	bcf	31,4	;volatile
  3497  040A                     u1054:
  3498                           
  3499                           ;Main.c: 334:     CHS2 = (ADC_channel & 4) >> 2;
  3500  040A  082D               	movf	ADC_Read@ADC_channel,w
  3501  040B  00AA               	movwf	??_ADC_Read
  3502  040C  3002               	movlw	2
  3503  040D                     u1065:
  3504  040D  1003               	clrc
  3505  040E  0CAA               	rrf	??_ADC_Read,f
  3506  040F  3EFF               	addlw	-1
  3507  0410  1D03               	skipz
  3508  0411  2C0D               	goto	u1065
  3509  0412  182A               	btfsc	??_ADC_Read,0
  3510  0413  2C15               	goto	u1071
  3511  0414  2C19               	goto	u1070
  3512  0415                     u1071:
  3513  0415  1283               	bcf	3,5	;RP0=0, select bank0
  3514  0416  1303               	bcf	3,6	;RP1=0, select bank0
  3515  0417  169F               	bsf	31,5	;volatile
  3516  0418  2C1C               	goto	u1084
  3517  0419                     u1070:
  3518  0419  1283               	bcf	3,5	;RP0=0, select bank0
  3519  041A  1303               	bcf	3,6	;RP1=0, select bank0
  3520  041B  129F               	bcf	31,5	;volatile
  3521  041C                     u1084:
  3522  041C                     l1807:
  3523                           
  3524                           ;Main.c: 337:     _delay((unsigned long)((25)*(20000000/4000000.0)));
  3525  041C  3028               	movlw	40
  3526  041D  1283               	bcf	3,5	;RP0=0, select bank0
  3527  041E  1303               	bcf	3,6	;RP1=0, select bank0
  3528  041F  00AA               	movwf	??_ADC_Read
  3529  0420                     u1547:
  3530  0420  0BAA               	decfsz	??_ADC_Read,f
  3531  0421  2C20               	goto	u1547
  3532  0422  2C23               	nop2
  3533  0423                     l1809:
  3534                           
  3535                           ;Main.c: 340:     GO_DONE = 1;
  3536  0423  1283               	bcf	3,5	;RP0=0, select bank0
  3537  0424  1303               	bcf	3,6	;RP1=0, select bank0
  3538  0425  151F               	bsf	31,2	;volatile
  3539  0426                     l353:	
  3540                           ;Main.c: 344:         ;
  3541                           
  3542                           
  3543                           ;Main.c: 343:     while (GO_DONE)
  3544  0426  191F               	btfsc	31,2	;volatile
  3545  0427  2C29               	goto	u1091
  3546  0428  2C2A               	goto	u1090
  3547  0429                     u1091:
  3548  0429  2C26               	goto	l353
  3549  042A                     u1090:
  3550  042A                     l1811:
  3551                           
  3552                           ;Main.c: 347:     uint16_t result = ((ADRESH << 8) + ADRESL);
  3553  042A  081E               	movf	30,w	;volatile
  3554  042B  00AC               	movwf	ADC_Read@result+1
  3555  042C  1683               	bsf	3,5	;RP0=1, select bank1
  3556  042D  1303               	bcf	3,6	;RP1=0, select bank1
  3557  042E  081E               	movf	30,w	;volatile
  3558  042F  1283               	bcf	3,5	;RP0=0, select bank0
  3559  0430  1303               	bcf	3,6	;RP1=0, select bank0
  3560  0431  00AB               	movwf	ADC_Read@result
  3561                           
  3562                           ;Main.c: 348:     return result;
  3563  0432  082C               	movf	ADC_Read@result+1,w
  3564  0433  00A9               	movwf	?_ADC_Read+1
  3565  0434  082B               	movf	ADC_Read@result,w
  3566  0435  00A8               	movwf	?_ADC_Read
  3567  0436                     l352:
  3568  0436  0008               	return
  3569  0437                     __end_of_ADC_Read:
  3570                           
  3571                           	psect	text24
  3572  0681                     __ptext24:	
  3573 ;; *************** function _ADC_Init *****************
  3574 ;; Defined at:
  3575 ;;		line 303 in file "Main.c"
  3576 ;; Parameters:    Size  Location     Type
  3577 ;;		None
  3578 ;; Auto vars:     Size  Location     Type
  3579 ;;		None
  3580 ;; Return value:  Size  Location     Type
  3581 ;;                  1    wreg      void 
  3582 ;; Registers used:
  3583 ;;		None
  3584 ;; Tracked objects:
  3585 ;;		On entry : 0/0
  3586 ;;		On exit  : 0/0
  3587 ;;		Unchanged: 0/0
  3588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3589 ;;      Params:         0       0       0       0       0
  3590 ;;      Locals:         0       0       0       0       0
  3591 ;;      Temps:          0       0       0       0       0
  3592 ;;      Totals:         0       0       0       0       0
  3593 ;;Total ram usage:        0 bytes
  3594 ;; Hardware stack levels used:    1
  3595 ;; Hardware stack levels required when called:    3
  3596 ;; This function calls:
  3597 ;;		Nothing
  3598 ;; This function is called by:
  3599 ;;		_main
  3600 ;; This function uses a non-reentrant model
  3601 ;;
  3602                           
  3603                           
  3604                           ;psect for function _ADC_Init
  3605  0681                     _ADC_Init:
  3606  0681                     l1723:	
  3607                           ;incstack = 0
  3608                           ; Regs used in _ADC_Init: []
  3609                           
  3610                           
  3611                           ;Main.c: 308:     ADCS0 = 1;
  3612  0681  1283               	bcf	3,5	;RP0=0, select bank0
  3613  0682  1303               	bcf	3,6	;RP1=0, select bank0
  3614  0683  171F               	bsf	31,6	;volatile
  3615                           
  3616                           ;Main.c: 309:     ADCS1 = 0;
  3617  0684  139F               	bcf	31,7	;volatile
  3618                           
  3619                           ;Main.c: 311:     ADON = 1;
  3620  0685  141F               	bsf	31,0	;volatile
  3621                           
  3622                           ;Main.c: 315:     ADFM = 1;
  3623  0686  1683               	bsf	3,5	;RP0=1, select bank1
  3624  0687  1303               	bcf	3,6	;RP1=0, select bank1
  3625  0688  179F               	bsf	31,7	;volatile
  3626                           
  3627                           ;Main.c: 317:     ADCS2 = 1;
  3628  0689  171F               	bsf	31,6	;volatile
  3629                           
  3630                           ;Main.c: 319:     PCFG0 = 0;
  3631  068A  101F               	bcf	31,0	;volatile
  3632                           
  3633                           ;Main.c: 320:     PCFG1 = 0;
  3634  068B  109F               	bcf	31,1	;volatile
  3635                           
  3636                           ;Main.c: 321:     PCFG2 = 0;
  3637  068C  111F               	bcf	31,2	;volatile
  3638                           
  3639                           ;Main.c: 322:     PCFG3 = 0;
  3640  068D  119F               	bcf	31,3	;volatile
  3641  068E                     l348:
  3642  068E  0008               	return
  3643  068F                     __end_of_ADC_Init:
  3644                           
  3645                           	psect	text25
  3646  0131                     __ptext25:	
  3647 ;; *************** function _isr1 *****************
  3648 ;; Defined at:
  3649 ;;		line 164 in file "Main.c"
  3650 ;; Parameters:    Size  Location     Type
  3651 ;;		None
  3652 ;; Auto vars:     Size  Location     Type
  3653 ;;		None
  3654 ;; Return value:  Size  Location     Type
  3655 ;;                  1    wreg      void 
  3656 ;; Registers used:
  3657 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3658 ;; Tracked objects:
  3659 ;;		On entry : 0/0
  3660 ;;		On exit  : 0/0
  3661 ;;		Unchanged: 0/0
  3662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3663 ;;      Params:         0       0       0       0       0
  3664 ;;      Locals:         0       0       0       0       0
  3665 ;;      Temps:          0       8       0       0       0
  3666 ;;      Totals:         0       8       0       0       0
  3667 ;;Total ram usage:        8 bytes
  3668 ;; Hardware stack levels used:    1
  3669 ;; Hardware stack levels required when called:    2
  3670 ;; This function calls:
  3671 ;;		_EEPROM_Write
  3672 ;;		_UART_send_string
  3673 ;;		i1_ADC_Read
  3674 ;;		i1_setPWM_DutyCycle
  3675 ;; This function is called by:
  3676 ;;		Interrupt level 1
  3677 ;; This function uses a non-reentrant model
  3678 ;;
  3679                           
  3680                           
  3681                           ;psect for function _isr1
  3682  0131                     _isr1:
  3683  0131                     i1l1951:
  3684                           
  3685                           ;Main.c: 167:     if (T0IF == 1)
  3686  0131  1D0B               	btfss	11,2	;volatile
  3687  0132  2934               	goto	u130_21
  3688  0133  2935               	goto	u130_20
  3689  0134                     u130_21:
  3690  0134  296B               	goto	i1l1977
  3691  0135                     u130_20:
  3692  0135                     i1l1953:
  3693                           
  3694                           ;Main.c: 168:     {;Main.c: 169:         TMR0 = 5;
  3695  0135  3005               	movlw	5
  3696  0136  0081               	movwf	1	;volatile
  3697  0137                     i1l1955:
  3698                           
  3699                           ;Main.c: 170:         T0IF = 0;
  3700  0137  110B               	bcf	11,2	;volatile
  3701  0138                     i1l1957:
  3702                           
  3703                           ;Main.c: 171:         cnt_pos++;
  3704  0138  3001               	movlw	1
  3705  0139  00A0               	movwf	??_isr1
  3706  013A  0820               	movf	??_isr1,w
  3707  013B  07FB               	addwf	_cnt_pos,f
  3708  013C                     i1l1959:
  3709                           
  3710                           ;Main.c: 173:         if (cnt_pos == pos)
  3711  013C  087B               	movf	_cnt_pos,w
  3712  013D  067D               	xorwf	_pos,w
  3713  013E  1D03               	skipz
  3714  013F  2941               	goto	u131_21
  3715  0140  2942               	goto	u131_20
  3716  0141                     u131_21:
  3717  0141  294C               	goto	i1l1967
  3718  0142                     u131_20:
  3719  0142                     i1l1961:
  3720                           
  3721                           ;Main.c: 174:         {;Main.c: 175:             if (SelectServo == 0)
  3722  0142  087C               	movf	_SelectServo,w
  3723  0143  1D03               	btfss	3,2
  3724  0144  2946               	goto	u132_21
  3725  0145  2947               	goto	u132_20
  3726  0146                     u132_21:
  3727  0146  294A               	goto	i1l1965
  3728  0147                     u132_20:
  3729  0147                     i1l1963:
  3730                           
  3731                           ;Main.c: 176:             {;Main.c: 177:                 RB6 = ~RB6;
  3732  0147  3040               	movlw	64
  3733  0148  0686               	xorwf	6,f
  3734                           
  3735                           ;Main.c: 178:             }
  3736  0149  294C               	goto	i1l1967
  3737  014A                     i1l1965:
  3738                           
  3739                           ;Main.c: 180:             {;Main.c: 181:                 RB5 = ~RB5;
  3740  014A  3020               	movlw	32
  3741  014B  0686               	xorwf	6,f
  3742  014C                     i1l1967:
  3743                           
  3744                           ;Main.c: 185:         if (cnt_pos == 200 - pos)
  3745  014C  3000               	movlw	0
  3746  014D  00A1               	movwf	??_isr1+1
  3747  014E  087D               	movf	_pos,w
  3748  014F  3CC8               	sublw	200
  3749  0150  00A0               	movwf	??_isr1
  3750  0151  1C03               	skipc
  3751  0152  03A1               	decf	??_isr1+1,f
  3752  0153  087B               	movf	_cnt_pos,w
  3753  0154  00A2               	movwf	??_isr1+2
  3754  0155  01A3               	clrf	??_isr1+3
  3755  0156  0821               	movf	??_isr1+1,w
  3756  0157  0623               	xorwf	??_isr1+3,w
  3757  0158  1D03               	skipz
  3758  0159  295C               	goto	u133_25
  3759  015A  0820               	movf	??_isr1,w
  3760  015B  0622               	xorwf	??_isr1+2,w
  3761  015C                     u133_25:
  3762  015C  1D03               	skipz
  3763  015D  295F               	goto	u133_21
  3764  015E  2960               	goto	u133_20
  3765  015F                     u133_21:
  3766  015F  296B               	goto	i1l1977
  3767  0160                     u133_20:
  3768  0160                     i1l1969:
  3769                           
  3770                           ;Main.c: 186:         {;Main.c: 187:             if (SelectServo == 0)
  3771  0160  087C               	movf	_SelectServo,w
  3772  0161  1D03               	btfss	3,2
  3773  0162  2964               	goto	u134_21
  3774  0163  2965               	goto	u134_20
  3775  0164                     u134_21:
  3776  0164  2968               	goto	i1l1973
  3777  0165                     u134_20:
  3778  0165                     i1l1971:
  3779                           
  3780                           ;Main.c: 188:             {;Main.c: 189:                 RB6 = ~RB6;
  3781  0165  3040               	movlw	64
  3782  0166  0686               	xorwf	6,f
  3783                           
  3784                           ;Main.c: 190:             }
  3785  0167  296A               	goto	i1l1975
  3786  0168                     i1l1973:
  3787                           
  3788                           ;Main.c: 192:             {;Main.c: 193:                 RB5 = ~RB5;
  3789  0168  3020               	movlw	32
  3790  0169  0686               	xorwf	6,f
  3791  016A                     i1l1975:
  3792                           
  3793                           ;Main.c: 195:             cnt_pos = 0;
  3794  016A  01FB               	clrf	_cnt_pos
  3795  016B                     i1l1977:
  3796                           
  3797                           ;Main.c: 200:     if (INTF == 1)
  3798  016B  1C8B               	btfss	11,1	;volatile
  3799  016C  296E               	goto	u135_21
  3800  016D  296F               	goto	u135_20
  3801  016E                     u135_21:
  3802  016E  2982               	goto	i1l1989
  3803  016F                     u135_20:
  3804  016F                     i1l1979:
  3805                           
  3806                           ;Main.c: 201:     {;Main.c: 202:         OpenServo = 0;
  3807  016F  01C3               	clrf	_OpenServo
  3808  0170                     i1l1981:
  3809                           
  3810                           ;Main.c: 203:         setPWM_DutyCycle(0);
  3811  0170  3000               	movlw	0
  3812  0171  00F6               	movwf	i1setPWM_DutyCycle@DC
  3813  0172  00F7               	movwf	i1setPWM_DutyCycle@DC+1
  3814  0173  120A  118A  2627  120A  118A  	fcall	i1_setPWM_DutyCycle
  3815  0178                     i1l1983:
  3816                           
  3817                           ;Main.c: 204:         flag_dc = 0;
  3818  0178  1283               	bcf	3,5	;RP0=0, select bank0
  3819  0179  1303               	bcf	3,6	;RP1=0, select bank0
  3820  017A  01C9               	clrf	_flag_dc
  3821  017B                     i1l1985:
  3822                           
  3823                           ;Main.c: 205:         UART_send_string("check\n");
  3824  017B  3033               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  3825  017C  120A  118A  259A  120A  118A  	fcall	_UART_send_string
  3826  0181                     i1l1987:
  3827                           
  3828                           ;Main.c: 206:         INTF = 0;
  3829  0181  108B               	bcf	11,1	;volatile
  3830  0182                     i1l1989:
  3831                           
  3832                           ;Main.c: 210:     if (RCIF == 1)
  3833  0182  1283               	bcf	3,5	;RP0=0, select bank0
  3834  0183  1303               	bcf	3,6	;RP1=0, select bank0
  3835  0184  1E8C               	btfss	12,5	;volatile
  3836  0185  2987               	goto	u136_21
  3837  0186  2988               	goto	u136_20
  3838  0187                     u136_21:
  3839  0187  29FD               	goto	i1l333
  3840  0188                     u136_20:
  3841  0188                     i1l1991:
  3842                           
  3843                           ;Main.c: 211:     {;Main.c: 213:         result = RCREG;
  3844  0188  081A               	movf	26,w	;volatile
  3845  0189  00A0               	movwf	??_isr1
  3846  018A  0820               	movf	??_isr1,w
  3847  018B  00FA               	movwf	_result
  3848  018C                     i1l1993:
  3849                           
  3850                           ;Main.c: 214:         if (result == 'a')
  3851  018C  3061               	movlw	97
  3852  018D  067A               	xorwf	_result,w
  3853  018E  1D03               	btfss	3,2
  3854  018F  2991               	goto	u137_21
  3855  0190  2992               	goto	u137_20
  3856  0191                     u137_21:
  3857  0191  29AC               	goto	i1l2007
  3858  0192                     u137_20:
  3859  0192                     i1l1995:
  3860                           
  3861                           ;Main.c: 215:         {;Main.c: 216:             if (count_sp1 == 255)
  3862  0192  0A41               	incf	_count_sp1,w
  3863  0193  1D03               	btfss	3,2
  3864  0194  2996               	goto	u138_21
  3865  0195  2997               	goto	u138_20
  3866  0196                     u138_21:
  3867  0196  2998               	goto	i1l1999
  3868  0197                     u138_20:
  3869  0197                     i1l1997:
  3870                           
  3871                           ;Main.c: 217:             {;Main.c: 218:                 count_sp1 = 0;
  3872  0197  01C1               	clrf	_count_sp1
  3873  0198                     i1l1999:
  3874                           
  3875                           ;Main.c: 220:             count_sp1++;
  3876  0198  3001               	movlw	1
  3877  0199  00A0               	movwf	??_isr1
  3878  019A  0820               	movf	??_isr1,w
  3879  019B  07C1               	addwf	_count_sp1,f
  3880  019C                     i1l2001:
  3881                           
  3882                           ;Main.c: 221:             EEPROM_Write(0x00, count_sp1);
  3883  019C  0841               	movf	_count_sp1,w
  3884  019D  00A0               	movwf	??_isr1
  3885  019E  0820               	movf	??_isr1,w
  3886  019F  00F0               	movwf	EEPROM_Write@Data
  3887  01A0  3000               	movlw	0
  3888  01A1  120A  118A  25F2  120A  118A  	fcall	_EEPROM_Write
  3889  01A6                     i1l2003:
  3890                           
  3891                           ;Main.c: 223:             SelectServo = 0;
  3892  01A6  01FC               	clrf	_SelectServo
  3893  01A7                     i1l2005:
  3894                           
  3895                           ;Main.c: 224:             OpenServo = 1;
  3896  01A7  1283               	bcf	3,5	;RP0=0, select bank0
  3897  01A8  1303               	bcf	3,6	;RP1=0, select bank0
  3898  01A9  01C3               	clrf	_OpenServo
  3899  01AA  0AC3               	incf	_OpenServo,f
  3900                           
  3901                           ;Main.c: 225:         }
  3902  01AB  29E6               	goto	i1l2033
  3903  01AC                     i1l2007:
  3904  01AC  3062               	movlw	98
  3905  01AD  067A               	xorwf	_result,w
  3906  01AE  1D03               	btfss	3,2
  3907  01AF  29B1               	goto	u139_21
  3908  01B0  29B2               	goto	u139_20
  3909  01B1                     u139_21:
  3910  01B1  29C9               	goto	i1l2021
  3911  01B2                     u139_20:
  3912  01B2                     i1l2009:
  3913                           
  3914                           ;Main.c: 227:         {;Main.c: 228:             if (count_sp2 == 255)
  3915  01B2  0A40               	incf	_count_sp2,w
  3916  01B3  1D03               	btfss	3,2
  3917  01B4  29B6               	goto	u140_21
  3918  01B5  29B7               	goto	u140_20
  3919  01B6                     u140_21:
  3920  01B6  29B8               	goto	i1l2013
  3921  01B7                     u140_20:
  3922  01B7                     i1l2011:
  3923                           
  3924                           ;Main.c: 229:             {;Main.c: 230:                 count_sp2 = 0;
  3925  01B7  01C0               	clrf	_count_sp2
  3926  01B8                     i1l2013:
  3927                           
  3928                           ;Main.c: 232:             count_sp2++;
  3929  01B8  3001               	movlw	1
  3930  01B9  00A0               	movwf	??_isr1
  3931  01BA  0820               	movf	??_isr1,w
  3932  01BB  07C0               	addwf	_count_sp2,f
  3933  01BC                     i1l2015:
  3934                           
  3935                           ;Main.c: 233:             EEPROM_Write(0x01, count_sp2);
  3936  01BC  0840               	movf	_count_sp2,w
  3937  01BD  00A0               	movwf	??_isr1
  3938  01BE  0820               	movf	??_isr1,w
  3939  01BF  00F0               	movwf	EEPROM_Write@Data
  3940  01C0  3001               	movlw	1
  3941  01C1  120A  118A  25F2  120A  118A  	fcall	_EEPROM_Write
  3942  01C6                     i1l2017:
  3943                           
  3944                           ;Main.c: 234:             SelectServo = 1;
  3945  01C6  01FC               	clrf	_SelectServo
  3946  01C7  0AFC               	incf	_SelectServo,f
  3947  01C8  29A7               	goto	i1l2005
  3948  01C9                     i1l2021:
  3949  01C9  3063               	movlw	99
  3950  01CA  067A               	xorwf	_result,w
  3951  01CB  1D03               	btfss	3,2
  3952  01CC  29CE               	goto	u141_21
  3953  01CD  29CF               	goto	u141_20
  3954  01CE                     u141_21:
  3955  01CE  29E6               	goto	i1l2033
  3956  01CF                     u141_20:
  3957  01CF                     i1l2023:
  3958                           
  3959                           ;Main.c: 238:         {;Main.c: 239:             if (count_sp3 == 255)
  3960  01CF  0A3F               	incf	_count_sp3,w
  3961  01D0  1D03               	btfss	3,2
  3962  01D1  29D3               	goto	u142_21
  3963  01D2  29D4               	goto	u142_20
  3964  01D3                     u142_21:
  3965  01D3  29D5               	goto	i1l2027
  3966  01D4                     u142_20:
  3967  01D4                     i1l2025:
  3968                           
  3969                           ;Main.c: 240:             {;Main.c: 241:                 count_sp3 = 0;
  3970  01D4  01BF               	clrf	_count_sp3
  3971  01D5                     i1l2027:
  3972                           
  3973                           ;Main.c: 243:             count_sp3++;
  3974  01D5  3001               	movlw	1
  3975  01D6  00A0               	movwf	??_isr1
  3976  01D7  0820               	movf	??_isr1,w
  3977  01D8  07BF               	addwf	_count_sp3,f
  3978  01D9                     i1l2029:
  3979                           
  3980                           ;Main.c: 244:             EEPROM_Write(0x02, count_sp3);
  3981  01D9  083F               	movf	_count_sp3,w
  3982  01DA  00A0               	movwf	??_isr1
  3983  01DB  0820               	movf	??_isr1,w
  3984  01DC  00F0               	movwf	EEPROM_Write@Data
  3985  01DD  3002               	movlw	2
  3986  01DE  120A  118A  25F2  120A  118A  	fcall	_EEPROM_Write
  3987  01E3                     i1l2031:
  3988                           
  3989                           ;Main.c: 245:             OpenServo = 0;
  3990  01E3  1283               	bcf	3,5	;RP0=0, select bank0
  3991  01E4  1303               	bcf	3,6	;RP1=0, select bank0
  3992  01E5  01C3               	clrf	_OpenServo
  3993  01E6                     i1l2033:
  3994                           
  3995                           ;Main.c: 247:         flag_dc = 1;
  3996  01E6  01C9               	clrf	_flag_dc
  3997  01E7  0AC9               	incf	_flag_dc,f
  3998  01E8                     i1l2035:
  3999                           
  4000                           ;Main.c: 248:         setPWM_DutyCycle(ADC_Read(0));
  4001  01E8  3000               	movlw	0
  4002  01E9  120A  118A  2437  120A  118A  	fcall	i1_ADC_Read
  4003  01EE  0871               	movf	?i1_ADC_Read+1,w
  4004  01EF  00F7               	movwf	i1setPWM_DutyCycle@DC+1
  4005  01F0  0870               	movf	?i1_ADC_Read,w
  4006  01F1  00F6               	movwf	i1setPWM_DutyCycle@DC
  4007  01F2  120A  118A  2627  120A  118A  	fcall	i1_setPWM_DutyCycle
  4008  01F7                     i1l2037:
  4009                           
  4010                           ;Main.c: 249:         LCD_SWAP = 1;
  4011  01F7  1283               	bcf	3,5	;RP0=0, select bank0
  4012  01F8  1303               	bcf	3,6	;RP1=0, select bank0
  4013  01F9  01CA               	clrf	_LCD_SWAP
  4014  01FA  0ACA               	incf	_LCD_SWAP,f
  4015  01FB                     i1l2039:
  4016                           
  4017                           ;Main.c: 250:         result = '\0';
  4018  01FB  01FA               	clrf	_result
  4019  01FC                     i1l2041:
  4020                           
  4021                           ;Main.c: 252:         RCIF = 0;
  4022  01FC  128C               	bcf	12,5	;volatile
  4023  01FD                     i1l333:
  4024  01FD  0827               	movf	??_isr1+7,w
  4025  01FE  00FF               	movwf	btemp+1
  4026  01FF  0826               	movf	??_isr1+6,w
  4027  0200  008A               	movwf	10
  4028  0201  0825               	movf	??_isr1+5,w
  4029  0202  0084               	movwf	4
  4030  0203  0E24               	swapf	??_isr1+4,w
  4031  0204  0083               	movwf	3
  4032  0205  0EFE               	swapf	btemp,f
  4033  0206  0E7E               	swapf	btemp,w
  4034  0207  0009               	retfie
  4035  0208                     __end_of_isr1:
  4036                           
  4037                           	psect	intentry
  4038  0004                     __pintentry:	
  4039                           ;incstack = 0
  4040 ;; hardware stack exceeded
  4041                           ; Regs used in _isr1: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4042                           
  4043  0004                     interrupt_function:
  4044  007E                     saved_w	set	btemp
  4045  0004  00FE               	movwf	btemp
  4046  0005  0E03               	swapf	3,w
  4047  0006  1283               	bcf	3,5	;RP0=0, select bank0
  4048  0007  1303               	bcf	3,6	;RP1=0, select bank0
  4049  0008  00A4               	movwf	??_isr1+4
  4050  0009  0804               	movf	4,w
  4051  000A  00A5               	movwf	??_isr1+5
  4052  000B  080A               	movf	10,w
  4053  000C  00A6               	movwf	??_isr1+6
  4054  000D  087F               	movf	btemp+1,w
  4055  000E  00A7               	movwf	??_isr1+7
  4056  000F  120A  118A  2931   	ljmp	_isr1
  4057                           
  4058                           	psect	text26
  4059  0627                     __ptext26:	
  4060 ;; *************** function i1_setPWM_DutyCycle *****************
  4061 ;; Defined at:
  4062 ;;		line 383 in file "Main.c"
  4063 ;; Parameters:    Size  Location     Type
  4064 ;;  DC              2    6[COMMON] unsigned int 
  4065 ;; Auto vars:     Size  Location     Type
  4066 ;;		None
  4067 ;; Return value:  Size  Location     Type
  4068 ;;                  1    wreg      void 
  4069 ;; Registers used:
  4070 ;;		wreg, status,2, status,0
  4071 ;; Tracked objects:
  4072 ;;		On entry : 0/0
  4073 ;;		On exit  : 0/0
  4074 ;;		Unchanged: 0/0
  4075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4076 ;;      Params:         2       0       0       0       0
  4077 ;;      Locals:         0       0       0       0       0
  4078 ;;      Temps:          2       0       0       0       0
  4079 ;;      Totals:         4       0       0       0       0
  4080 ;;Total ram usage:        4 bytes
  4081 ;; Hardware stack levels used:    1
  4082 ;; This function calls:
  4083 ;;		Nothing
  4084 ;; This function is called by:
  4085 ;;		_isr1
  4086 ;; This function uses a non-reentrant model
  4087 ;;
  4088                           
  4089                           
  4090                           ;psect for function i1_setPWM_DutyCycle
  4091  0627                     i1_setPWM_DutyCycle:
  4092  0627                     i1l1861:	
  4093                           ;incstack = 0
  4094 ;; hardware stack exceeded
  4095                           ; Regs used in i1_setPWM_DutyCycle: [wreg+status,2+status,0]
  4096                           
  4097                           
  4098                           ;Main.c: 383: void setPWM_DutyCycle(uint16_t DC);Main.c: 384: {;Main.c: 388:     CCP1Y =
      +                           DC & (1 << 0);
  4099  0627  1876               	btfsc	i1setPWM_DutyCycle@DC,0
  4100  0628  2E2A               	goto	u124_21
  4101  0629  2E2E               	goto	u124_20
  4102  062A                     u124_21:
  4103  062A  1283               	bcf	3,5	;RP0=0, select bank0
  4104  062B  1303               	bcf	3,6	;RP1=0, select bank0
  4105  062C  1617               	bsf	23,4	;volatile
  4106  062D  2E31               	goto	u125_24
  4107  062E                     u124_20:
  4108  062E  1283               	bcf	3,5	;RP0=0, select bank0
  4109  062F  1303               	bcf	3,6	;RP1=0, select bank0
  4110  0630  1217               	bcf	23,4	;volatile
  4111  0631                     u125_24:
  4112                           
  4113                           ;Main.c: 389:     CCP1X = DC & (1 << 1);
  4114  0631  1297               	bcf	23,5	;volatile
  4115  0632                     i1l1863:
  4116                           
  4117                           ;Main.c: 391:     CCPR1L = DC >> 2;
  4118  0632  0877               	movf	i1setPWM_DutyCycle@DC+1,w
  4119  0633  00F9               	movwf	??i1_setPWM_DutyCycle+1
  4120  0634  0876               	movf	i1setPWM_DutyCycle@DC,w
  4121  0635  00F8               	movwf	??i1_setPWM_DutyCycle
  4122  0636  1003               	clrc
  4123  0637  0CF9               	rrf	??i1_setPWM_DutyCycle+1,f
  4124  0638  0CF8               	rrf	??i1_setPWM_DutyCycle,f
  4125  0639  1003               	clrc
  4126  063A  0CF9               	rrf	??i1_setPWM_DutyCycle+1,f
  4127  063B  0CF8               	rrf	??i1_setPWM_DutyCycle,f
  4128  063C  0878               	movf	??i1_setPWM_DutyCycle,w
  4129  063D  0095               	movwf	21	;volatile
  4130  063E                     i1l366:
  4131  063E  0008               	return
  4132  063F                     __end_ofi1_setPWM_DutyCycle:
  4133                           
  4134                           	psect	text27
  4135  0437                     __ptext27:	
  4136 ;; *************** function i1_ADC_Read *****************
  4137 ;; Defined at:
  4138 ;;		line 325 in file "Main.c"
  4139 ;; Parameters:    Size  Location     Type
  4140 ;;  ADC_channel     1    wreg     unsigned char 
  4141 ;; Auto vars:     Size  Location     Type
  4142 ;;  ADC_channel     1    5[COMMON] unsigned char 
  4143 ;;  result          2    3[COMMON] unsigned int 
  4144 ;; Return value:  Size  Location     Type
  4145 ;;                  2    0[COMMON] unsigned int 
  4146 ;; Registers used:
  4147 ;;		wreg, status,2, status,0
  4148 ;; Tracked objects:
  4149 ;;		On entry : 0/0
  4150 ;;		On exit  : 0/0
  4151 ;;		Unchanged: 0/0
  4152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4153 ;;      Params:         2       0       0       0       0
  4154 ;;      Locals:         3       0       0       0       0
  4155 ;;      Temps:          1       0       0       0       0
  4156 ;;      Totals:         6       0       0       0       0
  4157 ;;Total ram usage:        6 bytes
  4158 ;; Hardware stack levels used:    1
  4159 ;; This function calls:
  4160 ;;		Nothing
  4161 ;; This function is called by:
  4162 ;;		_isr1
  4163 ;; This function uses a non-reentrant model
  4164 ;;
  4165                           
  4166                           
  4167                           ;psect for function i1_ADC_Read
  4168  0437                     i1_ADC_Read:
  4169                           
  4170                           ;incstack = 0
  4171 ;; hardware stack exceeded
  4172                           ; Regs used in i1_ADC_Read: [wreg+status,2+status,0]
  4173                           ;i1ADC_Read@ADC_channel stored from wreg
  4174  0437  00F5               	movwf	i1ADC_Read@ADC_channel
  4175  0438                     i1l1845:
  4176                           
  4177                           ;Main.c: 325: uint16_t ADC_Read(uint8_t ADC_channel);Main.c: 326: {;Main.c: 328:     if 
      +                          (ADC_channel < 0 || ADC_channel > 7)
  4178  0438  3008               	movlw	8
  4179  0439  0275               	subwf	i1ADC_Read@ADC_channel,w
  4180  043A  1C03               	skipc
  4181  043B  2C3D               	goto	u114_21
  4182  043C  2C3E               	goto	u114_20
  4183  043D                     u114_21:
  4184  043D  2C41               	goto	i1l351
  4185  043E                     u114_20:
  4186  043E                     i1l1847:
  4187                           
  4188                           ;Main.c: 329:         return 0;
  4189  043E  01F0               	clrf	?i1_ADC_Read
  4190  043F  01F1               	clrf	?i1_ADC_Read+1
  4191  0440  2C85               	goto	i1l352
  4192  0441                     i1l351:
  4193                           
  4194                           ;Main.c: 332:     CHS0 = (ADC_channel & 1) >> 0;
  4195  0441  1875               	btfsc	i1ADC_Read@ADC_channel,0
  4196  0442  2C44               	goto	u115_21
  4197  0443  2C48               	goto	u115_20
  4198  0444                     u115_21:
  4199  0444  1283               	bcf	3,5	;RP0=0, select bank0
  4200  0445  1303               	bcf	3,6	;RP1=0, select bank0
  4201  0446  159F               	bsf	31,3	;volatile
  4202  0447  2C4B               	goto	u116_24
  4203  0448                     u115_20:
  4204  0448  1283               	bcf	3,5	;RP0=0, select bank0
  4205  0449  1303               	bcf	3,6	;RP1=0, select bank0
  4206  044A  119F               	bcf	31,3	;volatile
  4207  044B                     u116_24:
  4208  044B                     i1l1851:
  4209                           
  4210                           ;Main.c: 333:     CHS1 = (ADC_channel & 2) >> 1;
  4211  044B  0875               	movf	i1ADC_Read@ADC_channel,w
  4212  044C  00F2               	movwf	??i1_ADC_Read
  4213  044D  3001               	movlw	1
  4214  044E                     u117_25:
  4215  044E  1003               	clrc
  4216  044F  0CF2               	rrf	??i1_ADC_Read,f
  4217  0450  3EFF               	addlw	-1
  4218  0451  1D03               	skipz
  4219  0452  2C4E               	goto	u117_25
  4220  0453  1872               	btfsc	??i1_ADC_Read,0
  4221  0454  2C56               	goto	u118_21
  4222  0455  2C5A               	goto	u118_20
  4223  0456                     u118_21:
  4224  0456  1283               	bcf	3,5	;RP0=0, select bank0
  4225  0457  1303               	bcf	3,6	;RP1=0, select bank0
  4226  0458  161F               	bsf	31,4	;volatile
  4227  0459  2C5D               	goto	u119_24
  4228  045A                     u118_20:
  4229  045A  1283               	bcf	3,5	;RP0=0, select bank0
  4230  045B  1303               	bcf	3,6	;RP1=0, select bank0
  4231  045C  121F               	bcf	31,4	;volatile
  4232  045D                     u119_24:
  4233                           
  4234                           ;Main.c: 334:     CHS2 = (ADC_channel & 4) >> 2;
  4235  045D  0875               	movf	i1ADC_Read@ADC_channel,w
  4236  045E  00F2               	movwf	??i1_ADC_Read
  4237  045F  3002               	movlw	2
  4238  0460                     u120_25:
  4239  0460  1003               	clrc
  4240  0461  0CF2               	rrf	??i1_ADC_Read,f
  4241  0462  3EFF               	addlw	-1
  4242  0463  1D03               	skipz
  4243  0464  2C60               	goto	u120_25
  4244  0465  1872               	btfsc	??i1_ADC_Read,0
  4245  0466  2C68               	goto	u121_21
  4246  0467  2C6C               	goto	u121_20
  4247  0468                     u121_21:
  4248  0468  1283               	bcf	3,5	;RP0=0, select bank0
  4249  0469  1303               	bcf	3,6	;RP1=0, select bank0
  4250  046A  169F               	bsf	31,5	;volatile
  4251  046B  2C6F               	goto	u122_24
  4252  046C                     u121_20:
  4253  046C  1283               	bcf	3,5	;RP0=0, select bank0
  4254  046D  1303               	bcf	3,6	;RP1=0, select bank0
  4255  046E  129F               	bcf	31,5	;volatile
  4256  046F                     u122_24:
  4257  046F                     i1l1853:
  4258                           
  4259                           ;Main.c: 337:     _delay((unsigned long)((25)*(20000000/4000000.0)));
  4260  046F  3029               	movlw	41
  4261  0470  00F2               	movwf	??i1_ADC_Read
  4262  0471                     u155_27:
  4263  0471  0BF2               	decfsz	??i1_ADC_Read,f
  4264  0472  2C71               	goto	u155_27
  4265  0473  0000               	nop
  4266  0474                     i1l1855:
  4267                           
  4268                           ;Main.c: 340:     GO_DONE = 1;
  4269  0474  1283               	bcf	3,5	;RP0=0, select bank0
  4270  0475  1303               	bcf	3,6	;RP1=0, select bank0
  4271  0476  151F               	bsf	31,2	;volatile
  4272  0477                     i1l353:	
  4273                           ;Main.c: 344:         ;
  4274                           
  4275                           
  4276                           ;Main.c: 343:     while (GO_DONE)
  4277  0477  191F               	btfsc	31,2	;volatile
  4278  0478  2C7A               	goto	u123_21
  4279  0479  2C7B               	goto	u123_20
  4280  047A                     u123_21:
  4281  047A  2C77               	goto	i1l353
  4282  047B                     u123_20:
  4283  047B                     i1l1857:
  4284                           
  4285                           ;Main.c: 347:     uint16_t result = ((ADRESH << 8) + ADRESL);
  4286  047B  081E               	movf	30,w	;volatile
  4287  047C  00F4               	movwf	i1ADC_Read@result+1
  4288  047D  1683               	bsf	3,5	;RP0=1, select bank1
  4289  047E  1303               	bcf	3,6	;RP1=0, select bank1
  4290  047F  081E               	movf	30,w	;volatile
  4291  0480  00F3               	movwf	i1ADC_Read@result
  4292                           
  4293                           ;Main.c: 348:     return result;
  4294  0481  0874               	movf	i1ADC_Read@result+1,w
  4295  0482  00F1               	movwf	?i1_ADC_Read+1
  4296  0483  0873               	movf	i1ADC_Read@result,w
  4297  0484  00F0               	movwf	?i1_ADC_Read
  4298  0485                     i1l352:
  4299  0485  0008               	return
  4300  0486                     __end_ofi1_ADC_Read:
  4301                           
  4302                           	psect	text28
  4303  059A                     __ptext28:	
  4304 ;; *************** function _UART_send_string *****************
  4305 ;; Defined at:
  4306 ;;		line 410 in file "Main.c"
  4307 ;; Parameters:    Size  Location     Type
  4308 ;;  st_pt           1    wreg     PTR unsigned char 
  4309 ;;		 -> STR_4(7), 
  4310 ;; Auto vars:     Size  Location     Type
  4311 ;;  st_pt           1    2[COMMON] PTR unsigned char 
  4312 ;;		 -> STR_4(7), 
  4313 ;; Return value:  Size  Location     Type
  4314 ;;                  1    wreg      void 
  4315 ;; Registers used:
  4316 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4317 ;; Tracked objects:
  4318 ;;		On entry : 0/0
  4319 ;;		On exit  : 0/0
  4320 ;;		Unchanged: 0/0
  4321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4322 ;;      Params:         0       0       0       0       0
  4323 ;;      Locals:         1       0       0       0       0
  4324 ;;      Temps:          1       0       0       0       0
  4325 ;;      Totals:         2       0       0       0       0
  4326 ;;Total ram usage:        2 bytes
  4327 ;; Hardware stack levels used:    1
  4328 ;; Hardware stack levels required when called:    1
  4329 ;; This function calls:
  4330 ;;		_UART_send_char
  4331 ;; This function is called by:
  4332 ;;		_isr1
  4333 ;; This function uses a non-reentrant model
  4334 ;;
  4335                           
  4336                           
  4337                           ;psect for function _UART_send_string
  4338  059A                     _UART_send_string:
  4339                           
  4340                           ;incstack = 0
  4341 ;; hardware stack exceeded
  4342                           ; Regs used in _UART_send_string: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4343                           ;UART_send_string@st_pt stored from wreg
  4344  059A  00F2               	movwf	UART_send_string@st_pt
  4345  059B                     i1l1819:
  4346                           
  4347                           ;Main.c: 410: void UART_send_string(char *st_pt);Main.c: 411: {;Main.c: 412:     while (
      +                          *st_pt)
  4348  059B  2DAC               	goto	i1l1825
  4349  059C                     i1l1821:
  4350                           
  4351                           ;Main.c: 413:         UART_send_char(*st_pt++);
  4352  059C  0872               	movf	UART_send_string@st_pt,w
  4353  059D  0084               	movwf	4
  4354  059E  120A  118A  2486  120A  118A  	fcall	stringdir
  4355  05A3  120A  118A  26A9  120A  118A  	fcall	_UART_send_char
  4356  05A8                     i1l1823:
  4357  05A8  3001               	movlw	1
  4358  05A9  00F1               	movwf	??_UART_send_string
  4359  05AA  0871               	movf	??_UART_send_string,w
  4360  05AB  07F2               	addwf	UART_send_string@st_pt,f
  4361  05AC                     i1l1825:
  4362                           
  4363                           ;Main.c: 412:     while (*st_pt)
  4364  05AC  0872               	movf	UART_send_string@st_pt,w
  4365  05AD  0084               	movwf	4
  4366  05AE  120A  118A  2486  120A  118A  	fcall	stringdir
  4367  05B3  3A00               	xorlw	0
  4368  05B4  1D03               	skipz
  4369  05B5  2DB7               	goto	u112_21
  4370  05B6  2DB8               	goto	u112_20
  4371  05B7                     u112_21:
  4372  05B7  2D9C               	goto	i1l1821
  4373  05B8                     u112_20:
  4374  05B8                     i1l381:
  4375  05B8  0008               	return
  4376  05B9                     __end_of_UART_send_string:
  4377                           
  4378                           	psect	text29
  4379  06A9                     __ptext29:	
  4380 ;; *************** function _UART_send_char *****************
  4381 ;; Defined at:
  4382 ;;		line 403 in file "Main.c"
  4383 ;; Parameters:    Size  Location     Type
  4384 ;;  bt              1    wreg     unsigned char 
  4385 ;; Auto vars:     Size  Location     Type
  4386 ;;  bt              1    0[COMMON] unsigned char 
  4387 ;; Return value:  Size  Location     Type
  4388 ;;                  1    wreg      void 
  4389 ;; Registers used:
  4390 ;;		wreg
  4391 ;; Tracked objects:
  4392 ;;		On entry : 0/0
  4393 ;;		On exit  : 0/0
  4394 ;;		Unchanged: 0/0
  4395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4396 ;;      Params:         0       0       0       0       0
  4397 ;;      Locals:         1       0       0       0       0
  4398 ;;      Temps:          0       0       0       0       0
  4399 ;;      Totals:         1       0       0       0       0
  4400 ;;Total ram usage:        1 bytes
  4401 ;; Hardware stack levels used:    1
  4402 ;; This function calls:
  4403 ;;		Nothing
  4404 ;; This function is called by:
  4405 ;;		_UART_send_string
  4406 ;; This function uses a non-reentrant model
  4407 ;;
  4408                           
  4409                           
  4410                           ;psect for function _UART_send_char
  4411  06A9                     _UART_send_char:
  4412                           
  4413                           ;incstack = 0
  4414 ;; hardware stack exceeded
  4415                           ; Regs used in _UART_send_char: [wreg]
  4416                           ;UART_send_char@bt stored from wreg
  4417  06A9  00F0               	movwf	UART_send_char@bt
  4418  06AA                     i1l1587:
  4419  06AA                     i1l372:	
  4420                           ;Main.c: 406:         ;
  4421                           
  4422                           
  4423                           ;Main.c: 405:     while (!TRMT)
  4424  06AA  1683               	bsf	3,5	;RP0=1, select bank1
  4425  06AB  1303               	bcf	3,6	;RP1=0, select bank1
  4426  06AC  1C98               	btfss	24,1	;volatile
  4427  06AD  2EAF               	goto	u77_21
  4428  06AE  2EB0               	goto	u77_20
  4429  06AF                     u77_21:
  4430  06AF  2EAA               	goto	i1l372
  4431  06B0                     u77_20:
  4432  06B0                     i1l1589:
  4433                           
  4434                           ;Main.c: 407:     TXREG = bt;
  4435  06B0  0870               	movf	UART_send_char@bt,w
  4436  06B1  1283               	bcf	3,5	;RP0=0, select bank0
  4437  06B2  1303               	bcf	3,6	;RP1=0, select bank0
  4438  06B3  0099               	movwf	25	;volatile
  4439  06B4                     i1l375:
  4440  06B4  0008               	return
  4441  06B5                     __end_of_UART_send_char:
  4442                           
  4443                           	psect	text30
  4444  05F2                     __ptext30:	
  4445 ;; *************** function _EEPROM_Write *****************
  4446 ;; Defined at:
  4447 ;;		line 448 in file "Main.c"
  4448 ;; Parameters:    Size  Location     Type
  4449 ;;  Address         1    wreg     unsigned char 
  4450 ;;  Data            1    0[COMMON] unsigned char 
  4451 ;; Auto vars:     Size  Location     Type
  4452 ;;  Address         1    1[COMMON] unsigned char 
  4453 ;; Return value:  Size  Location     Type
  4454 ;;                  1    wreg      void 
  4455 ;; Registers used:
  4456 ;;		wreg
  4457 ;; Tracked objects:
  4458 ;;		On entry : 0/0
  4459 ;;		On exit  : 0/0
  4460 ;;		Unchanged: 0/0
  4461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4462 ;;      Params:         1       0       0       0       0
  4463 ;;      Locals:         1       0       0       0       0
  4464 ;;      Temps:          0       0       0       0       0
  4465 ;;      Totals:         2       0       0       0       0
  4466 ;;Total ram usage:        2 bytes
  4467 ;; Hardware stack levels used:    1
  4468 ;; This function calls:
  4469 ;;		Nothing
  4470 ;; This function is called by:
  4471 ;;		_isr1
  4472 ;; This function uses a non-reentrant model
  4473 ;;
  4474                           
  4475                           
  4476                           ;psect for function _EEPROM_Write
  4477  05F2                     _EEPROM_Write:
  4478                           
  4479                           ;incstack = 0
  4480 ;; hardware stack exceeded
  4481                           ; Regs used in _EEPROM_Write: [wreg]
  4482                           ;EEPROM_Write@Address stored from wreg
  4483  05F2  00F1               	movwf	EEPROM_Write@Address
  4484  05F3                     i1l1827:
  4485  05F3                     i1l390:	
  4486                           ;Main.c: 451:         ;
  4487                           
  4488                           
  4489                           ;Main.c: 450:     while (WR)
  4490  05F3  1683               	bsf	3,5	;RP0=1, select bank3
  4491  05F4  1703               	bsf	3,6	;RP1=1, select bank3
  4492  05F5  188C               	btfsc	12,1	;volsfr
  4493  05F6  2DF8               	goto	u113_21
  4494  05F7  2DF9               	goto	u113_20
  4495  05F8                     u113_21:
  4496  05F8  2DF3               	goto	i1l390
  4497  05F9                     u113_20:
  4498  05F9                     i1l1829:
  4499                           
  4500                           ;Main.c: 452:     EEADR = Address;
  4501  05F9  0871               	movf	EEPROM_Write@Address,w
  4502  05FA  1283               	bcf	3,5	;RP0=0, select bank2
  4503  05FB  1703               	bsf	3,6	;RP1=1, select bank2
  4504  05FC  008D               	movwf	13	;volatile
  4505                           
  4506                           ;Main.c: 453:     EEDATA = Data;
  4507  05FD  0870               	movf	EEPROM_Write@Data,w
  4508  05FE  008C               	movwf	12	;volatile
  4509  05FF                     i1l1831:
  4510                           
  4511                           ;Main.c: 454:     EEPGD = 0;
  4512  05FF  1683               	bsf	3,5	;RP0=1, select bank3
  4513  0600  1703               	bsf	3,6	;RP1=1, select bank3
  4514  0601  138C               	bcf	12,7	;volsfr
  4515  0602                     i1l1833:
  4516                           
  4517                           ;Main.c: 455:     EECON1bits.WREN = 1;
  4518  0602  150C               	bsf	12,2	;volsfr
  4519  0603                     i1l1835:
  4520                           
  4521                           ;Main.c: 456:     GIE = 0;
  4522  0603  138B               	bcf	11,7	;volatile
  4523                           
  4524                           ;Main.c: 457:     EECON2 = 0x55;
  4525  0604  3055               	movlw	85
  4526  0605  008D               	movwf	13	;volsfr
  4527                           
  4528                           ;Main.c: 458:     EECON2 = 0xAA;
  4529  0606  30AA               	movlw	170
  4530  0607  008D               	movwf	13	;volsfr
  4531  0608                     i1l1837:
  4532                           
  4533                           ;Main.c: 459:     EECON1bits.WR = 1;
  4534  0608  148C               	bsf	12,1	;volsfr
  4535  0609                     i1l1839:
  4536                           
  4537                           ;Main.c: 460:     GIE = 1;
  4538  0609  178B               	bsf	11,7	;volatile
  4539  060A                     i1l1841:
  4540                           
  4541                           ;Main.c: 461:     EECON1bits.WREN = 0;
  4542  060A  110C               	bcf	12,2	;volsfr
  4543  060B                     i1l1843:
  4544                           
  4545                           ;Main.c: 462:     EECON1bits.WR = 0;
  4546  060B  108C               	bcf	12,1	;volsfr
  4547  060C                     i1l393:
  4548  060C  0008               	return
  4549  060D                     __end_of_EEPROM_Write:
  4550  007E                     btemp	set	126	;btemp
  4551  007E                     wtemp0	set	126
  4552                           
  4553                           	psect	config
  4554                           
  4555                           ;Config register CONFIG @ 0x2007
  4556                           ;	Oscillator Selection bits
  4557                           ;	FOSC = HS, HS oscillator
  4558                           ;	Watchdog Timer Enable bit
  4559                           ;	WDTE = OFF, WDT disabled
  4560                           ;	Power-up Timer Enable bit
  4561                           ;	PWRTE = OFF, PWRT disabled
  4562                           ;	Brown-out Reset Enable bit
  4563                           ;	BOREN = OFF, BOR disabled
  4564                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  4565                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  4566                           ;	Data EEPROM Memory Code Protection bit
  4567                           ;	CPD = OFF, Data EEPROM code protection off
  4568                           ;	Flash Program Memory Write Enable bits
  4569                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  4570                           ;	In-Circuit Debugger Mode bit
  4571                           ;	DEBUG = 0x1, unprogrammed default
  4572                           ;	Flash Program Memory Code Protection bit
  4573                           ;	CP = OFF, Code protection off
  4574  2007                     	org	8199
  4575  2007  3F3A               	dw	16186

Data Sizes:
    Strings     57
    Constant    0
    Data        8
    BSS         11
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      14
    BANK0            80     29      45
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    UART_send_string@st_pt	PTR unsigned char  size(1) Largest target is 7
		 -> STR_4(CODE[7]), 

    LCD_Write_String@Str	PTR unsigned char  size(1) Largest target is 17
		 -> STR_3(CODE[16]), STR_2(CODE[17]), STR_1(CODE[17]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr1 in COMMON

    _isr1->i1_setPWM_DutyCycle
    i1_setPWM_DutyCycle->i1_ADC_Read
    _UART_send_string->_UART_send_char

Critical Paths under _main in BANK0

    _main->_LCD_Write
    _setPWM_DutyCycle->_ADC_Read
    _LCD_Write_String->_LCD_Write_Char
    _LCD_Write->_LCD_Set_Cursor
    _LCD_Write_Char->_LCD_Write_4Bit
    _LCD_Set_Cursor->_LCD_CMD
    _LCD_Init->_LCD_CMD
    _LCD_Clear->_LCD_CMD
    _LCD_CMD->_LCD_Write_4Bit
    _LCD_Write_4Bit->_IO_Expander_Write
    _IO_Expander_Write->_I2C_Master_Write

Critical Paths under _isr1 in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr1 in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr1 in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr1 in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    3707
                                             27 BANK0      2     2      0
                           _ADC_Init
                           _ADC_Read
                        _EEPROM_Read
                    _I2C_Master_Init
                            _IR_Init
                          _LCD_Clear
                           _LCD_Init
                     _LCD_Set_Cursor
                          _LCD_Write
                   _LCD_Write_String
                         _Servo_Init
                        _config_UART
                           _init_PWM
                   _setPWM_DutyCycle
 ---------------------------------------------------------------------------------
 (1) _setPWM_DutyCycle                                     4     2      2     220
                                             14 BANK0      4     2      2
                           _ADC_Read (ARG)
 ---------------------------------------------------------------------------------
 (1) _init_PWM                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _config_UART                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Servo_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_Write_String                                     3     3      0     322
                                             14 BANK0      3     3      0
                     _LCD_Write_Char
 ---------------------------------------------------------------------------------
 (1) _LCD_Write                                            9     7      2    2197
                                             18 BANK0      9     7      2
                     _LCD_Set_Cursor
                     _LCD_Write_Char
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     448
                                              8 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     452
                                              8 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (2) _LCD_Write_Char                                       2     2      0     133
                                             12 BANK0      2     2      0
                     _LCD_Write_4Bit
 ---------------------------------------------------------------------------------
 (2) _LCD_Set_Cursor                                       4     3      1     503
                                             14 BANK0      4     3      1
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             4     4      0     199
                                             14 BANK0      4     4      0
                  _IO_Expander_Write
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            1     1      0     133
                                             14 BANK0      1     1      0
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _LCD_CMD                                              2     2      0     133
                                             12 BANK0      2     2      0
                     _LCD_Write_4Bit
 ---------------------------------------------------------------------------------
 (3) _LCD_Write_4Bit                                       2     2      0      89
                                             10 BANK0      2     2      0
                  _IO_Expander_Write
 ---------------------------------------------------------------------------------
 (4) _IO_Expander_Write                                    1     1      0      44
                                              9 BANK0      1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     1     1      0      22
                                              8 BANK0      1     1      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _IR_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Read                                          1     1      0      22
                                              8 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             6     4      2     111
                                              8 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _isr1                                                 8     8      0     579
                                              0 BANK0      8     8      0
                       _EEPROM_Write
                   _UART_send_string
                         i1_ADC_Read
                 i1_setPWM_DutyCycle
 ---------------------------------------------------------------------------------
 (9) i1_setPWM_DutyCycle                                   4     2      2      96
                                              6 COMMON     4     2      2
                         i1_ADC_Read (ARG)
 ---------------------------------------------------------------------------------
 (9) i1_ADC_Read                                           6     4      2     111
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (9) _UART_send_string                                     2     2      0     100
                                              1 COMMON     2     2      0
                     _UART_send_char
 ---------------------------------------------------------------------------------
 (10) _UART_send_char                                      1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _EEPROM_Write                                         2     1      1     272
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _ADC_Read
   _EEPROM_Read
   _I2C_Master_Init
   _IR_Init
   _LCD_Clear
     _LCD_CMD
       _LCD_Write_4Bit
         _IO_Expander_Write
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
   _LCD_Init
     _IO_Expander_Write
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _LCD_CMD
       _LCD_Write_4Bit
         _IO_Expander_Write
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
   _LCD_Set_Cursor
     _LCD_CMD
       _LCD_Write_4Bit
         _IO_Expander_Write
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
   _LCD_Write
     _LCD_Set_Cursor
       _LCD_CMD
         _LCD_Write_4Bit
           _IO_Expander_Write
             _I2C_Master_Start
               _I2C_Master_Wait
             _I2C_Master_Stop
               _I2C_Master_Wait
             _I2C_Master_Write
               _I2C_Master_Wait
     _LCD_Write_Char
       _LCD_Write_4Bit
         _IO_Expander_Write
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
     ___awdiv
     ___awmod
   _LCD_Write_String
     _LCD_Write_Char
       _LCD_Write_4Bit
         _IO_Expander_Write
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
   _Servo_Init
   _config_UART
   _init_PWM
   _setPWM_DutyCycle
     _ADC_Read (ARG)

 _isr1 (ROOT)
   _EEPROM_Write
   _UART_send_string
     _UART_send_char
   i1_ADC_Read
   i1_setPWM_DutyCycle
     i1_ADC_Read (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1D      2D       5       56.2%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      A       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      3B      12        0.0%
ABS                  0      0      3B       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Thu Jun 09 03:56:23 2022

                          pc 0002                           l40 068F                           l43 069B  
                         l52 065E                           l37 06A8                           l61 0599  
                         l46 06D1                           l54 0662                           l70 055B  
                         l55 0663                           l64 057A                           l49 06C8  
                         l58 02B4                           l67 05D6                           l83 053C  
                         l76 051A                           l98 0680                           _RS 0044  
                         _WR 0C61                 ___awdiv@sign 002E                           fsr 0004  
          ?_setPWM_DutyCycle 002E                  ?i1_ADC_Read 0070                          l351 03EE  
                        l352 0436                          l336 06BF                          l360 04EB  
                        l353 0426                          l345 031D                          l361 04D2  
                        l362 04D7                          l363 04F1                          l348 068E  
                        l366 0626                          l359 04CD                          l632 0386  
                        l384 05F1                          l369 06DE                          l387 0672  
                        l645 03E1                          _GIE 005F                          _RB1 0031  
                        _RB2 0032                          _RB5 0035                          _RB6 0036  
                        _PS0 0408                          _PR2 0092                          _PS1 0409  
                        _PEN 048A                          _PS2 040A                          u720 0695  
                        u800 0341                          u721 0694                          u801 0340  
                        u730 069B                          u731 069A                          u740 0662  
                        u820 0353                          u900 03A4                          _SEN 0488  
                        u741 0661                          u821 0352                          u901 03A3  
                        u815 0345                          _PSA 040B                          u840 0364  
                        u920 03B6                          u841 0363                          u921 03B5  
                        u930 03C0                          u755 05C9                          u835 0354  
                        u931 03BF                          u915 03A8                          u860 0378  
                        u780 0325                          u765 054E                          u861 0377  
                        u845 0360                          u781 0324                          u870 037D  
                        u790 0330                          u950 03D3                          u871 037C  
                        u855 036C                          u791 032F                          u951 03D2  
                        u935 03BC                          u960 03D8                          u880 038E  
                        u961 03D7                          u945 03C7                          u881 038D  
                        _RX9 00C6                          u890 0399                          u970 051A  
                        u891 0398                          u971 0519                          u980 0309  
                        u981 0308                          u990 031D                          u991 031C  
                        _TX9 04C6                          _pos 007D                          fsr0 0004  
                        indf 0000           ??_setPWM_DutyCycle 0030                 ___awmod@sign 002E  
            __end_of_LCD_CMD 05D7          LCD_Write_String@Str 0030               _LCD_Set_Cursor 051B  
                       l1601 0330                         l1611 0344                         l1603 0335  
                       l1541 0695                         l1701 0278                         l1621 036A  
                       l1613 034B                         l1605 0339                         l2093 04E0  
                       l1543 06C9                         l1551 0655                         l1703 027E  
                       l2095 0537                         l1631 0382                         l1623 036B  
                       l1615 034F                         l1607 033B                         l1711 04F8  
                       l1801 03EB                         l1545 06CE                         l1553 065A  
                       l1561 056A                         l1705 0292                         l1625 0372  
                       l1617 0353                         l1609 0341                         l1641 0393  
                       l1713 0505                         l1721 06B5                         l1723 0681  
                       l1811 042A                         l1539 068F                         l1547 06C0  
                       l1555 057E                         l1563 05BC                         l1707 02A0  
                       l1571 0542                         l1619 0364                         l1627 0378  
                       l1651 03A7                         l1643 0395                         l1635 0387  
                       l1715 050D                         l1805 03F8                         l1549 06C5  
                       l1557 055F                         l1565 05BD                         l1717 0673  
                       l1573 051E                         l1629 037D                         l1661 03C6  
                       l1653 03AE                         l1645 0399                         l1637 038A  
                       l1709 04F5                         l1741 05DC                         l1725 04C5  
                       l1901 0081                         l1807 041C                         l1735 06D9  
                       l1559 0563                         l1567 05C4                         l1719 0679  
                       l1575 051F                         l1591 031E                         l1663 03CD  
                       l1655 03B2                         l1647 039E                         l1639 038E  
                       l1751 05E5                         l1743 05DD                         l1727 04DB  
                       l1815 060D                         l1911 008C                         l1903 0084  
                       l1809 0423                         l1681 06A7                         l1673 069C  
                       l1577 0527                         l1569 0540                         l1593 0321  
                       l1657 03B6                         l1649 03A4                         l1665 03D3  
                       l1761 05EE                         l1753 05E8                         l1745 05E0  
                       l1737 05D7                         l1729 04ED                         l1817 061A  
                       l1921 009F                         l1913 008D                         l1905 0085  
                       l1763 0667                         l1675 06A0                         l1691 0231  
                       l1683 020B                         l1579 052F                         l1595 0325  
                       l1667 03D8                         l1659 03C0                         l1771 02B8  
                       l1755 05EB                         l1747 05E3                         l1739 05DA  
                       l1931 00CB                         l1923 00AA                         l1915 008E  
                       l1907 0088                         l1765 066B                         l1677 06A3  
                       l1693 0242                         l1685 020F                         l1597 032A  
                       l1669 03DD                         l1781 02E2                         l1773 02BD  
                       l1757 05EC                         l1749 05E4                         l1933 00D1  
                       l1941 0104                         l1925 00B5                         l1917 0091  
                       l1909 0089                         l1767 066E                         l1679 06A6  
                       l1695 0248                         l1687 0215                         l1599 032C  
                       l1791 030A                         l1783 02EA                         l1759 05ED  
                       l1943 0109                         l1935 00E1                         l1927 00BC  
                       l1919 0094                         l1697 0259                         l1689 0226  
                       l1793 030D                         l1785 02EE                         l1777 02C1  
                       l1945 010E                         l1937 00F1                         l1929 00C1  
                       l1881 0038                         l1699 0264                         l1795 0313  
                       l1787 0304                         l1779 02D8                         l1947 0112  
                       l1939 0101                         l1891 0068                         l1883 0043  
                       l1797 0317                         l1949 011C                         l1893 006D  
                       l1885 004D                         l1799 03E5                         l1895 0072  
                       l1887 0053                         l1897 0077                         l1889 005D  
                       l1899 007C                         _ADFM 04FF                         _ADON 00F8  
                       _CHS0 00FB                         _CHS1 00FC                         _CHS2 00FD  
                       STR_1 048C                         STR_2 049D                         STR_3 04AE  
                       STR_4 04BE                         _BRGH 04C2                         _T0IE 005D  
                       u1000 03EB                         _T0IF 005A                         _CREN 00C4  
                       u1001 03EA                         _T0CS 040D                         u1010 03F5  
                       u1011 03F1                         u1100 0616                         u1101 0612  
                       u1040 0407                         u1024 03F8                         u1041 0403  
                       u1114 0619                         u1035 03FB                         u1070 0419  
                       u1054 040A                         u1071 0415                         u1065 040D  
                       u1090 042A                         u1091 0429                         u1084 041C  
                       u1260 00BC                         u1261 00BB                         u1270 0109  
                       u1271 0108                         u1280 0119                         u1281 0115  
                       u1507 029A                         u1517 02AE                         u1437 021B  
                       u1294 011C                         u1527 067D                         u1447 022C  
                       u1537 0577                         u1457 023D                         u1547 0420  
                       u1467 024E                         u1477 025F                         u1487 0272  
                       u1497 0286                         _PEIE 005E                         _INTE 005C  
                       _INTF 0059                         _RCIE 0465                         _RCIF 0065  
                       _TMR0 0001                         _SPEN 00C7                         _TRMT 04C1  
                       _TXEN 04C5                         _SYNC 04C4              __end_of_IR_Init 06DF  
          ?_LCD_Write_String 0070                         _isr1 0131                         _main 0038  
         __size_of_LCD_Clear 000E                         btemp 007E             __end_of_ADC_Init 068F  
           __end_of_ADC_Read 0437                         start 0012           ??_LCD_Write_String 002E  
         __size_of_LCD_Write 0069         LCD_Write_4Bit@Nibble 002B    __size_of_UART_send_string 001F  
       __end_of_EEPROM_Write 060D             __end_of_LCD_Init 02B5             ?_I2C_Master_Init 0070  
           ?_I2C_Master_Wait 0070             ?_I2C_Master_Stop 0070  __size_ofi1_setPWM_DutyCycle 0018  
                      _ADCS0 00FE                        _ADCS1 00FF                        _ADCS2 04FE  
                      ?_isr1 0070                        ?_main 0070                        _CCP1X 00BD  
                      _CCP1Y 00BC              __end_of___awdiv 0387                        _EEADR 010D  
            __end_of___awmod 03E2                        _EEPGD 0C67              ___awdiv@divisor 0028  
                      _PCFG0 04F8                        _PCFG1 04F9                        _PCFG2 04FA  
                      _PCFG3 04FB                        i1l333 01FD                        i1l351 0441  
                      i1l352 0485                        i1l353 0477                        i1l372 06AA  
                      i1l381 05B8                        i1l390 05F3                        i1l366 063E  
                      i1l375 06B4                        i1l393 060C              ___awdiv@counter 002D  
                      _RCREG 001A                        _SPBRG 0099                        _SSPIF 0063  
                      u77_20 06B0                        u77_21 06AF                        _TXREG 0019  
     __end_of_LCD_Set_Cursor 053D                  LCD_Write@y_ 0039                        pclath 000A  
                      status 0003                        wtemp0 007E             EEPROM_Write@Data 0070  
        __size_ofi1_ADC_Read 004F         __size_of_EEPROM_Read 000F               _LCD_Write_4Bit 055C  
             _LCD_Write_Char 053D              __initialization 0015                 __end_of_isr1 0208  
               __end_of_main 0131            _IO_Expander_Write 057B           ?_IO_Expander_Write 0070  
                     ??_isr1 0020                       ??_main 003B            __end_of_LCD_Clear 0681  
                  ??_LCD_CMD 002C            __end_of_LCD_Write 031E            ?_I2C_Master_Start 0070  
          ?_I2C_Master_Write 0070          ??_IO_Expander_Write 0029              ?_LCD_Set_Cursor 002E  
                  ??_IR_Init 0028           ??_I2C_Master_Start 0028           ??_I2C_Master_Write 0028  
                     _CCP1M2 00BA                       _CCP1M3 00BB                       _ADRESH 001E  
                     _ADRESL 009E                       _EEDATA 010C                       _CCPR1L 0015  
                     _EECON2 018D             ___awdiv@dividend 002A                       i1l2001 019C  
                     i1l2011 01B7                       i1l2003 01A6                       i1l2013 01B8  
                     i1l2021 01C9                       i1l2005 01A7                       i1l2031 01E3  
                     i1l2023 01CF                       i1l2015 01BC                       i1l2007 01AC  
                     i1l2041 01FC                       i1l2025 01D4                       i1l2017 01C6  
                     i1l2009 01B2                       i1l2033 01E6                       i1l2035 01E8  
                     i1l2027 01D5                       i1l2037 01F7                       i1l2029 01D9  
                     i1l2039 01FB                       u112_20 05B8                       u112_21 05B7  
                     u120_25 0460                       u113_20 05F9                       u121_20 046C  
                     u113_21 05F8                       u121_21 0468                       i1l1821 059C  
                     i1l1831 05FF                       i1l1823 05A8                       u114_20 043E  
                     u130_20 0135                       i1l1841 060A                       i1l1833 0602  
                     i1l1825 05AC                       u114_21 043D                       u130_21 0134  
                     i1l1843 060B                       i1l1835 0603                       i1l1827 05F3  
                     i1l1587 06AA                       i1l1819 059B                       i1l1851 044B  
                     u122_24 046F                       i1l1837 0608                       i1l1829 05F9  
                     i1l1589 06B0                       i1l1853 046F                       i1l1845 0438  
                     i1l1861 0627                       i1l1839 0609                       i1l1855 0474  
                     i1l1847 043E                       i1l1863 0632                       i1l1951 0131  
                     u123_20 047B                       u115_20 0448                       u131_20 0142  
                     i1l1857 047B                       u123_21 047A                       u115_21 0444  
                     i1l1961 0142                       u131_21 0141                       i1l1953 0135  
                     i1l1971 0165                       i1l1963 0147                       i1l1955 0137  
                     i1l1981 0170                       i1l1973 0168                       i1l1965 014A  
                     i1l1957 0138                       i1l1991 0188                       i1l1983 0178  
                     i1l1975 016A                       i1l1967 014C                       i1l1959 013C  
                     u124_20 062E                       u140_20 01B7                       u132_20 0147  
                     u124_21 062A                       u140_21 01B6                       i1l1993 018C  
                     i1l1985 017B                       i1l1969 0160                       u132_21 0146  
                     i1l1977 016B                       i1l1995 0192                       i1l1987 0181  
                     i1l1979 016F                       u116_24 044B                       i1l1997 0197  
                     i1l1989 0182                       i1l1999 0198                       u141_20 01CF  
                     u133_20 0160                       u141_21 01CE                       u133_21 015F  
                     u125_24 0631                       u117_25 044E                       u133_25 015C  
                     u118_20 045A                       u142_20 01D4                       u134_20 0165  
                     u118_21 0456                       u142_21 01D3                       u134_21 0164  
                     _INTEDG 040E                       u135_20 016F                       u135_21 016E  
                     u119_24 045D                       u136_20 0188                       u136_21 0187  
                     u137_20 0192                       u137_21 0191                       u138_20 0197  
                     u138_21 0196                       u139_20 01B2                       u139_21 01B1  
                     u155_27 0471                       _TMR2ON 0092                       _SSPADD 0093  
                     _TRISA0 0428                       _TRISB0 0430                       _TRISB1 0431  
                     _TRISB2 0432                       _TRISC2 043A                       _TRISC3 043B  
                     _TRISB5 0435                       _TRISC4 043C                       _TRISB6 0436  
                     _TRISC6 043E                       _TRISC7 043F                       _SSPCON 0014  
                     _SSPBUF 0013       __end_of_LCD_Write_4Bit 057B                       _B_rate 0045  
     __end_of_LCD_Write_Char 055C         __size_of_config_UART 001B    __end_of_IO_Expander_Write 059A  
                  ??___awdiv 002C                    ??___awmod 002C             __end_of_init_PWM 04F2  
                 _Servo_Init 06B5             ___awdiv@quotient 002F              ___awmod@divisor 0028  
                     _result 007A              ___awmod@counter 002D                 __pdataCOMMON 007D  
                  ?_ADC_Init 0070                    ?_ADC_Read 0028                       saved_w 007E  
    __end_of__initialization 0034                    ?_LCD_Init 0070              ?_LCD_Write_4Bit 0070  
            ?_LCD_Write_Char 0070        __size_of_EEPROM_Write 001B               __pcstackCOMMON 0070  
               __pidataBANK0 06D2             _UART_send_string 059A                 ??i1_ADC_Read 0072  
                 ??_ADC_Init 0028                   ??_ADC_Read 002A                 _EEPROM_Write 05F2  
                 __pbssBANK0 003D    __size_of_setPWM_DutyCycle 001A                   ??_LCD_Init 002E  
         __end_ofi1_ADC_Read 0486   __size_of_IO_Expander_Write 001F                   __pmaintext 0038  
        ADC_Read@ADC_channel 002D                   __pintentry 0004                  ?_Servo_Init 0070  
                    _ACKSTAT 048E    __size_of_LCD_Write_String 0029                   _flag_trans 0042  
                    _T2CKPS0 0090                      _T2CKPS1 0091                      _LCD_CMD 05B9  
                    _GO_DONE 00FA                  _SelectServo 007C      __size_of_UART_send_char 000C  
                    _IR_Init 06D9                      _SSPCON2 0091                      _SSPSTAT 0094  
                 __stringtab 0486                    ?_init_PWM 0070                      _i2c_add 004C  
 __end_ofi1_setPWM_DutyCycle 063F                      ___awdiv 031E                      ___awmod 0387  
          LCD_Write@count_sp 003A                      _flag_dc 0049             ??_LCD_Set_Cursor 002F  
                    __ptext1 060D                      __ptext2 04C5                      __ptext3 05D7  
                    __ptext4 06B5                      __ptext5 04F2                      __ptext6 02B5  
                    __ptext7 0387                      __ptext8 031E                      __ptext9 053D  
                    _cnt_pos 007B             ___awmod@dividend 002A     __size_of_I2C_Master_Init 000D  
   __size_of_I2C_Master_Wait 000D     __size_of_I2C_Master_Stop 0009                    _LCD_Clear 0673  
                  _LCD_Write 02B5         end_of_initialization 0034          __size_of_Servo_Init 000B  
                 ??_init_PWM 0028                ??_EEPROM_Read 0028    __size_of_I2C_Master_Start 0009  
  __size_of_I2C_Master_Write 0012                   _time_delay 0047                   LCD_CMD@CMD 002D  
       i1setPWM_DutyCycle@DC 0076                   ?_LCD_Clear 0070            __size_of_ADC_Init 000E  
          __size_of_ADC_Read 0055             ??_LCD_Write_4Bit 002A                   ?_LCD_Write 0032  
   __end_of_UART_send_string 05B9            LCD_Write_String@i 002E             ??_LCD_Write_Char 002C  
           _setPWM_DutyCycle 060D                ??_config_UART 0028            __size_of_LCD_Init 00AD  
        __end_of_EEPROM_Read 0673             _LCD_Write_String 04F2                __pidataCOMMON 06DF  
                 LCD_Write@c 0038                   LCD_Write@i 0037                   LCD_Write@x 0032  
                 LCD_Write@y 0033          start_initialization 0015               _UART_send_char 06A9  
          ??_I2C_Master_Init 0028            ??_I2C_Master_Wait 0028            ??_I2C_Master_Stop 0028  
                  _OpenServo 0043                   init_fetch0 063F          __end_of_config_UART 05F2  
               ??_Servo_Init 0028                  __pdataBANK0 0045               ADC_Read@result 002B  
                   ?_LCD_CMD 0070       __end_of_UART_send_char 06B5                  __pbssCOMMON 007A  
                  ___latbits 0002                __pcstackBANK0 0020                  ??_LCD_Clear 002E  
                   ?_IR_Init 0070                  ??_LCD_Write 0034           __end_of_Servo_Init 06C0  
                _EEPROM_Read 0664                    __pnvBANK0 004C             _I2C_Master_Start 06C9  
          __size_of_init_PWM 002D             _I2C_Master_Write 0652        IO_Expander_Write@Data 0029  
                   ?___awdiv 0028                     ?___awmod 0028             UART_send_char@bt 0070  
       I2C_Master_Write@data 0028                    __pstrings 0486              ?_UART_send_char 0070  
                   _ADC_Init 0681                     _ADC_Read 03E2                    _count_sp1 0041  
                  _count_sp2 0040                    _count_sp3 003F           i1_setPWM_DutyCycle 0627  
        ?i1_setPWM_DutyCycle 0076                     _LCD_SWAP 004A            interrupt_function 0004  
                   _LCD_Init 0208                  _config_UART 05D7         ??i1_setPWM_DutyCycle 0078  
   __end_of_setPWM_DutyCycle 0627                  __stringbase 048B        UART_send_string@st_pt 0072  
           __size_of_LCD_CMD 001E           setPWM_DutyCycle@DC 002E             __size_of_IR_Init 0006  
          ?_UART_send_string 0070     __end_of_LCD_Write_String 051B           ??_UART_send_string 0071  
                 _EECON1bits 018C        i1ADC_Read@ADC_channel 0075             __size_of___awdiv 0069  
           __size_of___awmod 005B           __end_of__stringtab 048C              _I2C_Master_Init 069C  
            _I2C_Master_Wait 068F              _I2C_Master_Stop 06C0                     __ptext10 051B  
                   __ptext11 0208                     __ptext20 06D9                     __ptext12 0673  
                   __ptext21 069C                     __ptext13 05B9                     __ptext30 05F2  
                   __ptext22 0664                     __ptext14 055C                     __ptext23 03E2  
                   __ptext15 057B                     __ptext24 0681                     __ptext16 0652  
                   __ptext25 0131                     __ptext17 06C0                     __ptext26 0627  
                   __ptext18 06C9                     __ptext27 0437                     __ptext19 068F  
                   __ptext28 059A                     __ptext29 06A9                ?_EEPROM_Write 0070  
    __size_of_LCD_Set_Cursor 0022                     _init_PWM 04C5              _BackLight_State 004B  
              __size_of_isr1 00D7                __size_of_main 00F9                   i1_ADC_Read 0437  
   __end_of_I2C_Master_Start 06D2     __end_of_I2C_Master_Write 0664           EEPROM_Read@Address 0028  
         LCD_Write_Char@Data 002D                     init_ram0 0643               ??_EEPROM_Write 0071  
           i1ADC_Read@result 0073                     intlevel1 0000                 ?_EEPROM_Read 0070  
                  stringcode 0486      __size_of_LCD_Write_4Bit 001F      __size_of_LCD_Write_Char 001F  
           ??_UART_send_char 0070      __end_of_I2C_Master_Init 06A9      __end_of_I2C_Master_Wait 069C  
    __end_of_I2C_Master_Stop 06C9              LCD_Init@I2C_Add 0031          EEPROM_Write@Address 0071  
                   stringdir 0486                     stringtab 0486            LCD_Set_Cursor@COL 002E  
          LCD_Set_Cursor@ROW 0031               _cnt_time_delay 003D                 ?_config_UART 0070  
